
# 1 "source/OutputSequences.c"

# 13 "/Applications/microchip/xc8/v1.12/include/stdint.h"
typedef signed char int8_t;

# 20
typedef signed int int16_t;

# 28
typedef signed short long int int24_t;

# 36
typedef signed long int int32_t;

# 43
typedef unsigned char uint8_t;

# 49
typedef unsigned int uint16_t;

# 56
typedef unsigned short long int uint24_t;

# 63
typedef unsigned long int uint32_t;

# 71
typedef signed char int_least8_t;

# 78
typedef signed int int_least16_t;

# 90
typedef signed short long int int_least24_t;

# 98
typedef signed long int int_least32_t;

# 105
typedef unsigned char uint_least8_t;

# 111
typedef unsigned int uint_least16_t;

# 121
typedef unsigned short long int uint_least24_t;

# 128
typedef unsigned long int uint_least32_t;

# 137
typedef signed char int_fast8_t;

# 144
typedef signed int int_fast16_t;

# 156
typedef signed short long int int_fast24_t;

# 164
typedef signed long int int_fast32_t;

# 171
typedef unsigned char uint_fast8_t;

# 177
typedef unsigned int uint_fast16_t;

# 187
typedef unsigned short long int uint_fast24_t;

# 194
typedef unsigned long int uint_fast32_t;

# 200
typedef int32_t intmax_t;




typedef uint32_t uintmax_t;




typedef int16_t intptr_t;




typedef uint16_t uintptr_t;

# 4 "/Applications/microchip/xc8/v1.12/include/stdlib.h"
typedef int ptrdiff_t;
typedef unsigned size_t;
typedef unsigned short wchar_t;

# 16
extern int errno;

# 27
typedef struct {
int rem;
int quot;
} div_t;
typedef struct {
unsigned rem;
unsigned quot;
} udiv_t;
typedef struct {
long quot;
long rem;
} ldiv_t;
typedef struct {
unsigned long quot;
unsigned long rem;
} uldiv_t;

# 65
extern double atof(const char *);
extern double strtod(const char *, const char **);
extern int atoi(const char *);
extern unsigned xtoi(const char *);
extern long atol(const char *);
extern long strtol(const char *, char **, int);

extern int rand(void);
extern void srand(unsigned int);
extern void * calloc(size_t, size_t);
extern div_t div(int numer, int denom);
extern udiv_t udiv(unsigned numer, unsigned denom);
extern ldiv_t ldiv(long numer, long denom);
extern uldiv_t uldiv(unsigned long numer,unsigned long denom);
extern unsigned long _lrotl(unsigned long value, unsigned int shift);
extern unsigned long _lrotr(unsigned long value, unsigned int shift);
extern unsigned int _rotl(unsigned int value, unsigned int shift);
extern unsigned int _rotr(unsigned int value, unsigned int shift);




extern void * malloc(size_t);
extern void free(void *);
extern void * realloc(void *, size_t);

extern void abort(void);
extern void exit(int);
extern int atexit(void (*)(void));
extern char * getenv(const char *);
extern char ** environ;
extern int system(char *);
extern void qsort(void *, size_t, size_t, int (*)(const void *, const void *));
extern void * bsearch(const void *, void *, size_t, size_t, int(*)(const void *, const void *));
extern int abs(int);
extern long labs(long);


extern char * itoa(char * buf, int val, int base);
extern char * utoa(char * buf, unsigned val, int base);




extern char * ltoa(char * buf, long val, int base);
extern char * ultoa(char * buf, unsigned long val, int base);

extern char * ftoa(float f, int * status);

# 12 "/Applications/microchip/xc8/v1.12/include/stdbool.h"
typedef unsigned char bool;

# 16 "source/headers/TimerTask.h"
typedef struct ATimeStruct
{
volatile uint8_t Millisecond;
volatile uint8_t Second;
volatile uint8_t Minute;
volatile uint8_t Hour;
volatile uint8_t Day;
}t_ATime;

void InitTime( void );
bool MaturedTimer( volatile t_ATime *theTimer );
void CalculateFutureTime( volatile t_ATime *theTimer, uint8_t theMinutes, uint8_t theSeconds, uint8_t theHalfSeconds );
void Increment_Timer( void );

# 14 "source/headers/OutputSequences.h"
typedef enum
{
e_Unknown,
e_Off,
e_ColourA,
e_ColourB
}t_ButtonColour;

typedef enum
{
e_NotSet,
e_AllOff,
e_SteadyColourA,
e_SteadyColourB,
e_RedGreenFlash,
e_DimmedColourA,
e_RapidFlashColourB,
e_ColourMix
}t_Sequences;

t_ButtonColour GetColour( t_Sequences theSequences, volatile uint8_t *theState, volatile t_ATime *theTimer );

# 103 "/Applications/microchip/xc8/v1.12/include/stdlib.h"
extern char * itoa(char * buf, int val, int base);
extern char * utoa(char * buf, unsigned val, int base);




extern char * ltoa(char * buf, long val, int base);
extern char * ultoa(char * buf, unsigned long val, int base);

extern char * ftoa(float f, int * status);

# 5 "source/OutputSequences.c"
t_ButtonColour RedGreenFlash( volatile uint8_t *theState, volatile t_ATime *theTimer );
t_ButtonColour DimmedColourA( volatile uint8_t *theState, volatile t_ATime *theTimer );
t_ButtonColour RapidFlashColourB( volatile uint8_t *theState, volatile t_ATime *theTimer );
t_ButtonColour ColourMix( volatile uint8_t *theState, volatile t_ATime *theTimer );


t_ButtonColour GetColour( t_Sequences theSequences, volatile uint8_t *theState, volatile t_ATime *theTimer )
{
t_ButtonColour ReturnColour;

switch ( theSequences )
{
case e_AllOff:
ReturnColour = e_Off;
CalculateFutureTime( theTimer, 0, 0, 0 );
break;

case e_SteadyColourA:
ReturnColour = e_ColourA;
CalculateFutureTime( theTimer, 0, 0, 0 );
break;

case e_SteadyColourB:
ReturnColour = e_ColourB;
CalculateFutureTime( theTimer, 0, 0, 0 );
break;

case e_RedGreenFlash:
ReturnColour = RedGreenFlash( theState, theTimer );
break;

case e_DimmedColourA:
ReturnColour = DimmedColourA( theState, theTimer );
break;

case e_RapidFlashColourB:
ReturnColour = RapidFlashColourB( theState, theTimer );
break;

case e_ColourMix:
ReturnColour = ColourMix( theState, theTimer );
break;
}

return ReturnColour;
}

t_ButtonColour RedGreenFlash( volatile uint8_t *theState, volatile t_ATime *theTimer )
{
t_ButtonColour ReturnColour = e_Unknown;


switch( *theState )
{
case 0:
case 1:
ReturnColour = e_ColourA;
CalculateFutureTime( theTimer, 0, 2, 0 );
*theState = 2;
break;
case 2:
ReturnColour = e_ColourB;
CalculateFutureTime( theTimer, 0, 2, 0 );
*theState = 1;
break;
}
return ReturnColour;
}

t_ButtonColour DimmedColourA( volatile uint8_t *theState, volatile t_ATime *theTimer )
{
t_ButtonColour ReturnColour = e_Unknown;


switch( *theState )
{
case 0:
case 1:
ReturnColour = e_ColourA;
CalculateFutureTime( theTimer, 0, 0, 1 );
*theState = 2;
break;
case 2:
ReturnColour = e_Off;
CalculateFutureTime( theTimer, 0, 0, 2 );
*theState = 1;
break;
}
return ReturnColour;
}

t_ButtonColour RapidFlashColourB( volatile uint8_t *theState, volatile t_ATime *theTimer )
{
t_ButtonColour ReturnColour = e_Unknown;

switch( *theState )
{
case 0:
case 1:
ReturnColour = e_ColourB;
CalculateFutureTime( theTimer, 0, 0, 10 );
*theState = 2;
break;
case 2:
ReturnColour = e_Off;
CalculateFutureTime( theTimer, 0, 0, 50 );
*theState = 1;
break;
}
return ReturnColour;
}

t_ButtonColour ColourMix( volatile uint8_t *theState, volatile t_ATime *theTimer )
{
t_ButtonColour ReturnColour = e_Unknown;

switch( *theState )
{
case 0:
case 1:
ReturnColour = e_ColourA;
CalculateFutureTime( theTimer, 0, 0, 0 );
*theState = 2;
break;
case 2:
ReturnColour = e_ColourB;
CalculateFutureTime( theTimer, 0, 0, 0 );
*theState = 1;
break;
}
return ReturnColour;
}
