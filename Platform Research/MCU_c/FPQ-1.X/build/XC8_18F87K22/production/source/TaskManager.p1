Version 3.2 HI-TECH Software Intermediate Code
"39 /Users/David/Projects/FPQ-OnGitHub/Platform Research/MCU_c/FPQ-1.X/source/headers/Model.h
[v _InitKeys `(v ~T0 @X0 0 ef ]
"11 /Users/David/Projects/FPQ-OnGitHub/Platform Research/MCU_c/FPQ-1.X/source/headers/DataCommsTask.h
[v _DataCommsTask `(i ~T0 @X0 0 ef ]
"13 /Users/David/Projects/FPQ-OnGitHub/Platform Research/MCU_c/FPQ-1.X/source/headers/InputTask.h
[v _InputTask `(v ~T0 @X0 0 ef ]
"22 /Users/David/Projects/FPQ-OnGitHub/Platform Research/MCU_c/FPQ-1.X/source/headers/OutputTask.h
[v _OutputTask `(v ~T0 @X0 0 ef ]
[; ;stdio.h: 8: typedef int ptrdiff_t;
[; ;stdio.h: 9: typedef unsigned size_t;
[; ;stdio.h: 10: typedef unsigned short wchar_t;
[; ;stdarg.h: 7: typedef void * va_list[1];
[; ;stdarg.h: 10: extern void * __va_start(void);
[; ;stdarg.h: 13: extern void * __va_arg(void *, ...);
[; ;stdio.h: 23: extern int errno;
[; ;stdio.h: 54: struct __prbuf
[; ;stdio.h: 55: {
[; ;stdio.h: 56: char * ptr;
[; ;stdio.h: 57: void (* func)(char);
[; ;stdio.h: 58: };
[; ;conio.h: 17: extern int errno;
[; ;conio.h: 20: extern void init_uart(void);
[; ;conio.h: 22: extern char getch(void);
[; ;conio.h: 23: extern char getche(void);
[; ;conio.h: 24: extern void putch(char);
[; ;conio.h: 25: extern void ungetch(char);
[; ;conio.h: 27: extern __bit kbhit(void);
[; ;conio.h: 31: extern char * cgets(char *);
[; ;conio.h: 32: extern void cputs(const char *);
[; ;stdio.h: 99: extern int cprintf(char *, ...);
[; ;stdio.h: 104: extern int _doprnt(struct __prbuf *, const register char *, register va_list);
[; ;stdio.h: 194: extern char * gets(char *);
[; ;stdio.h: 195: extern int puts(const char *);
[; ;stdio.h: 196: extern int scanf(const char *, ...);
[; ;stdio.h: 197: extern int sscanf(const char *, const char *, ...);
[; ;stdio.h: 198: extern int vprintf(const char *, va_list);
[; ;stdio.h: 199: extern int vsprintf(char *, const char *, va_list) __attribute__((unsupported("vsprintf() is not supported by this compiler")));
[; ;stdio.h: 200: extern int vscanf(const char *, va_list ap);
[; ;stdio.h: 201: extern int vsscanf(const char *, const char *, va_list);
[; ;stdio.h: 205: extern int sprintf(char *, const char *, ...);
[; ;stdio.h: 206: extern int printf(const char *, ...);
[; ;stdlib.h: 27: typedef struct {
[; ;stdlib.h: 28: int rem;
[; ;stdlib.h: 29: int quot;
[; ;stdlib.h: 30: } div_t;
[; ;stdlib.h: 31: typedef struct {
[; ;stdlib.h: 32: unsigned rem;
[; ;stdlib.h: 33: unsigned quot;
[; ;stdlib.h: 34: } udiv_t;
[; ;stdlib.h: 35: typedef struct {
[; ;stdlib.h: 36: long quot;
[; ;stdlib.h: 37: long rem;
[; ;stdlib.h: 38: } ldiv_t;
[; ;stdlib.h: 39: typedef struct {
[; ;stdlib.h: 40: unsigned long quot;
[; ;stdlib.h: 41: unsigned long rem;
[; ;stdlib.h: 42: } uldiv_t;
[; ;stdlib.h: 65: extern double atof(const char *);
[; ;stdlib.h: 66: extern double strtod(const char *, const char **);
[; ;stdlib.h: 67: extern int atoi(const char *);
[; ;stdlib.h: 68: extern unsigned xtoi(const char *);
[; ;stdlib.h: 69: extern long atol(const char *);
[; ;stdlib.h: 70: extern long strtol(const char *, char **, int);
[; ;stdlib.h: 72: extern int rand(void);
[; ;stdlib.h: 73: extern void srand(unsigned int);
[; ;stdlib.h: 74: extern void * calloc(size_t, size_t);
[; ;stdlib.h: 75: extern div_t div(int numer, int denom);
[; ;stdlib.h: 76: extern udiv_t udiv(unsigned numer, unsigned denom);
[; ;stdlib.h: 77: extern ldiv_t ldiv(long numer, long denom);
[; ;stdlib.h: 78: extern uldiv_t uldiv(unsigned long numer,unsigned long denom);
[; ;stdlib.h: 79: extern unsigned long _lrotl(unsigned long value, unsigned int shift);
[; ;stdlib.h: 80: extern unsigned long _lrotr(unsigned long value, unsigned int shift);
[; ;stdlib.h: 81: extern unsigned int _rotl(unsigned int value, unsigned int shift);
[; ;stdlib.h: 82: extern unsigned int _rotr(unsigned int value, unsigned int shift);
[; ;stdlib.h: 87: extern void * malloc(size_t);
[; ;stdlib.h: 88: extern void free(void *);
[; ;stdlib.h: 89: extern void * realloc(void *, size_t);
[; ;stdlib.h: 91: extern void abort(void);
[; ;stdlib.h: 92: extern void exit(int);
[; ;stdlib.h: 93: extern int atexit(void (*)(void));
[; ;stdlib.h: 94: extern char * getenv(const char *);
[; ;stdlib.h: 95: extern char ** environ;
[; ;stdlib.h: 96: extern int system(char *);
[; ;stdlib.h: 97: extern void qsort(void *, size_t, size_t, int (*)(const void *, const void *));
[; ;stdlib.h: 98: extern void * bsearch(const void *, void *, size_t, size_t, int(*)(const void *, const void *));
[; ;stdlib.h: 99: extern int abs(int);
[; ;stdlib.h: 100: extern long labs(long);
[; ;stdlib.h: 103: extern char * itoa(char * buf, int val, int base);
[; ;stdlib.h: 104: extern char * utoa(char * buf, unsigned val, int base);
[; ;stdlib.h: 109: extern char * ltoa(char * buf, long val, int base);
[; ;stdlib.h: 110: extern char * ultoa(char * buf, unsigned long val, int base);
[; ;stdlib.h: 112: extern char * ftoa(float f, int * status);
[; ;TaskManager.h: 24: int TaskManager( void );
[; ;DataCommsTask.h: 11: int DataCommsTask( void );
[; ;stdbool.h: 12: typedef unsigned char bool;
[; ;InputTask.h: 13: void InputTask( void );
[; ;InputTask.h: 14: void MonitorButton( int theId );
[; ;InputTask.h: 15: bool ButtonBeingPressed( int theId );
[; ;OutputTask.h: 22: void OutputTask( void );
[; ;OutputSequences.h: 11: typedef enum
[; ;OutputSequences.h: 12: {
[; ;OutputSequences.h: 13: e_Off,
[; ;OutputSequences.h: 14: e_ColourA,
[; ;OutputSequences.h: 15: e_ColourB
[; ;OutputSequences.h: 16: }t_ButtonColour;
[; ;OutputSequences.h: 18: typedef struct SequencePhaseStruct
[; ;OutputSequences.h: 19: {
[; ;OutputSequences.h: 20: int NextActionTime;
[; ;OutputSequences.h: 21: t_ButtonColour CurrentColour;
[; ;OutputSequences.h: 22: }SequencePhase;
[; ;OutputSequences.h: 24: typedef struct ASequenceStruct
[; ;OutputSequences.h: 25: {
[; ;OutputSequences.h: 26: SequencePhase *Sequence;
[; ;OutputSequences.h: 27: int Size;
[; ;OutputSequences.h: 28: int Current;
[; ;OutputSequences.h: 29: }ASequence;
[; ;OutputSequences.h: 31: void InitSequences( void );
[; ;OutputSequences.h: 32: ASequence* GetSequencePointer( int theId );
[; ;TimerTask.h: 13: typedef struct ATimerStruct
[; ;TimerTask.h: 14: {
[; ;TimerTask.h: 15: int Matured;
[; ;TimerTask.h: 16: int FutureTime;
[; ;TimerTask.h: 18: }ATimer;
[; ;TimerTask.h: 20: int SetTimer( ATimer *theTimer, int theHours, int theMinutes, int theSeconds, int theHalfSeconds );
[; ;TimerTask.h: 21: void ClearTimer( ATimer *theTimer );
[; ;TimerTask.h: 22: bool MaturedTimer( ATimer *theTimer );
[; ;TimerTask.h: 23: ATimer* GetNewTimerPointer( void );
[; ;Model.h: 14: typedef enum
[; ;Model.h: 15: {
[; ;Model.h: 16: e_PressedNo,
[; ;Model.h: 17: e_PressedYes,
[; ;Model.h: 18: e_BeingServedNo,
[; ;Model.h: 19: e_BeingServedYes
[; ;Model.h: 20: }t_ButtonState;
[; ;Model.h: 22: typedef struct AKeyStruct
[; ;Model.h: 23: {
[; ;Model.h: 24: int Id;
[; ;Model.h: 25: t_ButtonState State;
[; ;Model.h: 26: ASequence* Sequence;
[; ;Model.h: 27: ATimer* Timer;
[; ;Model.h: 35: }AKey;
"37 /Users/David/Projects/FPQ-OnGitHub/Platform Research/MCU_c/FPQ-1.X/source/headers/Model.h
[v _KeyCount `Ci ~T0 @X0 1 e ]
[i _KeyCount
-> 5 `i
]
[; ;Model.h: 37: const int KeyCount = 5;
[; ;Model.h: 39: void InitKeys( void );
[; ;Model.h: 40: void SetKeyState( int theKeyId, t_ButtonState theState );
[; ;Model.h: 41: t_ButtonState GetKeyState( int theKeyId );
[; ;Model.h: 42: ATimer* GetKeyTimer( int theKeyId );
"16 source/TaskManager.c
[v _Operation `i ~T0 @X0 1 s ]
[i _Operation
-> 0 `i
]
[; ;TaskManager.c: 16: static int Operation = 0;
"19
[v _TaskManager `(i ~T0 @X0 1 ef ]
{
[; ;TaskManager.c: 18: int TaskManager()
[; ;TaskManager.c: 19: {
[e :U _TaskManager ]
[f ]
[; ;TaskManager.c: 20: switch( Operation )
"20
[e $U 12  ]
[; ;TaskManager.c: 21: {
"21
{
[; ;TaskManager.c: 22: case 0:
"22
[e :U 13 ]
[; ;TaskManager.c: 23: InitKeys();
"23
[e ( _InitKeys ..  ]
[; ;TaskManager.c: 24: Operation = 1;
"24
[e = _Operation -> 1 `i ]
[; ;TaskManager.c: 25: break;
"25
[e $U 11  ]
[; ;TaskManager.c: 27: case 1:
"27
[e :U 14 ]
[; ;TaskManager.c: 28: DataCommsTask();
"28
[e ( _DataCommsTask ..  ]
[; ;TaskManager.c: 29: InputTask();
"29
[e ( _InputTask ..  ]
[; ;TaskManager.c: 30: OutputTask();
"30
[e ( _OutputTask ..  ]
[; ;TaskManager.c: 31: break;
"31
[e $U 11  ]
"32
}
[; ;TaskManager.c: 32: }
[e $U 11  ]
"20
[e :U 12 ]
[e [\ _Operation , $ -> 0 `i 13
 , $ -> 1 `i 14
 11 ]
"32
[e :U 11 ]
[; ;TaskManager.c: 34: return ( 0 );
"34
[e ) -> 0 `i ]
[e $UE 10  ]
[; ;TaskManager.c: 35: }
"35
[e :UE 10 ]
}
