
# 1 "source/TaskManager.c"

# 8 "/Applications/microchip/xc8/v1.12/include/stdio.h"
typedef int ptrdiff_t;
typedef unsigned size_t;
typedef unsigned short wchar_t;

# 7 "/Applications/microchip/xc8/v1.12/include/stdarg.h"
typedef void * va_list[1];

#pragma intrinsic(__va_start)
extern void * __va_start(void);

#pragma intrinsic(__va_arg)
extern void * __va_arg(void *, ...);

# 23 "/Applications/microchip/xc8/v1.12/include/stdio.h"
extern int errno;

# 54
struct __prbuf
{
char * ptr;
void (* func)(char);
};

# 17 "/Applications/microchip/xc8/v1.12/include/conio.h"
extern int errno;


extern void init_uart(void);

extern char getch(void);
extern char getche(void);
extern void putch(char);
extern void ungetch(char);

extern __bit kbhit(void);

# 31
extern char * cgets(char *);
extern void cputs(const char *);

# 99 "/Applications/microchip/xc8/v1.12/include/stdio.h"
extern int cprintf(char *, ...);
#pragma printf_check(cprintf)



extern int _doprnt(struct __prbuf *, const register char *, register va_list);


# 191
#pragma printf_check(vprintf) const
#pragma printf_check(vsprintf) const

extern char * gets(char *);
extern int puts(const char *);
extern int scanf(const char *, ...);
extern int sscanf(const char *, const char *, ...);
extern int vprintf(const char *, va_list);
extern int vsprintf(char *, const char *, va_list) __attribute__((unsupported("vsprintf() is not supported by this compiler")));
extern int vscanf(const char *, va_list ap);
extern int vsscanf(const char *, const char *, va_list);

#pragma printf_check(printf) const
#pragma printf_check(sprintf) const
extern int sprintf(char *, const char *, ...);
extern int printf(const char *, ...);

# 27 "/Applications/microchip/xc8/v1.12/include/stdlib.h"
typedef struct {
int rem;
int quot;
} div_t;
typedef struct {
unsigned rem;
unsigned quot;
} udiv_t;
typedef struct {
long quot;
long rem;
} ldiv_t;
typedef struct {
unsigned long quot;
unsigned long rem;
} uldiv_t;

# 65
extern double atof(const char *);
extern double strtod(const char *, const char **);
extern int atoi(const char *);
extern unsigned xtoi(const char *);
extern long atol(const char *);
extern long strtol(const char *, char **, int);

extern int rand(void);
extern void srand(unsigned int);
extern void * calloc(size_t, size_t);
extern div_t div(int numer, int denom);
extern udiv_t udiv(unsigned numer, unsigned denom);
extern ldiv_t ldiv(long numer, long denom);
extern uldiv_t uldiv(unsigned long numer,unsigned long denom);
extern unsigned long _lrotl(unsigned long value, unsigned int shift);
extern unsigned long _lrotr(unsigned long value, unsigned int shift);
extern unsigned int _rotl(unsigned int value, unsigned int shift);
extern unsigned int _rotr(unsigned int value, unsigned int shift);




extern void * malloc(size_t);
extern void free(void *);
extern void * realloc(void *, size_t);

extern void abort(void);
extern void exit(int);
extern int atexit(void (*)(void));
extern char * getenv(const char *);
extern char ** environ;
extern int system(char *);
extern void qsort(void *, size_t, size_t, int (*)(const void *, const void *));
extern void * bsearch(const void *, void *, size_t, size_t, int(*)(const void *, const void *));
extern int abs(int);
extern long labs(long);


extern char * itoa(char * buf, int val, int base);
extern char * utoa(char * buf, unsigned val, int base);




extern char * ltoa(char * buf, long val, int base);
extern char * ultoa(char * buf, unsigned long val, int base);

extern char * ftoa(float f, int * status);

# 24 "/Users/David/Projects/FPQ-OnGitHub/Platform Research/MCU_c/FPQ-1.X/source/headers/TaskManager.h"
void TaskManager( void );

# 11 "/Users/David/Projects/FPQ-OnGitHub/Platform Research/MCU_c/FPQ-1.X/source/headers/DataCommsTask.h"
int DataCommsTask( void );

# 12 "/Applications/microchip/xc8/v1.12/include/stdbool.h"
typedef unsigned char bool;

# 13 "/Users/David/Projects/FPQ-OnGitHub/Platform Research/MCU_c/FPQ-1.X/source/headers/InputTask.h"
void InputTask( void );
void MonitorButton( int theId );
bool ButtonBeingPressed( int theId );

# 22 "/Users/David/Projects/FPQ-OnGitHub/Platform Research/MCU_c/FPQ-1.X/source/headers/OutputTask.h"
void OutputTask( void );
void IlluminateButton( int theId );
void ColourA( int theId );
void ColourB( int theId );
void ColourNone( int theId );

# 11 "/Users/David/Projects/FPQ-OnGitHub/Platform Research/MCU_c/FPQ-1.X/source/headers/OutputSequences.h"
typedef enum
{
e_Off,
e_ColourA,
e_ColourB
}t_ButtonColour;

typedef struct SequencePhaseStruct
{
int NextActionTime;
t_ButtonColour CurrentColour;
}SequencePhase;

typedef struct ASequenceStruct
{
SequencePhase *Sequence;
int Size;
int Current;
}ASequence;

void InitSequences( void );
ASequence* GetSequencePointer( int theId );

# 13 "/Users/David/Projects/FPQ-OnGitHub/Platform Research/MCU_c/FPQ-1.X/source/headers/TimerTask.h"
typedef struct ATimerStruct
{
int Matured;
int FutureTime;

}ATimer;

int SetTimer( ATimer *theTimer, int theHours, int theMinutes, int theSeconds, int theHalfSeconds );
void ClearTimer( ATimer *theTimer );
bool MaturedTimer( ATimer *theTimer );
ATimer* GetNewTimerPointer( void );

# 14 "/Users/David/Projects/FPQ-OnGitHub/Platform Research/MCU_c/FPQ-1.X/source/headers/Model.h"
typedef enum
{
e_PressedNo,
e_PressedYes,
e_BeingServedNo,
e_BeingServedYes
}t_ButtonState;

typedef struct AKeyStruct
{
int Id;
t_ButtonState State;
ASequence* Sequence;
ATimer* Timer;

# 35
}AKey;

const int KeyCount = 5;

void InitKeys( void );
void SetKeyState( int theKeyId, t_ButtonState theState );
t_ButtonState GetKeyState( int theKeyId );
ATimer* GetKeyTimer( int theKeyId );

# 16 "source/TaskManager.c"
void TaskManager()
{
static int Operation = 0;

switch( Operation )
{
case 0:
InitKeys();
Operation = 1;
break;

case 1:
DataCommsTask();
InputTask();
OutputTask();
break;
}
}

