

Microchip Technology PIC18 LITE Macro Assembler V1.20 build 52243 
                                                                                               Sat Aug 10 15:19:14 2013

Microchip Technology Omniscient Code Generator (Lite mode) build 52243
     1                           	processor	18F2585
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK1,global,class=CODE,delta=1
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    65                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    66                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    67                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    68                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    69  0000                     
    70                           	psect	idataCOMRAM
    71  002F5A                     __pidataCOMRAM:
    72                           	opt stack 0
    73                           
    74                           ;initializer for MonitorBartenderButton@BartenderButton
    75  002F5A  01                 	db	1
    76                           
    77                           ;initializer for TaskManager@Operation
    78  002F5B  01                 	db	1
    79                           
    80                           	psect	idataBANK1
    81  002510                     __pidataBANK1:
    82                           	opt stack 0
    83                           
    84                           ;initializer for _c_CanMessageSentOff
    85  002510  43                 	db	67
    86  002511  41                 	db	65
    87  002512  4E                 	db	78
    88  002513  20                 	db	32
    89  002514  4D                 	db	77
    90  002515  65                 	db	101
    91  002516  73                 	db	115
    92  002517  73                 	db	115
    93  002518  61                 	db	97
    94  002519  67                 	db	103
    95  00251A  65                 	db	101
    96  00251B  20                 	db	32
    97  00251C  53                 	db	83
    98  00251D  65                 	db	101
    99  00251E  6E                 	db	110
   100  00251F  74                 	db	116
   101  002520  3A                 	db	58
   102  002521  20                 	db	32
   103  002522  4F                 	db	79
   104  002523  46                 	db	70
   105  002524  46                 	db	70
   106  002525  20                 	db	32
   107  002526  0D                 	db	13
   108  002527  0A                 	db	10
   109  002528  00                 	db	0
   110                           
   111                           ;initializer for _c_CanMessageSentOn
   112  002529  43                 	db	67
   113  00252A  41                 	db	65
   114  00252B  4E                 	db	78
   115  00252C  20                 	db	32
   116  00252D  4D                 	db	77
   117  00252E  65                 	db	101
   118  00252F  73                 	db	115
   119  002530  73                 	db	115
   120  002531  61                 	db	97
   121  002532  67                 	db	103
   122  002533  65                 	db	101
   123  002534  20                 	db	32
   124  002535  53                 	db	83
   125  002536  65                 	db	101
   126  002537  6E                 	db	110
   127  002538  74                 	db	116
   128  002539  3A                 	db	58
   129  00253A  20                 	db	32
   130  00253B  4F                 	db	79
   131  00253C  4E                 	db	78
   132  00253D  20                 	db	32
   133  00253E  0D                 	db	13
   134  00253F  0A                 	db	10
   135  002540  00                 	db	0
   136                           
   137                           ;initializer for _c_CanCommandOff
   138  002541  43                 	db	67
   139  002542  41                 	db	65
   140  002543  4E                 	db	78
   141  002544  20                 	db	32
   142  002545  43                 	db	67
   143  002546  6F                 	db	111
   144  002547  6D                 	db	109
   145  002548  6D                 	db	109
   146  002549  61                 	db	97
   147  00254A  6E                 	db	110
   148  00254B  64                 	db	100
   149  00254C  3A                 	db	58
   150  00254D  20                 	db	32
   151  00254E  4F                 	db	79
   152  00254F  46                 	db	70
   153  002550  46                 	db	70
   154  002551  20                 	db	32
   155  002552  0D                 	db	13
   156  002553  0A                 	db	10
   157  002554  00                 	db	0
   158                           
   159                           ;initializer for _c_CanCommandOn
   160  002555  43                 	db	67
   161  002556  41                 	db	65
   162  002557  4E                 	db	78
   163  002558  20                 	db	32
   164  002559  43                 	db	67
   165  00255A  6F                 	db	111
   166  00255B  6D                 	db	109
   167  00255C  6D                 	db	109
   168  00255D  61                 	db	97
   169  00255E  6E                 	db	110
   170  00255F  64                 	db	100
   171  002560  3A                 	db	58
   172  002561  20                 	db	32
   173  002562  4F                 	db	79
   174  002563  4E                 	db	78
   175  002564  20                 	db	32
   176  002565  0D                 	db	13
   177  002566  0A                 	db	10
   178  002567  00                 	db	0
   179                           
   180                           ;initializer for _InitText
   181  002568  48                 	db	72
   182  002569  65                 	db	101
   183  00256A  6C                 	db	108
   184  00256B  6C                 	db	108
   185  00256C  6F                 	db	111
   186  00256D  20                 	db	32
   187  00256E  57                 	db	87
   188  00256F  6F                 	db	111
   189  002570  72                 	db	114
   190  002571  6C                 	db	108
   191  002572  64                 	db	100
   192  002573  2E                 	db	46
   193  002574  20                 	db	32
   194  002575  44                 	db	68
   195  002576  61                 	db	97
   196  002577  74                 	db	116
   197  002578  61                 	db	97
   198  002579  20                 	db	32
   199  00257A  43                 	db	67
   200  00257B  6F                 	db	111
   201  00257C  6D                 	db	109
   202  00257D  6D                 	db	109
   203  00257E  73                 	db	115
   204  00257F  20                 	db	32
   205  002580  49                 	db	73
   206  002581  6E                 	db	110
   207  002582  69                 	db	105
   208  002583  74                 	db	116
   209  002584  2E                 	db	46
   210  002585  2E                 	db	46
   211  002586  2E                 	db	46
   212  002587  2E                 	db	46
   213  002588  20                 	db	32
   214  002589  44                 	db	68
   215  00258A  6F                 	db	111
   216  00258B  6E                 	db	110
   217  00258C  65                 	db	101
   218  00258D  0A                 	db	10
   219  00258E  00                 	db	0
   220                           
   221                           ;initializer for _c_CustomerBeingServed
   222  00258F  43                 	db	67
   223  002590  75                 	db	117
   224  002591  73                 	db	115
   225  002592  74                 	db	116
   226  002593  6F                 	db	111
   227  002594  6D                 	db	109
   228  002595  65                 	db	101
   229  002596  72                 	db	114
   230  002597  20                 	db	32
   231  002598  42                 	db	66
   232  002599  65                 	db	101
   233  00259A  69                 	db	105
   234  00259B  6E                 	db	110
   235  00259C  67                 	db	103
   236  00259D  20                 	db	32
   237  00259E  53                 	db	83
   238  00259F  65                 	db	101
   239  0025A0  72                 	db	114
   240  0025A1  76                 	db	118
   241  0025A2  65                 	db	101
   242  0025A3  64                 	db	100
   243  0025A4  3A                 	db	58
   244  0025A5  20                 	db	32
   245  0025A6  0D                 	db	13
   246  0025A7  0A                 	db	10
   247  0025A8  00                 	db	0
   248                           
   249                           ;initializer for _c_CustomerWating
   250  0025A9  43                 	db	67
   251  0025AA  75                 	db	117
   252  0025AB  73                 	db	115
   253  0025AC  74                 	db	116
   254  0025AD  6F                 	db	111
   255  0025AE  6D                 	db	109
   256  0025AF  65                 	db	101
   257  0025B0  72                 	db	114
   258  0025B1  20                 	db	32
   259  0025B2  57                 	db	87
   260  0025B3  61                 	db	97
   261  0025B4  74                 	db	116
   262  0025B5  69                 	db	105
   263  0025B6  6E                 	db	110
   264  0025B7  67                 	db	103
   265  0025B8  3A                 	db	58
   266  0025B9  20                 	db	32
   267  0025BA  0D                 	db	13
   268  0025BB  0A                 	db	10
   269  0025BC  00                 	db	0
   270                           
   271                           	psect	smallconst
   272  000D00                     __psmallconst:
   273                           	opt stack 0
   274  000D00                     _dpowers:
   275                           	opt stack 0
   276  000D00  0001               	dw	1
   277  000D02  000A               	dw	10
   278  000D04  0064               	dw	100
   279  000D06  03E8               	dw	1000
   280  000D08  2710               	dw	10000
   281  000D0A                     __end_of_dpowers:
   282                           	opt stack 0
   283  000D0A                     _EndChar:
   284                           	opt stack 0
   285  000D0A  03                 	db	3
   286  000D0B                     __end_of_EndChar:
   287                           	opt stack 0
   288  000D0B                     _KeyCount:
   289                           	opt stack 0
   290  000D0B  05                 	db	5
   291  000D0C                     __end_of_KeyCount:
   292                           	opt stack 0
   293  000D0C                     _NoRead:
   294                           	opt stack 0
   295  000D0C  00                 	db	0
   296  000D0D                     __end_of_NoRead:
   297                           	opt stack 0
   298  000D0D                     _SequenceReset:
   299                           	opt stack 0
   300  000D0D  00                 	db	0
   301  000D0E                     __end_of_SequenceReset:
   302                           	opt stack 0
   303  000D0E                     _StartChar:
   304                           	opt stack 0
   305  000D0E  02                 	db	2
   306  000D0F                     __end_of_StartChar:
   307                           	opt stack 0
   308  000D0F                     _TimersCount:
   309                           	opt stack 0
   310  000D0F  0A                 	db	10
   311  000D10                     __end_of_TimersCount:
   312                           	opt stack 0
   313  000D10                     _c_NoHrInDay:
   314                           	opt stack 0
   315  000D10  18                 	db	24
   316  000D11                     __end_of_c_NoHrInDay:
   317                           	opt stack 0
   318  000D11                     _c_NoMsecInSec:
   319                           	opt stack 0
   320  000D11  0F                 	db	15
   321  000D12                     __end_of_c_NoMsecInSec:
   322                           	opt stack 0
   323  000D12                     _c_NoSecInMinOrMinInHr:
   324                           	opt stack 0
   325  000D12  3C                 	db	60
   326  000D13                     __end_of_c_NoSecInMinOrMinInHr:
   327                           	opt stack 0
   328  0000                     _ADCON1	set	4033
   329  0000                     _BRGCON1	set	3952
   330  0000                     _BRGCON2	set	3953
   331  0000                     _BRGCON3	set	3954
   332  0000                     _CANCON	set	3951
   333  0000                     _CIOCON	set	3955
   334  0000                     _COMSTATbits	set	3956
   335  0000                     _ECANCONbits	set	3959
   336  0000                     _INTCONbits	set	4082
   337  0000                     _OSCCON	set	4051
   338  0000                     _PIE1bits	set	3997
   339  0000                     _PIR1bits	set	3998
   340  0000                     _PIR3bits	set	4004
   341  0000                     _PORTA	set	3968
   342  0000                     _PORTAbits	set	3968
   343  0000                     _PORTB	set	3969
   344  0000                     _PORTBbits	set	3969
   345  0000                     _PORTC	set	3970
   346  0000                     _PORTCbits	set	3970
   347  0000                     _RCREG	set	4014
   348  0000                     _RCSTA	set	4011
   349  0000                     _RCSTAbits	set	4011
   350  0000                     _RXB0CONbits	set	3936
   351  0000                     _RXB1CONbits	set	3920
   352  0000                     _RXF0SIDH	set	3840
   353  0000                     _RXF0SIDL	set	3841
   354  0000                     _RXF1SIDH	set	3844
   355  0000                     _RXF1SIDL	set	3845
   356  0000                     _RXF2SIDH	set	3848
   357  0000                     _RXF2SIDL	set	3849
   358  0000                     _RXF3SIDH	set	3852
   359  0000                     _RXF3SIDL	set	3853
   360  0000                     _RXF4SIDH	set	3856
   361  0000                     _RXF4SIDL	set	3857
   362  0000                     _RXF5SIDH	set	3860
   363  0000                     _RXF5SIDL	set	3861
   364  0000                     _RXM0SIDH	set	3864
   365  0000                     _RXM0SIDL	set	3865
   366  0000                     _RXM0SIDLbits	set	3865
   367  0000                     _RXM1SIDH	set	3868
   368  0000                     _RXM1SIDL	set	3869
   369  0000                     _RXM1SIDLbits	set	3869
   370  0000                     _SPBRG	set	4015
   371  0000                     _SPBRGH	set	4016
   372  0000                     _T0CON	set	4053
   373  0000                     _T0CONbits	set	4053
   374  0000                     _TMR0H	set	4055
   375  0000                     _TMR0L	set	4054
   376  0000                     _TRISA	set	3986
   377  0000                     _TRISB	set	3987
   378  0000                     _TRISC	set	3988
   379  0000                     _TRISCbits	set	3988
   380  0000                     _TXREG	set	4013
   381  0000                     _TXSTA	set	4012
   382  0000                     _TXSTAbits	set	4012
   383  0000                     _T0IF	set	32658
   384  0000                     _RXB0CON	set	3936
   385  0000                     _RXB1CON	set	3920
   386  0000                     _TXB0CON	set	3904
   387  0000                     _TXB1CON	set	3888
   388  0000                     _TXB2CON	set	3872
   389  000D13                     __stringdata:
   390                           	opt stack 0
   391  000D13                     STR_3:
   392                           
   393                           ; BSR set to: 0
   394  000D13  73                 	db	115	;'s'
   395  000D14  6F                 	db	111	;'o'
   396  000D15  75                 	db	117	;'u'
   397  000D16  72                 	db	114	;'r'
   398  000D17  63                 	db	99	;'c'
   399  000D18  65                 	db	101	;'e'
   400  000D19  2F                 	db	47
   401  000D1A  44                 	db	68	;'D'
   402  000D1B  61                 	db	97	;'a'
   403  000D1C  74                 	db	116	;'t'
   404  000D1D  61                 	db	97	;'a'
   405  000D1E  43                 	db	67	;'C'
   406  000D1F  6F                 	db	111	;'o'
   407  000D20  6D                 	db	109	;'m'
   408  000D21  6D                 	db	109	;'m'
   409  000D22  73                 	db	115	;'s'
   410  000D23  54                 	db	84	;'T'
   411  000D24  61                 	db	97	;'a'
   412  000D25  73                 	db	115	;'s'
   413  000D26  6B                 	db	107	;'k'
   414  000D27  2E                 	db	46
   415  000D28  63                 	db	99	;'c'
   416  000D29  00                 	db	0
   417  000D2A                     STR_26:
   418                           
   419                           ; BSR set to: 0
   420  000D2A  73                 	db	115	;'s'
   421  000D2B  6F                 	db	111	;'o'
   422  000D2C  75                 	db	117	;'u'
   423  000D2D  72                 	db	114	;'r'
   424  000D2E  63                 	db	99	;'c'
   425  000D2F  65                 	db	101	;'e'
   426  000D30  2F                 	db	47
   427  000D31  45                 	db	69	;'E'
   428  000D32  43                 	db	67	;'C'
   429  000D33  41                 	db	65	;'A'
   430  000D34  4E                 	db	78	;'N'
   431  000D35  2E                 	db	46
   432  000D36  63                 	db	99	;'c'
   433  000D37  00                 	db	0
   434  000D38                     STR_2:
   435                           
   436                           ; BSR set to: 0
   437  000D38  20                 	db	32
   438  000D39  46                 	db	70	;'F'
   439  000D3A  69                 	db	105	;'i'
   440  000D3B  6C                 	db	108	;'l'
   441  000D3C  65                 	db	101	;'e'
   442  000D3D  3A                 	db	58	;':'
   443  000D3E  20                 	db	32
   444  000D3F  00                 	db	0
   445  000D40                     STR_1:
   446                           
   447                           ; BSR set to: 0
   448  000D40  4C                 	db	76	;'L'
   449  000D41  69                 	db	105	;'i'
   450  000D42  6E                 	db	110	;'n'
   451  000D43  65                 	db	101	;'e'
   452  000D44  3A                 	db	58	;':'
   453  000D45  20                 	db	32
   454  000D46  00                 	db	0
   455  000D47                     STR_4:
   456                           
   457                           ; BSR set to: 0
   458  000D47  0D                 	db	13
   459  000D48  0A                 	db	10
   460  000D49  00                 	db	0
   461  000D4A                     STR_10:
   462                           
   463                           ; BSR set to: 0
   464  000D4A  25                 	db	37
   465  000D4B  64                 	db	100	;'d'
   466  000D4C  00                 	db	0
   467  000D4D                     __end_of__stringdata:
   468                           	opt stack 0
   469                           
   470                           ; #config settings
   471  000D4D  00                 	db	0	; dummy byte at the end
   472  0000                     
   473                           	psect	cinit
   474  002AB6                     __pcinit:
   475                           	opt stack 0
   476  002AB6                     start_initialization:
   477                           	opt stack 0
   478  002AB6                     __initialization:
   479                           	opt stack 0
   480                           
   481                           ; Clear objects allocated to BANK0 (103 bytes)
   482  002AB6  EE00  F060         	lfsr	0,__pbssBANK0
   483  002ABA  0E67               	movlw	103
   484  002ABC                     clear_0:
   485  002ABC  6AEE               	clrf	postinc0,c
   486  002ABE  06E8               	decf	wreg,f,c
   487  002AC0  E1FD               	bnz	clear_0
   488                           
   489                           ; Clear objects allocated to COMRAM (13 bytes)
   490  002AC2  EE00  F032         	lfsr	0,__pbssCOMRAM
   491  002AC6  0E0D               	movlw	13
   492  002AC8                     clear_1:
   493  002AC8  6AEE               	clrf	postinc0,c
   494  002ACA  06E8               	decf	wreg,f,c
   495  002ACC  E1FD               	bnz	clear_1
   496                           
   497                           ; Initialize objects allocated to BANK1 (173 bytes)
   498                           ; load TBLPTR registers with __pidataBANK1
   499  002ACE  0E10               	movlw	low __pidataBANK1
   500  002AD0  6EF6               	movwf	tblptrl,c
   501  002AD2  0E25               	movlw	high __pidataBANK1
   502  002AD4  6EF7               	movwf	tblptrh,c
   503  002AD6  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   504  002AD8  6EF8               	movwf	tblptru,c
   505  002ADA  EE01  F000         	lfsr	0,__pdataBANK1
   506  002ADE  EE10 F0AD          	lfsr	1,173
   507  002AE2                     copy_data0:
   508  002AE2  0009               	tblrd		*+
   509  002AE4  CFF5 FFEE          	movff	tablat,postinc0
   510  002AE8  50E5               	movf	postdec1,w,c
   511  002AEA  50E1               	movf	fsr1l,w,c
   512  002AEC  E1FA               	bnz	copy_data0
   513                           
   514                           ; Initialize objects allocated to COMRAM (2 bytes)
   515                           ; load TBLPTR registers with __pidataCOMRAM
   516  002AEE  0E5A               	movlw	low __pidataCOMRAM
   517  002AF0  6EF6               	movwf	tblptrl,c
   518  002AF2  0E2F               	movlw	high __pidataCOMRAM
   519  002AF4  6EF7               	movwf	tblptrh,c
   520  002AF6  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   521  002AF8  6EF8               	movwf	tblptru,c
   522  002AFA  0009               	tblrd		*+	;fetch initializer
   523  002AFC  CFF5 F03F          	movff	tablat,__pdataCOMRAM
   524  002B00  0009               	tblrd		*+	;fetch initializer
   525  002B02  CFF5 F040          	movff	tablat,__pdataCOMRAM+1
   526  002B06                     end_of_initialization:
   527                           	opt stack 0
   528  002B06                     __end_of__initialization:
   529                           	opt stack 0
   530  002B06  0E00               	movlw	low (__Lmediumconst shr (0+16))
   531  002B08  6EF8               	movwf	tblptru,c
   532  002B0A  0100               	movlb	0
   533  002B0C  EFA1  F017         	goto	_main	;jump to C main() function
   534                           tblptru	equ	0xFF8
   535                           tblptrh	equ	0xFF7
   536                           tblptrl	equ	0xFF6
   537                           tablat	equ	0xFF5
   538                           postinc0	equ	0xFEE
   539                           wreg	equ	0xFE8
   540                           postdec1	equ	0xFE5
   541                           fsr1l	equ	0xFE1
   542                           
   543                           	psect	bssCOMRAM
   544  000032                     __pbssCOMRAM:
   545                           	opt stack 0
   546  000032                     _m_CurrentTime:
   547                           	opt stack 0
   548  000032                     	ds	5
   549  000037                     _m_HalfSeconds:
   550                           	opt stack 0
   551  000037                     	ds	3
   552  00003A                     UartCommsTask@DataCommsReadState:
   553                           	opt stack 0
   554  00003A                     	ds	1
   555  00003B                     UartCommsTask@Msg:
   556                           	opt stack 0
   557  00003B                     	ds	1
   558  00003C                     _USART_Status:
   559                           	opt stack 0
   560  00003C                     	ds	1
   561  00003D                     _m_HeadOfQueue:
   562                           	opt stack 0
   563  00003D                     	ds	1
   564  00003E                     _m_Ticks:
   565                           	opt stack 0
   566  00003E                     	ds	1
   567                           tblptru	equ	0xFF8
   568                           tblptrh	equ	0xFF7
   569                           tblptrl	equ	0xFF6
   570                           tablat	equ	0xFF5
   571                           postinc0	equ	0xFEE
   572                           wreg	equ	0xFE8
   573                           postdec1	equ	0xFE5
   574                           fsr1l	equ	0xFE1
   575                           
   576                           	psect	dataCOMRAM
   577  00003F                     __pdataCOMRAM:
   578                           	opt stack 0
   579  00003F                     MonitorBartenderButton@BartenderButton:
   580                           	opt stack 0
   581  00003F                     	ds	1
   582  000040                     TaskManager@Operation:
   583                           	opt stack 0
   584  000040                     	ds	1
   585                           tblptru	equ	0xFF8
   586                           tblptrh	equ	0xFF7
   587                           tblptrl	equ	0xFF6
   588                           tablat	equ	0xFF5
   589                           postinc0	equ	0xFEE
   590                           wreg	equ	0xFE8
   591                           postdec1	equ	0xFE5
   592                           fsr1l	equ	0xFE1
   593                           
   594                           	psect	bssBANK0
   595  000060                     __pbssBANK0:
   596                           	opt stack 0
   597  000060                     CanCommsTask@DataCommsReadState:
   598                           	opt stack 0
   599  000060                     	ds	1
   600  000061                     __ECANRxFilterHitInfo:
   601                           	opt stack 0
   602  000061                     	ds	1
   603  000062                     _m_Toggle:
   604                           	opt stack 0
   605  000062                     	ds	1
   606  000063                     _m_Keys:
   607                           	opt stack 0
   608  000063                     	ds	85
   609  0000B8                     _m_DataWriteTimer:
   610                           	opt stack 0
   611  0000B8                     	ds	5
   612  0000BD                     _data:
   613                           	opt stack 0
   614  0000BD                     	ds	4
   615  0000C1                     _id:
   616                           	opt stack 0
   617  0000C1                     	ds	4
   618  0000C5                     _dataLen:
   619                           	opt stack 0
   620  0000C5                     	ds	1
   621  0000C6                     _flags:
   622                           	opt stack 0
   623  0000C6                     	ds	1
   624                           tblptru	equ	0xFF8
   625                           tblptrh	equ	0xFF7
   626                           tblptrl	equ	0xFF6
   627                           tablat	equ	0xFF5
   628                           postinc0	equ	0xFEE
   629                           wreg	equ	0xFE8
   630                           postdec1	equ	0xFE5
   631                           fsr1l	equ	0xFE1
   632                           
   633                           	psect	dataBANK1
   634  000100                     __pdataBANK1:
   635                           	opt stack 0
   636  000100                     _c_CanMessageSentOff:
   637                           	opt stack 0
   638  000100                     	ds	25
   639  000119                     _c_CanMessageSentOn:
   640                           	opt stack 0
   641  000119                     	ds	24
   642  000131                     _c_CanCommandOff:
   643                           	opt stack 0
   644  000131                     	ds	20
   645  000145                     _c_CanCommandOn:
   646                           	opt stack 0
   647  000145                     	ds	19
   648  000158                     _InitText:
   649                           	opt stack 0
   650  000158                     	ds	39
   651  00017F                     _c_CustomerBeingServed:
   652                           	opt stack 0
   653  00017F                     	ds	26
   654  000199                     _c_CustomerWating:
   655                           	opt stack 0
   656  000199                     	ds	20
   657                           tblptru	equ	0xFF8
   658                           tblptrh	equ	0xFF7
   659                           tblptrl	equ	0xFF6
   660                           tablat	equ	0xFF5
   661                           postinc0	equ	0xFEE
   662                           wreg	equ	0xFE8
   663                           postdec1	equ	0xFE5
   664                           fsr1l	equ	0xFE1
   665                           
   666                           	psect	cstackBANK0
   667  0000C7                     __pcstackBANK0:
   668                           	opt stack 0
   669  0000C7                     ?_ECANSendMessage:
   670                           	opt stack 0
   671  0000C7                     ?_sprintf:
   672                           	opt stack 0
   673  0000C7                     InputTask@i:
   674                           	opt stack 0
   675  0000C7                     RedGreenFlash@ReturnColour:
   676                           	opt stack 0
   677  0000C7                     DimmedColourA@ReturnColour:
   678                           	opt stack 0
   679  0000C7                     RapidFlashColourB@ReturnColour:
   680                           	opt stack 0
   681  0000C7                     ColourMix@ReturnColour:
   682                           	opt stack 0
   683  0000C7                     sprintf@sp:
   684                           	opt stack 0
   685  0000C7                     ECANSendMessage@id:
   686                           	opt stack 0
   687                           
   688                           ; 4 bytes @ 0x0
   689  0000C7                     	ds	1
   690  0000C8                     ?_GetColour:
   691                           	opt stack 0
   692  0000C8                     GetColour@theSequences:
   693                           	opt stack 0
   694                           
   695                           ; 1 bytes @ 0x1
   696  0000C8                     	ds	1
   697  0000C9                     GetColour@theState:
   698                           	opt stack 0
   699  0000C9                     sprintf@f:
   700                           	opt stack 0
   701                           
   702                           ; 2 bytes @ 0x2
   703  0000C9                     	ds	2
   704  0000CB                     GetColour@theTimer:
   705                           	opt stack 0
   706  0000CB                     ECANSendMessage@data:
   707                           	opt stack 0
   708                           
   709                           ; 2 bytes @ 0x4
   710  0000CB                     	ds	2
   711  0000CD                     ??_GetColour:
   712  0000CD                     ECANSendMessage@dataLen:
   713                           	opt stack 0
   714  0000CD                     sprintf@ap:
   715                           	opt stack 0
   716                           
   717                           ; 2 bytes @ 0x6
   718  0000CD                     	ds	1
   719  0000CE                     ECANSendMessage@msgFlags:
   720                           	opt stack 0
   721                           
   722                           ; 1 bytes @ 0x7
   723  0000CE                     	ds	1
   724  0000CF                     sprintf@flag:
   725                           	opt stack 0
   726  0000CF                     ECANSendMessage@pb:
   727                           	opt stack 0
   728                           
   729                           ; 18 bytes @ 0x8
   730  0000CF                     	ds	1
   731  0000D0                     GetColour@ReturnColour:
   732                           	opt stack 0
   733  0000D0                     sprintf@prec:
   734                           	opt stack 0
   735                           
   736                           ; 1 bytes @ 0x9
   737  0000D0                     	ds	1
   738  0000D1                     ?_IlluminateButton:
   739                           	opt stack 0
   740  0000D1                     IlluminateButton@theId:
   741                           	opt stack 0
   742  0000D1                     sprintf@_val:
   743                           	opt stack 0
   744                           
   745                           ; 5 bytes @ 0xA
   746  0000D1                     	ds	1
   747  0000D2                     IlluminateButton@KeyTimer:
   748                           	opt stack 0
   749                           
   750                           ; 2 bytes @ 0xB
   751  0000D2                     	ds	2
   752  0000D4                     IlluminateButton@SequenceState:
   753                           	opt stack 0
   754                           
   755                           ; 2 bytes @ 0xD
   756  0000D4                     	ds	2
   757  0000D6                     IlluminateButton@Sequence:
   758                           	opt stack 0
   759  0000D6                     sprintf@c:
   760                           	opt stack 0
   761                           
   762                           ; 1 bytes @ 0xF
   763  0000D6                     	ds	1
   764  0000D7                     ??_OutputTask:
   765  0000D7                     ?_ECANReceiveMessage:
   766                           	opt stack 0
   767  0000D7                     ECANReceiveMessage@id:
   768                           	opt stack 0
   769                           
   770                           ; 2 bytes @ 0x10
   771  0000D7                     	ds	1
   772  0000D8                     OutputTask@i:
   773                           	opt stack 0
   774                           
   775                           ; 1 bytes @ 0x11
   776  0000D8                     	ds	1
   777  0000D9                     ECANReceiveMessage@data:
   778                           	opt stack 0
   779                           
   780                           ; 2 bytes @ 0x12
   781  0000D9                     	ds	2
   782  0000DB                     ECANReceiveMessage@dataLen:
   783                           	opt stack 0
   784                           
   785                           ; 2 bytes @ 0x14
   786  0000DB                     	ds	2
   787  0000DD                     ECANReceiveMessage@msgFlags:
   788                           	opt stack 0
   789                           
   790                           ; 2 bytes @ 0x16
   791  0000DD                     	ds	2
   792  0000DF                     ECANReceiveMessage@str:
   793                           	opt stack 0
   794                           
   795                           ; 5 bytes @ 0x18
   796  0000DF                     	ds	2
   797  0000E1                     ECANSendMessage@j:
   798                           	opt stack 0
   799                           
   800                           ; 1 bytes @ 0x1A
   801  0000E1                     	ds	1
   802  0000E2                     ECANSendMessage@tempPtr:
   803                           	opt stack 0
   804                           
   805                           ; 2 bytes @ 0x1B
   806  0000E2                     	ds	2
   807  0000E4                     ECANSendMessage@temp:
   808                           	opt stack 0
   809  0000E4                     ECANReceiveMessage@str_1913:
   810                           	opt stack 0
   811                           
   812                           ; 5 bytes @ 0x1D
   813  0000E4                     	ds	1
   814  0000E5                     ECANSendMessage@i:
   815                           	opt stack 0
   816                           
   817                           ; 1 bytes @ 0x1E
   818  0000E5                     	ds	1
   819  0000E6                     ECANSendMessage@ptr:
   820                           	opt stack 0
   821                           
   822                           ; 2 bytes @ 0x1F
   823  0000E6                     	ds	3
   824  0000E9                     ECANReceiveMessage@savedPtr:
   825                           	opt stack 0
   826                           
   827                           ; 2 bytes @ 0x22
   828  0000E9                     	ds	2
   829  0000EB                     ECANReceiveMessage@i:
   830                           	opt stack 0
   831                           
   832                           ; 1 bytes @ 0x24
   833  0000EB                     	ds	1
   834  0000EC                     ECANReceiveMessage@ptr:
   835                           	opt stack 0
   836                           
   837                           ; 2 bytes @ 0x25
   838  0000EC                     	ds	2
   839  0000EE                     ECANReceiveMessage@temp:
   840                           	opt stack 0
   841                           
   842                           ; 1 bytes @ 0x27
   843  0000EE                     	ds	1
   844  0000EF                     ??_CanCommsTask:
   845                           
   846                           ; 0 bytes @ 0x28
   847  0000EF                     	ds	3
   848  0000F2                     CanCommsTask@str:
   849                           	opt stack 0
   850                           
   851                           ; 5 bytes @ 0x2B
   852  0000F2                     	ds	5
   853  0000F7                     CanCommsTask@str_333:
   854                           	opt stack 0
   855                           
   856                           ; 5 bytes @ 0x30
   857  0000F7                     	ds	5
   858  0000FC                     ??_TaskManager:
   859                           
   860                           ; 0 bytes @ 0x35
   861  0000FC                     	ds	1
   862                           tblptru	equ	0xFF8
   863                           tblptrh	equ	0xFF7
   864                           tblptrl	equ	0xFF6
   865                           tablat	equ	0xFF5
   866                           postinc0	equ	0xFEE
   867                           wreg	equ	0xFE8
   868                           postdec1	equ	0xFE5
   869                           fsr1l	equ	0xFE1
   870                           
   871                           	psect	cstackCOMRAM
   872  000001                     __pcstackCOMRAM:
   873                           	opt stack 0
   874  000001                     ??_ISR:
   875  000001                     
   876                           ; 2 bytes @ 0x0
   877  000001                     	ds	14
   878  00000F                     ??_LowPriorityISR:
   879                           
   880                           ; 0 bytes @ 0xE
   881  00000F                     	ds	17
   882  000020                     ?_CalculateFutureTime:
   883                           	opt stack 0
   884  000020                     ?_WriteTimer0:
   885                           	opt stack 0
   886  000020                     ?_OpenTimer0:
   887                           	opt stack 0
   888  000020                     ?_OpenUSART:
   889                           	opt stack 0
   890  000020                     ?_ColourNone:
   891                           	opt stack 0
   892  000020                     ?_ColourA:
   893                           	opt stack 0
   894  000020                     ?_ColourB:
   895                           	opt stack 0
   896  000020                     ?_ECANSetOperationMode:
   897                           	opt stack 0
   898  000020                     ?__CANIDToRegs:
   899                           	opt stack 0
   900  000020                     ?__RegsToCANID:
   901                           	opt stack 0
   902  000020                     ?_WriteUSART:
   903                           	opt stack 0
   904  000020                     ?_MaturedTimer:
   905                           	opt stack 0
   906  000020                     ?_GetKeyState:
   907                           	opt stack 0
   908  000020                     ?_ButtonBeingPressed:
   909                           	opt stack 0
   910  000020                     ?_GetSequence:
   911                           	opt stack 0
   912  000020                     ?_GetKeyInputTimer:
   913                           	opt stack 0
   914  000020                     ?_GetKeyTimer:
   915                           	opt stack 0
   916  000020                     ?_GetSequenceState:
   917                           	opt stack 0
   918  000020                     ?___lwdiv:
   919                           	opt stack 0
   920  000020                     ButtonBeingPressed@theId:
   921                           	opt stack 0
   922  000020                     ColourA@theId:
   923                           	opt stack 0
   924  000020                     ColourB@theId:
   925                           	opt stack 0
   926  000020                     ColourNone@theId:
   927                           	opt stack 0
   928  000020                     GetKeyState@theKeyId:
   929                           	opt stack 0
   930  000020                     GetKeyTimer@theKeyId:
   931                           	opt stack 0
   932  000020                     GetKeyInputTimer@theKeyId:
   933                           	opt stack 0
   934  000020                     GetSequenceState@theKeyId:
   935                           	opt stack 0
   936  000020                     GetSequence@theKeyId:
   937                           	opt stack 0
   938  000020                     ECANSetOperationMode@mode:
   939                           	opt stack 0
   940  000020                     OpenTimer0@config:
   941                           	opt stack 0
   942  000020                     OpenUSART@config:
   943                           	opt stack 0
   944  000020                     ReadUSART@data:
   945                           	opt stack 0
   946  000020                     WriteUSART@data:
   947                           	opt stack 0
   948  000020                     CalculateFutureTime@theTimer:
   949                           	opt stack 0
   950  000020                     MaturedTimer@theTimer:
   951                           	opt stack 0
   952  000020                     __CANIDToRegs@ptr:
   953                           	opt stack 0
   954  000020                     __RegsToCANID@ptr:
   955                           	opt stack 0
   956  000020                     WriteTimer0@timer0:
   957                           	opt stack 0
   958  000020                     ___lwdiv@dividend:
   959                           	opt stack 0
   960  000020                     InitKeys@KeyTimer:
   961                           	opt stack 0
   962                           
   963                           ; 5 bytes @ 0x1F
   964  000020                     	ds	1
   965  000021                     ?_putsUSART:
   966                           	opt stack 0
   967  000021                     ??_ECANInitialize:
   968  000021                     ??_ButtonBeingPressed:
   969  000021                     GetSerialChar@ReceivedChar:
   970                           	opt stack 0
   971  000021                     GetSequence@ReturnedSequence:
   972                           	opt stack 0
   973  000021                     OpenUSART@spbrg:
   974                           	opt stack 0
   975  000021                     putsUSART@data:
   976                           	opt stack 0
   977                           
   978                           ; 2 bytes @ 0x20
   979  000021                     	ds	1
   980  000022                     ??_MaturedTimer:
   981  000022                     CalculateFutureTime@theMinutes:
   982                           	opt stack 0
   983  000022                     ButtonBeingPressed@BeingPressed:
   984                           	opt stack 0
   985  000022                     __RegsToCANID@val:
   986                           	opt stack 0
   987  000022                     WriteTimer0@timer:
   988                           	opt stack 0
   989  000022                     ___lwdiv@divisor:
   990                           	opt stack 0
   991  000022                     __CANIDToRegs@val:
   992                           	opt stack 0
   993                           
   994                           ; 4 bytes @ 0x21
   995  000022                     	ds	1
   996  000023                     ??_ConfigureHardware:
   997  000023                     ??_putsUSART:
   998  000023                     CalculateFutureTime@theSeconds:
   999                           	opt stack 0
  1000  000023                     MaturedTimer@ToReturn:
  1001                           	opt stack 0
  1002                           
  1003                           ; 1 bytes @ 0x22
  1004  000023                     	ds	1
  1005  000024                     ??___lwdiv:
  1006  000024                     CalculateFutureTime@theHalfSeconds:
  1007                           	opt stack 0
  1008  000024                     __RegsToCANID@type:
  1009                           	opt stack 0
  1010                           
  1011                           ; 1 bytes @ 0x23
  1012  000024                     	ds	1
  1013  000025                     ??_CalculateFutureTime:
  1014  000025                     ??__RegsToCANID:
  1015  000025                     ?_CustomerWating:
  1016                           	opt stack 0
  1017  000025                     ?_CustomerBeingServed:
  1018                           	opt stack 0
  1019  000025                     ___lwdiv@counter:
  1020                           	opt stack 0
  1021                           
  1022                           ; 1 bytes @ 0x24
  1023  000025                     	ds	1
  1024  000026                     ?_SetKeyState:
  1025                           	opt stack 0
  1026  000026                     SetKeyState@theKeyId:
  1027                           	opt stack 0
  1028  000026                     __CANIDToRegs@type:
  1029                           	opt stack 0
  1030  000026                     ___lwdiv@quotient:
  1031                           	opt stack 0
  1032                           
  1033                           ; 2 bytes @ 0x25
  1034  000026                     	ds	1
  1035  000027                     ??__CANIDToRegs:
  1036  000027                     SetKeyState@theState:
  1037                           	opt stack 0
  1038  000027                     __RegsToCANID@Value:
  1039                           	opt stack 0
  1040                           
  1041                           ; 2 bytes @ 0x26
  1042  000027                     	ds	1
  1043  000028                     ?___lwmod:
  1044                           	opt stack 0
  1045  000028                     SetKeyState@OldHeadOfQueue:
  1046                           	opt stack 0
  1047  000028                     ___lwmod@dividend:
  1048                           	opt stack 0
  1049                           
  1050                           ; 2 bytes @ 0x27
  1051  000028                     	ds	1
  1052  000029                     SetKeyState@LoopKeyId:
  1053                           	opt stack 0
  1054  000029                     __CANIDToRegs@Value:
  1055                           	opt stack 0
  1056                           
  1057                           ; 2 bytes @ 0x28
  1058  000029                     	ds	1
  1059  00002A                     ??_UartCommsTask:
  1060  00002A                     CalculateFutureTime@CarryOver:
  1061                           	opt stack 0
  1062  00002A                     ___lwmod@divisor:
  1063                           	opt stack 0
  1064                           
  1065                           ; 2 bytes @ 0x29
  1066  00002A                     	ds	1
  1067  00002B                     ??_ECANSendMessage:
  1068  00002B                     ?_MonitorButton:
  1069                           	opt stack 0
  1070  00002B                     ?_RedGreenFlash:
  1071                           	opt stack 0
  1072  00002B                     ?_DimmedColourA:
  1073                           	opt stack 0
  1074  00002B                     ?_RapidFlashColourB:
  1075                           	opt stack 0
  1076  00002B                     ?_ColourMix:
  1077                           	opt stack 0
  1078  00002B                     UartCommsTask@HeadOfQueue:
  1079                           	opt stack 0
  1080  00002B                     MonitorButton@theId:
  1081                           	opt stack 0
  1082  00002B                     RedGreenFlash@theState:
  1083                           	opt stack 0
  1084  00002B                     DimmedColourA@theState:
  1085                           	opt stack 0
  1086  00002B                     RapidFlashColourB@theState:
  1087                           	opt stack 0
  1088  00002B                     ColourMix@theState:
  1089                           	opt stack 0
  1090                           
  1091                           ; 2 bytes @ 0x2A
  1092  00002B                     	ds	1
  1093  00002C                     ??_MonitorButton:
  1094  00002C                     ??___lwmod:
  1095                           
  1096                           ; 0 bytes @ 0x2B
  1097  00002C                     	ds	1
  1098  00002D                     ___lwmod@counter:
  1099                           	opt stack 0
  1100  00002D                     RedGreenFlash@theTimer:
  1101                           	opt stack 0
  1102  00002D                     DimmedColourA@theTimer:
  1103                           	opt stack 0
  1104  00002D                     RapidFlashColourB@theTimer:
  1105                           	opt stack 0
  1106  00002D                     ColourMix@theTimer:
  1107                           	opt stack 0
  1108                           
  1109                           ; 2 bytes @ 0x2C
  1110  00002D                     	ds	1
  1111  00002E                     ??_sprintf:
  1112                           
  1113                           ; 0 bytes @ 0x2D
  1114  00002E                     	ds	1
  1115  00002F                     ??_RedGreenFlash:
  1116  00002F                     ??_DimmedColourA:
  1117  00002F                     ??_RapidFlashColourB:
  1118  00002F                     ??_ColourMix:
  1119  00002F                     MonitorButton@KeyTimer:
  1120                           	opt stack 0
  1121                           
  1122                           ; 2 bytes @ 0x2E
  1123  00002F                     	ds	1
  1124  000030                     ??_ECANReceiveMessage:
  1125                           
  1126                           ; 0 bytes @ 0x2F
  1127  000030                     	ds	1
  1128  000031                     ??_InputTask:
  1129                           
  1130                           ; 0 bytes @ 0x30
  1131  000031                     	ds	1
  1132  000032                     tblptru	equ	0xFF8
  1133                           tblptrh	equ	0xFF7
  1134                           tblptrl	equ	0xFF6
  1135                           tablat	equ	0xFF5
  1136                           postinc0	equ	0xFEE
  1137                           wreg	equ	0xFE8
  1138                           postdec1	equ	0xFE5
  1139                           fsr1l	equ	0xFE1
  1140                           
  1141                           ; 0 bytes @ 0x31
  1142 ;;
  1143 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1144 ;;
  1145 ;; *************** function _main *****************
  1146 ;; Defined at:
  1147 ;;		line 17 in file "source/Main.c"
  1148 ;; Parameters:    Size  Location     Type
  1149 ;;		None
  1150 ;; Auto vars:     Size  Location     Type
  1151 ;;		None
  1152 ;; Return value:  Size  Location     Type
  1153 ;;		None               void
  1154 ;; Registers used:
  1155 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1156 ;; Tracked objects:
  1157 ;;		On entry : 0/0
  1158 ;;		On exit  : 0/0
  1159 ;;		Unchanged: 0/0
  1160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1161 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1162 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1163 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1164 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1165 ;;Total ram usage:        0 bytes
  1166 ;; Hardware stack levels required when called:    9
  1167 ;; This function calls:
  1168 ;;		_TaskManager
  1169 ;;		_ConfigureHardware
  1170 ;; This function is called by:
  1171 ;;		Startup code after reset
  1172 ;; This function uses a non-reentrant model
  1173 ;;
  1174                           
  1175                           	psect	text0
  1176  002F42                     __ptext0:
  1177                           	opt stack 0
  1178  002F42                     _main:
  1179                           	opt stack 22
  1180                           
  1181                           ;Main.c: 18: ConfigureHardware();
  1182                           
  1183                           ; BSR set to: 0
  1184                           ;incstack = 0
  1185                           ;incstack = 0
  1186  002F42  EC05  F016         	call	_ConfigureHardware	;wreg free
  1187  002F46                     l32:
  1188                           
  1189                           ;Main.c: 21: {
  1190                           ;Main.c: 22: TaskManager();
  1191  002F46  ECAE  F016         	call	_TaskManager	;wreg free
  1192  002F4A  D7FD               	goto	l32
  1193  002F4C                     __end_of_main:
  1194                           	opt stack 0
  1195                           tblptru	equ	0xFF8
  1196                           tblptrh	equ	0xFF7
  1197                           tblptrl	equ	0xFF6
  1198                           tablat	equ	0xFF5
  1199                           postinc0	equ	0xFEE
  1200                           wreg	equ	0xFE8
  1201                           postdec1	equ	0xFE5
  1202                           fsr1l	equ	0xFE1
  1203                           
  1204 ;; *************** function _ConfigureHardware *****************
  1205 ;; Defined at:
  1206 ;;		line 35 in file "source/SystemSetup.c"
  1207 ;; Parameters:    Size  Location     Type
  1208 ;;		None
  1209 ;; Auto vars:     Size  Location     Type
  1210 ;;		None
  1211 ;; Return value:  Size  Location     Type
  1212 ;;		None               void
  1213 ;; Registers used:
  1214 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1215 ;; Tracked objects:
  1216 ;;		On entry : 0/0
  1217 ;;		On exit  : 0/0
  1218 ;;		Unchanged: 0/0
  1219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1220 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1221 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1222 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1223 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1224 ;;Total ram usage:        1 bytes
  1225 ;; Hardware stack levels used:    1
  1226 ;; Hardware stack levels required when called:    3
  1227 ;; This function calls:
  1228 ;;		_OpenTimer0
  1229 ;;		_OpenUSART
  1230 ;; This function is called by:
  1231 ;;		_main
  1232 ;; This function uses a non-reentrant model
  1233 ;;
  1234                           
  1235                           	psect	text1
  1236  002C0A                     __ptext1:
  1237                           	opt stack 0
  1238  002C0A                     _ConfigureHardware:
  1239                           	opt stack 27
  1240                           
  1241                           ;SystemSetup.c: 38: OSCCON = 0b01111110;
  1242                           
  1243                           ;incstack = 0
  1244                           ;incstack = 0
  1245  002C0A  0E7E               	movlw	126
  1246  002C0C  6ED3               	movwf	4051,c	;volatile
  1247                           
  1248                           ;SystemSetup.c: 42: ADCON1 = 0b00001111;
  1249  002C0E  0E0F               	movlw	15
  1250  002C10  6EC1               	movwf	4033,c	;volatile
  1251                           
  1252                           ;SystemSetup.c: 43: TRISA = 0b10001001;
  1253  002C12  0E89               	movlw	137
  1254  002C14  6E92               	movwf	3986,c	;volatile
  1255                           
  1256                           ;SystemSetup.c: 44: TRISB = 0b00001000;
  1257  002C16  0E08               	movlw	8
  1258  002C18  6E93               	movwf	3987,c	;volatile
  1259                           
  1260                           ;SystemSetup.c: 45: TRISC = 0b00000010;
  1261  002C1A  0E02               	movlw	2
  1262  002C1C  6E94               	movwf	3988,c	;volatile
  1263                           
  1264                           ;SystemSetup.c: 47: PORTA = 0;
  1265  002C1E  0E00               	movlw	0
  1266  002C20  6E80               	movwf	3968,c	;volatile
  1267                           
  1268                           ;SystemSetup.c: 48: PORTB = 0;
  1269  002C22  0E00               	movlw	0
  1270  002C24  6E81               	movwf	3969,c	;volatile
  1271                           
  1272                           ;SystemSetup.c: 49: PORTC = 0;
  1273  002C26  0E00               	movlw	0
  1274  002C28  6E82               	movwf	3970,c	;volatile
  1275                           
  1276                           ;SystemSetup.c: 55: (INTCONbits.GIE = 1);
  1277  002C2A  8EF2               	bsf	intcon,7,c	;volatile
  1278                           
  1279                           ;SystemSetup.c: 57: OpenTimer0( 0b11111111 &
  1280                           ;SystemSetup.c: 58: 0b11111111 &
  1281                           ;SystemSetup.c: 59: 0b11011111 &
  1282                           ;SystemSetup.c: 60: 0b11110101 );
  1283  002C2C  6E23               	movwf	??_ConfigureHardware& (0+255),c
  1284  002C2E  0ED5               	movlw	213
  1285  002C30  6E20               	movwf	?_OpenTimer0,c
  1286  002C32  5023               	movf	??_ConfigureHardware& (0+255),w,c
  1287  002C34  EC03  F017         	call	_OpenTimer0	;wreg free
  1288                           
  1289                           ;SystemSetup.c: 62: INTCONbits.TMR0IE = 0;
  1290  002C38  9AF2               	bcf	intcon,5,c	;volatile
  1291                           
  1292                           ;SystemSetup.c: 66: OpenUSART( 0b01111111 &
  1293                           ;SystemSetup.c: 67: 0b10111111 &
  1294                           ;SystemSetup.c: 68: 0b11111110 &
  1295                           ;SystemSetup.c: 69: 0b11111101 &
  1296                           ;SystemSetup.c: 70: 0b11111111 &
  1297                           ;SystemSetup.c: 71: 0b11101111,
  1298                           ;SystemSetup.c: 72: 12 );
  1299  002C3A  6E23               	movwf	??_ConfigureHardware& (0+255),c
  1300  002C3C  0E2C               	movlw	44
  1301  002C3E  6E20               	movwf	?_OpenUSART,c
  1302  002C40  5023               	movf	??_ConfigureHardware& (0+255),w,c
  1303  002C42  0E00               	movlw	0
  1304  002C44  6E22               	movwf	?_OpenUSART+2,c
  1305  002C46  0E0C               	movlw	12
  1306  002C48  6E21               	movwf	?_OpenUSART+1,c
  1307  002C4A  EC2D  F015         	call	_OpenUSART	;wreg free
  1308  002C4E  0012               	return	
  1309  002C50                     __end_of_ConfigureHardware:
  1310                           	opt stack 0
  1311                           tblptru	equ	0xFF8
  1312                           tblptrh	equ	0xFF7
  1313                           tblptrl	equ	0xFF6
  1314                           tablat	equ	0xFF5
  1315                           intcon	equ	0xFF2
  1316                           postinc0	equ	0xFEE
  1317                           wreg	equ	0xFE8
  1318                           postdec1	equ	0xFE5
  1319                           fsr1l	equ	0xFE1
  1320                           
  1321 ;; *************** function _OpenUSART *****************
  1322 ;; Defined at:
  1323 ;;		line 74 in file "C:\Program Files\Microchip\xc8\v1.20\sources\pic18\plib\USART\uopen.c"
  1324 ;; Parameters:    Size  Location     Type
  1325 ;;  config          1   31[COMRAM] unsigned char 
  1326 ;;  spbrg           2   32[COMRAM] unsigned int 
  1327 ;; Auto vars:     Size  Location     Type
  1328 ;;		None
  1329 ;; Return value:  Size  Location     Type
  1330 ;;		None               void
  1331 ;; Registers used:
  1332 ;;		wreg, status,2
  1333 ;; Tracked objects:
  1334 ;;		On entry : 0/0
  1335 ;;		On exit  : 0/0
  1336 ;;		Unchanged: 0/0
  1337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1338 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1339 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1340 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1341 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1342 ;;Total ram usage:        3 bytes
  1343 ;; Hardware stack levels used:    1
  1344 ;; Hardware stack levels required when called:    2
  1345 ;; This function calls:
  1346 ;;		Nothing
  1347 ;; This function is called by:
  1348 ;;		_ConfigureHardware
  1349 ;; This function uses a non-reentrant model
  1350 ;;
  1351                           
  1352                           	psect	text2
  1353  002A5A                     __ptext2:
  1354                           	opt stack 0
  1355  002A5A                     _OpenUSART:
  1356                           	opt stack 27
  1357                           
  1358                           ;incstack = 0
  1359                           ;incstack = 0
  1360  002A5A  0E00               	movlw	0
  1361  002A5C  6EAC               	movwf	4012,c	;volatile
  1362  002A5E  0E00               	movlw	0
  1363  002A60  6EAB               	movwf	4011,c	;volatile
  1364  002A62  B020               	btfsc	OpenUSART@config,0,c
  1365  002A64  88AC               	bsf	4012,4,c	;volatile
  1366  002A66  A220               	btfss	OpenUSART@config,1,c
  1367  002A68  D002               	goto	l703
  1368  002A6A  8CAC               	bsf	4012,6,c	;volatile
  1369  002A6C  8CAB               	bsf	4011,6,c	;volatile
  1370  002A6E                     l703:
  1371  002A6E  B420               	btfsc	OpenUSART@config,2,c
  1372  002A70  8EAC               	bsf	4012,7,c	;volatile
  1373  002A72  A620               	btfss	OpenUSART@config,3,c
  1374  002A74  D002               	goto	l705
  1375  002A76  88AB               	bsf	4011,4,c	;volatile
  1376  002A78  D001               	goto	l706
  1377  002A7A                     l705:
  1378  002A7A  8AAB               	bsf	4011,5,c	;volatile
  1379  002A7C                     l706:
  1380  002A7C  B820               	btfsc	OpenUSART@config,4,c
  1381  002A7E  84AC               	bsf	4012,2,c	;volatile
  1382  002A80  989E               	bcf	3998,4,c	;volatile
  1383  002A82  BA20               	btfsc	OpenUSART@config,5,c
  1384  002A84  86AB               	bsf	4011,3,c	;volatile
  1385  002A86  AC20               	btfss	OpenUSART@config,6,c
  1386  002A88  D002               	goto	l709
  1387  002A8A  8A9D               	bsf	3997,5,c	;volatile
  1388  002A8C  D001               	goto	l710
  1389  002A8E                     l709:
  1390  002A8E  9A9D               	bcf	3997,5,c	;volatile
  1391  002A90                     l710:
  1392  002A90  9A9E               	bcf	3998,5,c	;volatile
  1393  002A92  AE20               	btfss	OpenUSART@config,7,c
  1394  002A94  D002               	goto	l711
  1395  002A96  889D               	bsf	3997,4,c	;volatile
  1396  002A98  D001               	goto	l712
  1397  002A9A                     l711:
  1398  002A9A  989D               	bcf	3997,4,c	;volatile
  1399  002A9C                     l712:
  1400  002A9C  C021  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  1401  002AA0  5022               	movf	OpenUSART@spbrg+1,w,c
  1402  002AA2  6EB0               	movwf	4016,c	;volatile
  1403  002AA4  8AAC               	bsf	4012,5,c	;volatile
  1404  002AA6  8EAB               	bsf	4011,7,c	;volatile
  1405  002AA8  9C94               	bcf	3988,6,c	;volatile
  1406  002AAA  8E94               	bsf	3988,7,c	;volatile
  1407  002AAC  B8AC               	btfsc	4012,4,c	;volatile
  1408  002AAE  BEAC               	btfsc	4012,7,c	;volatile
  1409  002AB0  D001               	goto	l714
  1410  002AB2  8C94               	bsf	3988,6,c	;volatile
  1411  002AB4                     l714:
  1412  002AB4  0012               	return	
  1413  002AB6                     __end_of_OpenUSART:
  1414                           	opt stack 0
  1415                           tblptru	equ	0xFF8
  1416                           tblptrh	equ	0xFF7
  1417                           tblptrl	equ	0xFF6
  1418                           tablat	equ	0xFF5
  1419                           intcon	equ	0xFF2
  1420                           postinc0	equ	0xFEE
  1421                           wreg	equ	0xFE8
  1422                           postdec1	equ	0xFE5
  1423                           fsr1l	equ	0xFE1
  1424                           
  1425 ;; *************** function _OpenTimer0 *****************
  1426 ;; Defined at:
  1427 ;;		line 19 in file "C:\Program Files\Microchip\xc8\v1.20\sources\pic18\plib\Timers\t0open.c"
  1428 ;; Parameters:    Size  Location     Type
  1429 ;;  config          1   31[COMRAM] unsigned char 
  1430 ;; Auto vars:     Size  Location     Type
  1431 ;;		None
  1432 ;; Return value:  Size  Location     Type
  1433 ;;		None               void
  1434 ;; Registers used:
  1435 ;;		wreg, status,2, status,0
  1436 ;; Tracked objects:
  1437 ;;		On entry : 0/0
  1438 ;;		On exit  : 0/0
  1439 ;;		Unchanged: 0/0
  1440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1441 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1442 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1443 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1444 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1445 ;;Total ram usage:        1 bytes
  1446 ;; Hardware stack levels used:    1
  1447 ;; Hardware stack levels required when called:    2
  1448 ;; This function calls:
  1449 ;;		Nothing
  1450 ;; This function is called by:
  1451 ;;		_ConfigureHardware
  1452 ;; This function uses a non-reentrant model
  1453 ;;
  1454                           
  1455                           	psect	text3
  1456  002E06                     __ptext3:
  1457                           	opt stack 0
  1458  002E06                     _OpenTimer0:
  1459                           	opt stack 27
  1460                           
  1461                           ;incstack = 0
  1462                           ;incstack = 0
  1463  002E06  5020               	movf	OpenTimer0@config,w,c
  1464  002E08  0B7F               	andlw	127
  1465  002E0A  6ED5               	movwf	4053,c	;volatile
  1466  002E0C  0E00               	movlw	0
  1467  002E0E  6ED7               	movwf	4055,c	;volatile
  1468  002E10  0E00               	movlw	0
  1469  002E12  6ED6               	movwf	4054,c	;volatile
  1470  002E14  94F2               	bcf	intcon,2,c	;volatile
  1471  002E16  AE20               	btfss	OpenTimer0@config,7,c
  1472  002E18  D002               	goto	l672
  1473  002E1A  8AF2               	bsf	intcon,5,c	;volatile
  1474  002E1C  D001               	goto	l673
  1475  002E1E                     l672:
  1476  002E1E  9AF2               	bcf	intcon,5,c	;volatile
  1477  002E20                     l673:
  1478  002E20  8ED5               	bsf	4053,7,c	;volatile
  1479  002E22  0012               	return	
  1480  002E24                     __end_of_OpenTimer0:
  1481                           	opt stack 0
  1482                           tblptru	equ	0xFF8
  1483                           tblptrh	equ	0xFF7
  1484                           tblptrl	equ	0xFF6
  1485                           tablat	equ	0xFF5
  1486                           intcon	equ	0xFF2
  1487                           postinc0	equ	0xFEE
  1488                           wreg	equ	0xFE8
  1489                           postdec1	equ	0xFE5
  1490                           fsr1l	equ	0xFE1
  1491                           
  1492 ;; *************** function _TaskManager *****************
  1493 ;; Defined at:
  1494 ;;		line 17 in file "source/TaskManager.c"
  1495 ;; Parameters:    Size  Location     Type
  1496 ;;		None
  1497 ;; Auto vars:     Size  Location     Type
  1498 ;;		None
  1499 ;; Return value:  Size  Location     Type
  1500 ;;		None               void
  1501 ;; Registers used:
  1502 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1503 ;; Tracked objects:
  1504 ;;		On entry : 0/0
  1505 ;;		On exit  : 0/0
  1506 ;;		Unchanged: 0/0
  1507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1508 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1509 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1510 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1511 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1512 ;;Total ram usage:        1 bytes
  1513 ;; Hardware stack levels used:    1
  1514 ;; Hardware stack levels required when called:    8
  1515 ;; This function calls:
  1516 ;;		_InitTime
  1517 ;;		_InitKeys
  1518 ;;		_Increment_Timer
  1519 ;;		_DataCommsTask
  1520 ;;		_InputTask
  1521 ;;		_OutputTask
  1522 ;; This function is called by:
  1523 ;;		_main
  1524 ;; This function uses a non-reentrant model
  1525 ;;
  1526                           
  1527                           	psect	text4
  1528  002D5C                     __ptext4:
  1529                           	opt stack 0
  1530  002D5C                     _TaskManager:
  1531                           	opt stack 22
  1532                           
  1533                           ;TaskManager.c: 18: static uint8_t Operation = 1;
  1534                           ;TaskManager.c: 20: switch( Operation )
  1535                           
  1536                           ;incstack = 0
  1537                           ;incstack = 0
  1538  002D5C  D016               	goto	l3548
  1539  002D5E                     l3538:
  1540                           
  1541                           ;TaskManager.c: 23: InitTime();
  1542  002D5E  EC69  F017         	call	_InitTime	;wreg free
  1543                           
  1544                           ;TaskManager.c: 24: InitKeys();
  1545  002D62  EC64  F00B         	call	_InitKeys	;wreg free
  1546                           
  1547                           ;TaskManager.c: 25: Operation = 2;
  1548  002D66  0100               	movlb	0	; () banked
  1549  002D68  6FFC               	movwf	??_TaskManager& (0+255),b
  1550  002D6A  0E02               	movlw	2
  1551  002D6C  6E40               	movwf	TaskManager@Operation,c
  1552  002D6E  0100               	movlb	0	; () banked
  1553  002D70  51FC               	movf	??_TaskManager& (0+255),w,b
  1554                           
  1555                           ;TaskManager.c: 26: break;
  1556  002D72  D012               	goto	l25
  1557  002D74                     l3544:
  1558                           
  1559                           ;TaskManager.c: 29: Increment_Timer();
  1560  002D74  EC83  F014         	call	_Increment_Timer	;wreg free
  1561                           
  1562                           ;TaskManager.c: 30: DataCommsTask();
  1563  002D78  ECA6  F017         	call	_DataCommsTask	;wreg free
  1564                           
  1565                           ;TaskManager.c: 31: InputTask();
  1566  002D7C  ECE9  F016         	call	_InputTask	;wreg free
  1567                           
  1568                           ;TaskManager.c: 32: Increment_Timer();
  1569  002D80  EC83  F014         	call	_Increment_Timer	;wreg free
  1570                           
  1571                           ;TaskManager.c: 33: OutputTask();
  1572  002D84  ECCD  F016         	call	_OutputTask	;wreg free
  1573                           
  1574                           ;TaskManager.c: 34: break;
  1575  002D88  D007               	goto	l25
  1576  002D8A                     l3548:
  1577  002D8A  5040               	movf	TaskManager@Operation,w,c
  1578                           
  1579                           ; Switch size 1, requested type "space"
  1580                           ; Number of cases is 2, Range of values is 1 to 2
  1581                           ; switch strategies available:
  1582                           ; Name         Instructions Cycles
  1583                           ; simple_byte            7     4 (average)
  1584                           ;	Chosen strategy is simple_byte
  1585  002D8C  0A01               	xorlw	1	; case 1
  1586  002D8E  B4D8               	btfsc	status,2,c
  1587  002D90  D7E6               	goto	l3538
  1588  002D92  0A03               	xorlw	3	; case 2
  1589  002D94  B4D8               	btfsc	status,2,c
  1590  002D96  D7EE               	goto	l3544
  1591  002D98                     l25:
  1592  002D98  0012               	return	
  1593  002D9A                     __end_of_TaskManager:
  1594                           	opt stack 0
  1595                           tblptru	equ	0xFF8
  1596                           tblptrh	equ	0xFF7
  1597                           tblptrl	equ	0xFF6
  1598                           tablat	equ	0xFF5
  1599                           intcon	equ	0xFF2
  1600                           postinc0	equ	0xFEE
  1601                           wreg	equ	0xFE8
  1602                           postdec1	equ	0xFE5
  1603                           fsr1l	equ	0xFE1
  1604                           status	equ	0xFD8
  1605                           
  1606 ;; *************** function _OutputTask *****************
  1607 ;; Defined at:
  1608 ;;		line 16 in file "source/OutputTask.c"
  1609 ;; Parameters:    Size  Location     Type
  1610 ;;		None
  1611 ;; Auto vars:     Size  Location     Type
  1612 ;;  i               1   17[BANK0 ] unsigned char 
  1613 ;; Return value:  Size  Location     Type
  1614 ;;		None               void
  1615 ;; Registers used:
  1616 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1617 ;; Tracked objects:
  1618 ;;		On entry : 0/0
  1619 ;;		On exit  : 0/0
  1620 ;;		Unchanged: 0/0
  1621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1622 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1623 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1624 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1625 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1626 ;;Total ram usage:        2 bytes
  1627 ;; Hardware stack levels used:    1
  1628 ;; Hardware stack levels required when called:    6
  1629 ;; This function calls:
  1630 ;;		_IlluminateButton
  1631 ;; This function is called by:
  1632 ;;		_TaskManager
  1633 ;; This function uses a non-reentrant model
  1634 ;;
  1635                           
  1636                           	psect	text5
  1637  002D9A                     __ptext5:
  1638                           	opt stack 0
  1639  002D9A                     _OutputTask:
  1640                           	opt stack 23
  1641                           
  1642                           ;OutputTask.c: 17: for( uint8_t i = 0; i < KeyCount; i++ )
  1643                           
  1644                           ;incstack = 0
  1645                           ;incstack = 0
  1646  002D9A  0100               	movlb	0	; () banked
  1647  002D9C  6FD7               	movwf	??_OutputTask& (0+255),b
  1648  002D9E  0E00               	movlw	0
  1649  002DA0  0100               	movlb	0	; () banked
  1650  002DA2  0100               	movlb	0	; () banked
  1651  002DA4  6FD8               	movwf	OutputTask@i& (0+255),b
  1652  002DA6  0100               	movlb	0	; () banked
  1653  002DA8  51D7               	movf	??_OutputTask& (0+255),w,b
  1654  002DAA                     
  1655                           ; BSR set to: 0
  1656  002DAA  0E0B               	movlw	low _KeyCount
  1657  002DAC  6EF6               	movwf	tblptrl,c
  1658  002DAE  0E0D               	movlw	high _KeyCount
  1659  002DB0  6EF7               	movwf	tblptrh,c
  1660  002DB2  0008               	tblrd		*
  1661  002DB4  50F5               	movf	tablat,w,c
  1662  002DB6  0100               	movlb	0	; () banked
  1663  002DB8  0100               	movlb	0	; () banked
  1664  002DBA  5DD8               	subwf	OutputTask@i& (0+255),w,b
  1665  002DBC  B0D8               	btfsc	status,0,c
  1666  002DBE  D008               	goto	l351
  1667                           
  1668                           ; BSR set to: 0
  1669                           ;OutputTask.c: 18: {
  1670                           ;OutputTask.c: 19: IlluminateButton( i );
  1671                           
  1672                           ; BSR set to: 0
  1673                           
  1674                           ; BSR set to: 0
  1675  002DC0  C0D8  F0D1         	movff	OutputTask@i,?_IlluminateButton
  1676  002DC4  EC37  F014         	call	_IlluminateButton	;wreg free
  1677  002DC8  0100               	movlb	0	; () banked
  1678  002DCA  0100               	movlb	0	; () banked
  1679  002DCC  2BD8               	incf	OutputTask@i& (0+255),f,b
  1680  002DCE  D7ED               	goto	L1
  1681  002DD0                     l351:
  1682                           
  1683                           ; BSR set to: 0
  1684  002DD0  0012               	return	
  1685  002DD2                     __end_of_OutputTask:
  1686                           	opt stack 0
  1687                           tblptru	equ	0xFF8
  1688                           tblptrh	equ	0xFF7
  1689                           tblptrl	equ	0xFF6
  1690                           tablat	equ	0xFF5
  1691                           intcon	equ	0xFF2
  1692                           postinc0	equ	0xFEE
  1693                           wreg	equ	0xFE8
  1694                           postdec1	equ	0xFE5
  1695                           fsr1l	equ	0xFE1
  1696                           status	equ	0xFD8
  1697                           
  1698 ;; *************** function _IlluminateButton *****************
  1699 ;; Defined at:
  1700 ;;		line 24 in file "source/OutputTask.c"
  1701 ;; Parameters:    Size  Location     Type
  1702 ;;  theId           1   10[BANK0 ] unsigned char 
  1703 ;; Auto vars:     Size  Location     Type
  1704 ;;  Sequence        1   15[BANK0 ] volatile enum E196
  1705 ;;  SequenceStat    2   13[BANK0 ] PTR volatile unsigned ch
  1706 ;;		 -> m_Keys(85), 
  1707 ;;  KeyTimer        2   11[BANK0 ] PTR volatile struct ATim
  1708 ;;		 -> m_Keys(85), 
  1709 ;; Return value:  Size  Location     Type
  1710 ;;		None               void
  1711 ;; Registers used:
  1712 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1713 ;; Tracked objects:
  1714 ;;		On entry : 0/0
  1715 ;;		On exit  : 0/0
  1716 ;;		Unchanged: 0/0
  1717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1718 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1719 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1720 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1721 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1722 ;;Total ram usage:        6 bytes
  1723 ;; Hardware stack levels used:    1
  1724 ;; Hardware stack levels required when called:    5
  1725 ;; This function calls:
  1726 ;;		_MaturedTimer
  1727 ;;		_GetKeyTimer
  1728 ;;		_GetSequenceState
  1729 ;;		_GetSequence
  1730 ;;		_ColourNone
  1731 ;;		_ColourA
  1732 ;;		_ColourB
  1733 ;;		_GetColour
  1734 ;; This function is called by:
  1735 ;;		_OutputTask
  1736 ;; This function uses a non-reentrant model
  1737 ;;
  1738                           
  1739                           	psect	text6
  1740  00286E                     __ptext6:
  1741                           	opt stack 0
  1742  00286E                     _IlluminateButton:
  1743                           	opt stack 23
  1744                           
  1745                           ;OutputTask.c: 25: volatile t_ATime* KeyTimer = GetKeyTimer( theId );
  1746                           
  1747                           ; BSR set to: 0
  1748                           ;incstack = 0
  1749                           ;incstack = 0
  1750  00286E  C0D1  F020         	movff	IlluminateButton@theId,?_GetKeyTimer
  1751  002872  EC21  F017         	call	_GetKeyTimer	;wreg free
  1752  002876  C020  F0D2         	movff	?_GetKeyTimer,IlluminateButton@KeyTimer
  1753  00287A  C021  F0D3         	movff	?_GetKeyTimer+1,IlluminateButton@KeyTimer+1
  1754                           
  1755                           ;OutputTask.c: 26: volatile uint8_t* SequenceState = GetSequenceState( theId );
  1756  00287E  C0D1  F020         	movff	IlluminateButton@theId,?_GetSequenceState
  1757  002882  EC12  F017         	call	_GetSequenceState	;wreg free
  1758  002886  C020  F0D4         	movff	?_GetSequenceState,IlluminateButton@SequenceState
  1759  00288A  C021  F0D5         	movff	?_GetSequenceState+1,IlluminateButton@SequenceState+1
  1760                           
  1761                           ;OutputTask.c: 28: if ( ( MaturedTimer( KeyTimer ) ) || ( SequenceState == 0 ) )
  1762  00288E  C0D2  F020         	movff	IlluminateButton@KeyTimer,?_MaturedTimer
  1763  002892  C0D3  F021         	movff	IlluminateButton@KeyTimer+1,?_MaturedTimer+1
  1764  002896  EC61  F011         	call	_MaturedTimer	;wreg free
  1765  00289A  0900               	iorlw	0
  1766  00289C  A4D8               	btfss	status,2,c
  1767  00289E  D006               	goto	l4148
  1768  0028A0  0100               	movlb	0	; () banked
  1769  0028A2  0100               	movlb	0	; () banked
  1770  0028A4  51D5               	movf	(IlluminateButton@SequenceState+1)& (0+255),w,b
  1771  0028A6  11D4               	iorwf	IlluminateButton@SequenceState& (0+255),w,b
  1772  0028A8  A4D8               	btfss	status,2,c
  1773  0028AA  D02C               	goto	l362
  1774  0028AC                     l4148:
  1775                           
  1776                           ;OutputTask.c: 29: {
  1777                           ;OutputTask.c: 30: volatile t_Sequences Sequence = GetSequence( theId );
  1778  0028AC  C0D1  F020         	movff	IlluminateButton@theId,?_GetSequence
  1779  0028B0  ECC0  F014         	call	_GetSequence	;wreg free
  1780  0028B4  0100               	movlb	0	; () banked
  1781  0028B6  0100               	movlb	0	; () banked
  1782  0028B8  6FD6               	movwf	IlluminateButton@Sequence& (0+255),b	;volatile
  1783                           
  1784                           ;OutputTask.c: 32: switch ( GetColour( Sequence, SequenceState, KeyTimer ) )
  1785  0028BA  D00F               	goto	l4158
  1786  0028BC                     l4150:
  1787                           
  1788                           ;OutputTask.c: 35: ColourNone( theId );
  1789  0028BC  C0D1  F020         	movff	IlluminateButton@theId,?_ColourNone
  1790  0028C0  EC8D  F016         	call	_ColourNone	;wreg free
  1791                           
  1792                           ;OutputTask.c: 36: break;
  1793  0028C4  D01F               	goto	l362
  1794  0028C6                     l4152:
  1795                           
  1796                           ;OutputTask.c: 39: ColourA( theId );
  1797  0028C6  C0D1  F020         	movff	IlluminateButton@theId,?_ColourA
  1798  0028CA  EC6C  F016         	call	_ColourA	;wreg free
  1799                           
  1800                           ;OutputTask.c: 40: break;
  1801  0028CE  D01A               	goto	l362
  1802  0028D0                     l4154:
  1803                           
  1804                           ;OutputTask.c: 43: ColourB( theId );
  1805  0028D0  C0D1  F020         	movff	IlluminateButton@theId,?_ColourB
  1806  0028D4  EC4B  F016         	call	_ColourB	;wreg free
  1807                           
  1808                           ;OutputTask.c: 44: break;
  1809  0028D8  D015               	goto	l362
  1810  0028DA                     l4158:
  1811  0028DA  C0D6  F0C8         	movff	IlluminateButton@Sequence,?_GetColour	;volatile
  1812  0028DE  C0D4  F0C9         	movff	IlluminateButton@SequenceState,?_GetColour+1
  1813  0028E2  C0D5  F0CA         	movff	IlluminateButton@SequenceState+1,?_GetColour+2
  1814  0028E6  C0D2  F0CB         	movff	IlluminateButton@KeyTimer,?_GetColour+3
  1815  0028EA  C0D3  F0CC         	movff	IlluminateButton@KeyTimer+1,?_GetColour+4
  1816  0028EE  ECE0  F00E         	call	_GetColour	;wreg free
  1817                           
  1818                           ; Switch size 1, requested type "space"
  1819                           ; Number of cases is 3, Range of values is 1 to 3
  1820                           ; switch strategies available:
  1821                           ; Name         Instructions Cycles
  1822                           ; simple_byte           10     6 (average)
  1823                           ;	Chosen strategy is simple_byte
  1824  0028F2  0A01               	xorlw	1	; case 1
  1825  0028F4  B4D8               	btfsc	status,2,c
  1826  0028F6  D7E2               	goto	l4150
  1827  0028F8  0A03               	xorlw	3	; case 2
  1828  0028FA  B4D8               	btfsc	status,2,c
  1829  0028FC  D7E4               	goto	l4152
  1830  0028FE  0A01               	xorlw	1	; case 3
  1831  002900  B4D8               	btfsc	status,2,c
  1832  002902  D7E6               	goto	l4154
  1833  002904                     l362:
  1834  002904  0012               	return	
  1835  002906                     __end_of_IlluminateButton:
  1836                           	opt stack 0
  1837                           tblptru	equ	0xFF8
  1838                           tblptrh	equ	0xFF7
  1839                           tblptrl	equ	0xFF6
  1840                           tablat	equ	0xFF5
  1841                           intcon	equ	0xFF2
  1842                           postinc0	equ	0xFEE
  1843                           wreg	equ	0xFE8
  1844                           postdec1	equ	0xFE5
  1845                           fsr1l	equ	0xFE1
  1846                           status	equ	0xFD8
  1847                           
  1848 ;; *************** function _GetColour *****************
  1849 ;; Defined at:
  1850 ;;		line 12 in file "source/OutputSequences.c"
  1851 ;; Parameters:    Size  Location     Type
  1852 ;;  theSequences    1    1[BANK0 ] enum E180
  1853 ;;  theState        2    2[BANK0 ] PTR volatile unsigned ch
  1854 ;;		 -> m_Keys(85), 
  1855 ;;  theTimer        2    4[BANK0 ] PTR volatile struct ATim
  1856 ;;		 -> m_Keys(85), 
  1857 ;; Auto vars:     Size  Location     Type
  1858 ;;  ReturnColour    1    9[BANK0 ] enum E174
  1859 ;; Return value:  Size  Location     Type
  1860 ;;                  1    wreg      enum E190
  1861 ;; Registers used:
  1862 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1863 ;; Tracked objects:
  1864 ;;		On entry : 0/0
  1865 ;;		On exit  : 0/0
  1866 ;;		Unchanged: 0/0
  1867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1868 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1869 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1870 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1871 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1872 ;;Total ram usage:        9 bytes
  1873 ;; Hardware stack levels used:    1
  1874 ;; Hardware stack levels required when called:    4
  1875 ;; This function calls:
  1876 ;;		_CalculateFutureTime
  1877 ;;		_RedGreenFlash
  1878 ;;		_DimmedColourA
  1879 ;;		_RapidFlashColourB
  1880 ;;		_ColourMix
  1881 ;; This function is called by:
  1882 ;;		_IlluminateButton
  1883 ;; This function uses a non-reentrant model
  1884 ;;
  1885                           
  1886                           	psect	text7
  1887  001DC0                     __ptext7:
  1888                           	opt stack 0
  1889  001DC0                     _GetColour:
  1890                           	opt stack 23
  1891                           
  1892                           ;OutputSequences.c: 13: t_ButtonColour ReturnColour;
  1893                           ;OutputSequences.c: 15: switch ( theSequences )
  1894                           
  1895                           ;incstack = 0
  1896                           ;incstack = 0
  1897  001DC0  D092               	goto	l4228
  1898  001DC2                     l4206:
  1899                           
  1900                           ;OutputSequences.c: 18: ReturnColour = e_Off;
  1901  001DC2  0100               	movlb	0	; () banked
  1902  001DC4  6FCD               	movwf	??_GetColour& (0+255),b
  1903  001DC6  0E01               	movlw	1
  1904  001DC8  0100               	movlb	0	; () banked
  1905  001DCA  0100               	movlb	0	; () banked
  1906  001DCC  6FD0               	movwf	GetColour@ReturnColour& (0+255),b
  1907  001DCE  0100               	movlb	0	; () banked
  1908  001DD0  51CD               	movf	??_GetColour& (0+255),w,b
  1909                           
  1910                           ; BSR set to: 0
  1911                           ;OutputSequences.c: 19: CalculateFutureTime( theTimer, 0, 0, 0 );
  1912  001DD2  C0CB  F020         	movff	GetColour@theTimer,?_CalculateFutureTime
  1913  001DD6  C0CC  F021         	movff	GetColour@theTimer+1,?_CalculateFutureTime+1
  1914  001DDA  0100               	movlb	0	; () banked
  1915  001DDC  6FCD               	movwf	??_GetColour& (0+255),b
  1916  001DDE  0E00               	movlw	0
  1917  001DE0  6E22               	movwf	?_CalculateFutureTime+2,c
  1918  001DE2  0100               	movlb	0	; () banked
  1919  001DE4  51CD               	movf	??_GetColour& (0+255),w,b
  1920  001DE6  0100               	movlb	0	; () banked
  1921  001DE8  6FCE               	movwf	(??_GetColour+1)& (0+255),b
  1922  001DEA  0E00               	movlw	0
  1923  001DEC  6E23               	movwf	?_CalculateFutureTime+3,c
  1924  001DEE  0100               	movlb	0	; () banked
  1925  001DF0  51CE               	movf	(??_GetColour+1)& (0+255),w,b
  1926  001DF2  0100               	movlb	0	; () banked
  1927  001DF4  6FCF               	movwf	(??_GetColour+2)& (0+255),b
  1928  001DF6  0E00               	movlw	0
  1929  001DF8  6E24               	movwf	?_CalculateFutureTime+4,c
  1930  001DFA  0100               	movlb	0	; () banked
  1931  001DFC  51CF               	movf	(??_GetColour+2)& (0+255),w,b
  1932  001DFE  EC45  F00A         	call	_CalculateFutureTime	;wreg free
  1933                           
  1934                           ;OutputSequences.c: 20: break;
  1935  001E02  D089               	goto	l4230
  1936  001E04                     l4210:
  1937                           
  1938                           ;OutputSequences.c: 23: ReturnColour = e_ColourA;
  1939  001E04  0100               	movlb	0	; () banked
  1940  001E06  6FCD               	movwf	??_GetColour& (0+255),b
  1941  001E08  0E02               	movlw	2
  1942  001E0A  0100               	movlb	0	; () banked
  1943  001E0C  0100               	movlb	0	; () banked
  1944  001E0E  6FD0               	movwf	GetColour@ReturnColour& (0+255),b
  1945  001E10  0100               	movlb	0	; () banked
  1946  001E12  51CD               	movf	??_GetColour& (0+255),w,b
  1947                           
  1948                           ; BSR set to: 0
  1949                           ;OutputSequences.c: 24: CalculateFutureTime( theTimer, 0, 0, 0 );
  1950  001E14  C0CB  F020         	movff	GetColour@theTimer,?_CalculateFutureTime
  1951  001E18  C0CC  F021         	movff	GetColour@theTimer+1,?_CalculateFutureTime+1
  1952  001E1C  0100               	movlb	0	; () banked
  1953  001E1E  6FCD               	movwf	??_GetColour& (0+255),b
  1954  001E20  0E00               	movlw	0
  1955  001E22  6E22               	movwf	?_CalculateFutureTime+2,c
  1956  001E24  0100               	movlb	0	; () banked
  1957  001E26  51CD               	movf	??_GetColour& (0+255),w,b
  1958  001E28  0100               	movlb	0	; () banked
  1959  001E2A  6FCE               	movwf	(??_GetColour+1)& (0+255),b
  1960  001E2C  0E00               	movlw	0
  1961  001E2E  6E23               	movwf	?_CalculateFutureTime+3,c
  1962  001E30  0100               	movlb	0	; () banked
  1963  001E32  51CE               	movf	(??_GetColour+1)& (0+255),w,b
  1964  001E34  0100               	movlb	0	; () banked
  1965  001E36  6FCF               	movwf	(??_GetColour+2)& (0+255),b
  1966  001E38  0E00               	movlw	0
  1967  001E3A  6E24               	movwf	?_CalculateFutureTime+4,c
  1968  001E3C  0100               	movlb	0	; () banked
  1969  001E3E  51CF               	movf	(??_GetColour+2)& (0+255),w,b
  1970  001E40  EC45  F00A         	call	_CalculateFutureTime	;wreg free
  1971                           
  1972                           ;OutputSequences.c: 25: break;
  1973  001E44  D068               	goto	l4230
  1974  001E46                     l4214:
  1975                           
  1976                           ;OutputSequences.c: 28: ReturnColour = e_ColourB;
  1977  001E46  0100               	movlb	0	; () banked
  1978  001E48  6FCD               	movwf	??_GetColour& (0+255),b
  1979  001E4A  0E03               	movlw	3
  1980  001E4C  0100               	movlb	0	; () banked
  1981  001E4E  0100               	movlb	0	; () banked
  1982  001E50  6FD0               	movwf	GetColour@ReturnColour& (0+255),b
  1983  001E52  0100               	movlb	0	; () banked
  1984  001E54  51CD               	movf	??_GetColour& (0+255),w,b
  1985                           
  1986                           ; BSR set to: 0
  1987                           ;OutputSequences.c: 29: CalculateFutureTime( theTimer, 0, 0, 0 );
  1988  001E56  C0CB  F020         	movff	GetColour@theTimer,?_CalculateFutureTime
  1989  001E5A  C0CC  F021         	movff	GetColour@theTimer+1,?_CalculateFutureTime+1
  1990  001E5E  0100               	movlb	0	; () banked
  1991  001E60  6FCD               	movwf	??_GetColour& (0+255),b
  1992  001E62  0E00               	movlw	0
  1993  001E64  6E22               	movwf	?_CalculateFutureTime+2,c
  1994  001E66  0100               	movlb	0	; () banked
  1995  001E68  51CD               	movf	??_GetColour& (0+255),w,b
  1996  001E6A  0100               	movlb	0	; () banked
  1997  001E6C  6FCE               	movwf	(??_GetColour+1)& (0+255),b
  1998  001E6E  0E00               	movlw	0
  1999  001E70  6E23               	movwf	?_CalculateFutureTime+3,c
  2000  001E72  0100               	movlb	0	; () banked
  2001  001E74  51CE               	movf	(??_GetColour+1)& (0+255),w,b
  2002  001E76  0100               	movlb	0	; () banked
  2003  001E78  6FCF               	movwf	(??_GetColour+2)& (0+255),b
  2004  001E7A  0E00               	movlw	0
  2005  001E7C  6E24               	movwf	?_CalculateFutureTime+4,c
  2006  001E7E  0100               	movlb	0	; () banked
  2007  001E80  51CF               	movf	(??_GetColour+2)& (0+255),w,b
  2008  001E82  EC45  F00A         	call	_CalculateFutureTime	;wreg free
  2009                           
  2010                           ;OutputSequences.c: 30: break;
  2011  001E86  D047               	goto	l4230
  2012  001E88                     l4218:
  2013                           
  2014                           ;OutputSequences.c: 33: ReturnColour = RedGreenFlash( theState, theTimer );
  2015  001E88  C0C9  F02B         	movff	GetColour@theState,?_RedGreenFlash
  2016  001E8C  C0CA  F02C         	movff	GetColour@theState+1,?_RedGreenFlash+1
  2017  001E90  C0CB  F02D         	movff	GetColour@theTimer,?_RedGreenFlash+2
  2018  001E94  C0CC  F02E         	movff	GetColour@theTimer+1,?_RedGreenFlash+3
  2019  001E98  ECE1  F013         	call	_RedGreenFlash	;wreg free
  2020  001E9C  D020               	goto	L4
  2021  001E9E                     l4220:
  2022                           
  2023                           ; BSR set to: 0
  2024                           ;OutputSequences.c: 37: ReturnColour = DimmedColourA( theState, theTimer );
  2025  001E9E  C0C9  F02B         	movff	GetColour@theState,?_DimmedColourA
  2026  001EA2  C0CA  F02C         	movff	GetColour@theState+1,?_DimmedColourA+1
  2027  001EA6  C0CB  F02D         	movff	GetColour@theTimer,?_DimmedColourA+2
  2028  001EAA  C0CC  F02E         	movff	GetColour@theTimer+1,?_DimmedColourA+3
  2029  001EAE  EC8B  F013         	call	_DimmedColourA	;wreg free
  2030  001EB2  D015               	goto	L4
  2031  001EB4                     l4222:
  2032                           
  2033                           ; BSR set to: 0
  2034                           ;OutputSequences.c: 41: ReturnColour = RapidFlashColourB( theState, theTimer );
  2035  001EB4  C0C9  F02B         	movff	GetColour@theState,?_RapidFlashColourB
  2036  001EB8  C0CA  F02C         	movff	GetColour@theState+1,?_RapidFlashColourB+1
  2037  001EBC  C0CB  F02D         	movff	GetColour@theTimer,?_RapidFlashColourB+2
  2038  001EC0  C0CC  F02E         	movff	GetColour@theTimer+1,?_RapidFlashColourB+3
  2039  001EC4  EC35  F013         	call	_RapidFlashColourB	;wreg free
  2040  001EC8  D00A               	goto	L4
  2041  001ECA                     l4224:
  2042                           
  2043                           ; BSR set to: 0
  2044                           ;OutputSequences.c: 45: ReturnColour = ColourMix( theState, theTimer );
  2045  001ECA  C0C9  F02B         	movff	GetColour@theState,?_ColourMix
  2046  001ECE  C0CA  F02C         	movff	GetColour@theState+1,?_ColourMix+1
  2047  001ED2  C0CB  F02D         	movff	GetColour@theTimer,?_ColourMix+2
  2048  001ED6  C0CC  F02E         	movff	GetColour@theTimer+1,?_ColourMix+3
  2049  001EDA  ECDF  F012         	call	_ColourMix	;wreg free
  2050  001EDE                     L4:
  2051  001EDE  0100               	movlb	0	; () banked
  2052  001EE0  0100               	movlb	0	; () banked
  2053  001EE2  6FD0               	movwf	GetColour@ReturnColour& (0+255),b
  2054                           
  2055                           ;OutputSequences.c: 46: break;
  2056  001EE4  D018               	goto	l4230
  2057  001EE6                     l4228:
  2058  001EE6  0100               	movlb	0	; () banked
  2059  001EE8  0100               	movlb	0	; () banked
  2060  001EEA  51C8               	movf	GetColour@theSequences& (0+255),w,b
  2061                           
  2062                           ; Switch size 1, requested type "space"
  2063                           ; Number of cases is 7, Range of values is 1 to 7
  2064                           ; switch strategies available:
  2065                           ; Name         Instructions Cycles
  2066                           ; simple_byte           22    12 (average)
  2067                           ;	Chosen strategy is simple_byte
  2068  001EEC  0A01               	xorlw	1	; case 1
  2069  001EEE  B4D8               	btfsc	status,2,c
  2070  001EF0  D768               	goto	l4206
  2071  001EF2  0A03               	xorlw	3	; case 2
  2072  001EF4  B4D8               	btfsc	status,2,c
  2073  001EF6  D786               	goto	l4210
  2074  001EF8  0A01               	xorlw	1	; case 3
  2075  001EFA  B4D8               	btfsc	status,2,c
  2076  001EFC  D7A4               	goto	l4214
  2077  001EFE  0A07               	xorlw	7	; case 4
  2078  001F00  B4D8               	btfsc	status,2,c
  2079  001F02  D7C2               	goto	l4218
  2080  001F04  0A01               	xorlw	1	; case 5
  2081  001F06  B4D8               	btfsc	status,2,c
  2082  001F08  D7CA               	goto	l4220
  2083  001F0A  0A03               	xorlw	3	; case 6
  2084  001F0C  B4D8               	btfsc	status,2,c
  2085  001F0E  D7D2               	goto	l4222
  2086  001F10  0A01               	xorlw	1	; case 7
  2087  001F12  B4D8               	btfsc	status,2,c
  2088  001F14  D7DA               	goto	l4224
  2089  001F16                     l4230:
  2090                           
  2091                           ;OutputSequences.c: 49: return ReturnColour;
  2092  001F16  0100               	movlb	0	; () banked
  2093  001F18  0100               	movlb	0	; () banked
  2094  001F1A  51D0               	movf	GetColour@ReturnColour& (0+255),w,b
  2095                           
  2096                           ; BSR set to: 0
  2097                           
  2098                           ; BSR set to: 0
  2099  001F1C  0012               	return	
  2100  001F1E                     __end_of_GetColour:
  2101                           	opt stack 0
  2102                           tblptru	equ	0xFF8
  2103                           tblptrh	equ	0xFF7
  2104                           tblptrl	equ	0xFF6
  2105                           tablat	equ	0xFF5
  2106                           intcon	equ	0xFF2
  2107                           postinc0	equ	0xFEE
  2108                           wreg	equ	0xFE8
  2109                           postdec1	equ	0xFE5
  2110                           fsr1l	equ	0xFE1
  2111                           status	equ	0xFD8
  2112                           
  2113 ;; *************** function _ColourMix *****************
  2114 ;; Defined at:
  2115 ;;		line 118 in file "source/OutputSequences.c"
  2116 ;; Parameters:    Size  Location     Type
  2117 ;;  theState        2   42[COMRAM] PTR volatile unsigned ch
  2118 ;;		 -> m_Keys(85), 
  2119 ;;  theTimer        2   44[COMRAM] PTR volatile struct ATim
  2120 ;;		 -> m_Keys(85), 
  2121 ;; Auto vars:     Size  Location     Type
  2122 ;;  ReturnColour    1    0[BANK0 ] enum E174
  2123 ;; Return value:  Size  Location     Type
  2124 ;;                  1    wreg      enum E174
  2125 ;; Registers used:
  2126 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2127 ;; Tracked objects:
  2128 ;;		On entry : 0/0
  2129 ;;		On exit  : 0/0
  2130 ;;		Unchanged: 0/0
  2131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2132 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2133 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2134 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2135 ;;      Totals:         7       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2136 ;;Total ram usage:        8 bytes
  2137 ;; Hardware stack levels used:    1
  2138 ;; Hardware stack levels required when called:    3
  2139 ;; This function calls:
  2140 ;;		_CalculateFutureTime
  2141 ;; This function is called by:
  2142 ;;		_GetColour
  2143 ;; This function uses a non-reentrant model
  2144 ;;
  2145                           
  2146                           	psect	text8
  2147  0025BE                     __ptext8:
  2148                           	opt stack 0
  2149  0025BE                     _ColourMix:
  2150                           	opt stack 23
  2151                           
  2152                           ;OutputSequences.c: 119: t_ButtonColour ReturnColour = e_Unknown;
  2153                           
  2154                           ; BSR set to: 0
  2155                           ;incstack = 0
  2156                           ;incstack = 0
  2157  0025BE  6E2F               	movwf	??_ColourMix& (0+255),c
  2158  0025C0  0E00               	movlw	0
  2159  0025C2  0100               	movlb	0	; () banked
  2160  0025C4  0100               	movlb	0	; () banked
  2161  0025C6  6FC7               	movwf	ColourMix@ReturnColour& (0+255),b
  2162  0025C8  502F               	movf	??_ColourMix& (0+255),w,c
  2163                           
  2164                           ;OutputSequences.c: 121: switch( *theState )
  2165  0025CA  D03D               	goto	l4320
  2166  0025CC                     l4306:
  2167                           
  2168                           ;OutputSequences.c: 124: case 1:
  2169                           ;OutputSequences.c: 125: ReturnColour = e_ColourA;
  2170  0025CC  6E2F               	movwf	??_ColourMix& (0+255),c
  2171  0025CE  0E02               	movlw	2
  2172  0025D0  0100               	movlb	0	; () banked
  2173  0025D2  0100               	movlb	0	; () banked
  2174  0025D4  6FC7               	movwf	ColourMix@ReturnColour& (0+255),b
  2175  0025D6  502F               	movf	??_ColourMix& (0+255),w,c
  2176                           
  2177                           ; BSR set to: 0
  2178                           ;OutputSequences.c: 126: CalculateFutureTime( theTimer, 0, 0, 0 );
  2179  0025D8  C02D  F020         	movff	ColourMix@theTimer,?_CalculateFutureTime
  2180  0025DC  C02E  F021         	movff	ColourMix@theTimer+1,?_CalculateFutureTime+1
  2181  0025E0  6E2F               	movwf	??_ColourMix& (0+255),c
  2182  0025E2  0E00               	movlw	0
  2183  0025E4  6E22               	movwf	?_CalculateFutureTime+2,c
  2184  0025E6  502F               	movf	??_ColourMix& (0+255),w,c
  2185  0025E8  6E30               	movwf	(??_ColourMix+1)& (0+255),c
  2186  0025EA  0E00               	movlw	0
  2187  0025EC  6E23               	movwf	?_CalculateFutureTime+3,c
  2188  0025EE  5030               	movf	(??_ColourMix+1)& (0+255),w,c
  2189  0025F0  6E31               	movwf	(??_ColourMix+2)& (0+255),c
  2190  0025F2  0E00               	movlw	0
  2191  0025F4  6E24               	movwf	?_CalculateFutureTime+4,c
  2192  0025F6  5031               	movf	(??_ColourMix+2)& (0+255),w,c
  2193  0025F8  EC45  F00A         	call	_CalculateFutureTime	;wreg free
  2194                           
  2195                           ;OutputSequences.c: 127: *theState = 2;
  2196  0025FC  C02B  FFD9         	movff	ColourMix@theState,fsr2l
  2197  002600  C02C  FFDA         	movff	ColourMix@theState+1,fsr2h
  2198  002604  0E02               	movlw	2
  2199  002606  D01D               	goto	L5
  2200  002608                     l4312:
  2201                           
  2202                           ;OutputSequences.c: 130: ReturnColour = e_ColourB;
  2203  002608  6E2F               	movwf	??_ColourMix& (0+255),c
  2204  00260A  0E03               	movlw	3
  2205  00260C  0100               	movlb	0	; () banked
  2206  00260E  0100               	movlb	0	; () banked
  2207  002610  6FC7               	movwf	ColourMix@ReturnColour& (0+255),b
  2208  002612  502F               	movf	??_ColourMix& (0+255),w,c
  2209                           
  2210                           ; BSR set to: 0
  2211                           ;OutputSequences.c: 131: CalculateFutureTime( theTimer, 0, 0, 0 );
  2212  002614  C02D  F020         	movff	ColourMix@theTimer,?_CalculateFutureTime
  2213  002618  C02E  F021         	movff	ColourMix@theTimer+1,?_CalculateFutureTime+1
  2214  00261C  6E2F               	movwf	??_ColourMix& (0+255),c
  2215  00261E  0E00               	movlw	0
  2216  002620  6E22               	movwf	?_CalculateFutureTime+2,c
  2217  002622  502F               	movf	??_ColourMix& (0+255),w,c
  2218  002624  6E30               	movwf	(??_ColourMix+1)& (0+255),c
  2219  002626  0E00               	movlw	0
  2220  002628  6E23               	movwf	?_CalculateFutureTime+3,c
  2221  00262A  5030               	movf	(??_ColourMix+1)& (0+255),w,c
  2222  00262C  6E31               	movwf	(??_ColourMix+2)& (0+255),c
  2223  00262E  0E00               	movlw	0
  2224  002630  6E24               	movwf	?_CalculateFutureTime+4,c
  2225  002632  5031               	movf	(??_ColourMix+2)& (0+255),w,c
  2226  002634  EC45  F00A         	call	_CalculateFutureTime	;wreg free
  2227                           
  2228                           ;OutputSequences.c: 132: *theState = 1;
  2229  002638  C02B  FFD9         	movff	ColourMix@theState,fsr2l
  2230  00263C  C02C  FFDA         	movff	ColourMix@theState+1,fsr2h
  2231  002640  0E01               	movlw	1
  2232  002642                     L5:
  2233  002642  6EDF               	movwf	indf2,c
  2234                           
  2235                           ;OutputSequences.c: 133: break;
  2236  002644  D00E               	goto	l4322
  2237  002646                     l4320:
  2238  002646  C02B  FFD9         	movff	ColourMix@theState,fsr2l
  2239  00264A  C02C  FFDA         	movff	ColourMix@theState+1,fsr2h
  2240  00264E  50DF               	movf	indf2,w,c
  2241                           
  2242                           ; Switch size 1, requested type "space"
  2243                           ; Number of cases is 3, Range of values is 0 to 2
  2244                           ; switch strategies available:
  2245                           ; Name         Instructions Cycles
  2246                           ; simple_byte           10     6 (average)
  2247                           ;	Chosen strategy is simple_byte
  2248  002650  0A00               	xorlw	0	; case 0
  2249  002652  B4D8               	btfsc	status,2,c
  2250  002654  D7BB               	goto	l4306
  2251  002656  0A01               	xorlw	1	; case 1
  2252  002658  B4D8               	btfsc	status,2,c
  2253  00265A  D7B8               	goto	l4306
  2254  00265C  0A03               	xorlw	3	; case 2
  2255  00265E  B4D8               	btfsc	status,2,c
  2256  002660  D7D3               	goto	l4312
  2257  002662                     l4322:
  2258                           
  2259                           ;OutputSequences.c: 135: return ReturnColour;
  2260  002662  0100               	movlb	0	; () banked
  2261  002664  0100               	movlb	0	; () banked
  2262  002666  51C7               	movf	ColourMix@ReturnColour& (0+255),w,b
  2263                           
  2264                           ; BSR set to: 0
  2265                           
  2266                           ; BSR set to: 0
  2267  002668  0012               	return	
  2268  00266A                     __end_of_ColourMix:
  2269                           	opt stack 0
  2270                           tblptru	equ	0xFF8
  2271                           tblptrh	equ	0xFF7
  2272                           tblptrl	equ	0xFF6
  2273                           tablat	equ	0xFF5
  2274                           intcon	equ	0xFF2
  2275                           postinc0	equ	0xFEE
  2276                           wreg	equ	0xFE8
  2277                           postdec1	equ	0xFE5
  2278                           fsr1l	equ	0xFE1
  2279                           indf2	equ	0xFDF
  2280                           fsr2h	equ	0xFDA
  2281                           fsr2l	equ	0xFD9
  2282                           status	equ	0xFD8
  2283                           
  2284 ;; *************** function _RapidFlashColourB *****************
  2285 ;; Defined at:
  2286 ;;		line 97 in file "source/OutputSequences.c"
  2287 ;; Parameters:    Size  Location     Type
  2288 ;;  theState        2   42[COMRAM] PTR volatile unsigned ch
  2289 ;;		 -> m_Keys(85), 
  2290 ;;  theTimer        2   44[COMRAM] PTR volatile struct ATim
  2291 ;;		 -> m_Keys(85), 
  2292 ;; Auto vars:     Size  Location     Type
  2293 ;;  ReturnColour    1    0[BANK0 ] enum E174
  2294 ;; Return value:  Size  Location     Type
  2295 ;;                  1    wreg      enum E174
  2296 ;; Registers used:
  2297 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2298 ;; Tracked objects:
  2299 ;;		On entry : 0/0
  2300 ;;		On exit  : 0/0
  2301 ;;		Unchanged: 0/0
  2302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2303 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2304 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2305 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2306 ;;      Totals:         7       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2307 ;;Total ram usage:        8 bytes
  2308 ;; Hardware stack levels used:    1
  2309 ;; Hardware stack levels required when called:    3
  2310 ;; This function calls:
  2311 ;;		_CalculateFutureTime
  2312 ;; This function is called by:
  2313 ;;		_GetColour
  2314 ;; This function uses a non-reentrant model
  2315 ;;
  2316                           
  2317                           	psect	text9
  2318  00266A                     __ptext9:
  2319                           	opt stack 0
  2320  00266A                     _RapidFlashColourB:
  2321                           	opt stack 23
  2322                           
  2323                           ;OutputSequences.c: 98: t_ButtonColour ReturnColour = e_Unknown;
  2324                           
  2325                           ; BSR set to: 0
  2326                           ;incstack = 0
  2327                           ;incstack = 0
  2328  00266A  6E2F               	movwf	??_RapidFlashColourB& (0+255),c
  2329  00266C  0E00               	movlw	0
  2330  00266E  0100               	movlb	0	; () banked
  2331  002670  0100               	movlb	0	; () banked
  2332  002672  6FC7               	movwf	RapidFlashColourB@ReturnColour& (0+255),b
  2333  002674  502F               	movf	??_RapidFlashColourB& (0+255),w,c
  2334                           
  2335                           ;OutputSequences.c: 100: switch( *theState )
  2336  002676  D03D               	goto	l4298
  2337  002678                     l4284:
  2338                           
  2339                           ;OutputSequences.c: 103: case 1:
  2340                           ;OutputSequences.c: 104: ReturnColour = e_ColourB;
  2341  002678  6E2F               	movwf	??_RapidFlashColourB& (0+255),c
  2342  00267A  0E03               	movlw	3
  2343  00267C  0100               	movlb	0	; () banked
  2344  00267E  0100               	movlb	0	; () banked
  2345  002680  6FC7               	movwf	RapidFlashColourB@ReturnColour& (0+255),b
  2346  002682  502F               	movf	??_RapidFlashColourB& (0+255),w,c
  2347                           
  2348                           ; BSR set to: 0
  2349                           ;OutputSequences.c: 105: CalculateFutureTime( theTimer, 0, 0, 10 );
  2350  002684  C02D  F020         	movff	RapidFlashColourB@theTimer,?_CalculateFutureTime
  2351  002688  C02E  F021         	movff	RapidFlashColourB@theTimer+1,?_CalculateFutureTime+1
  2352  00268C  6E2F               	movwf	??_RapidFlashColourB& (0+255),c
  2353  00268E  0E00               	movlw	0
  2354  002690  6E22               	movwf	?_CalculateFutureTime+2,c
  2355  002692  502F               	movf	??_RapidFlashColourB& (0+255),w,c
  2356  002694  6E30               	movwf	(??_RapidFlashColourB+1)& (0+255),c
  2357  002696  0E00               	movlw	0
  2358  002698  6E23               	movwf	?_CalculateFutureTime+3,c
  2359  00269A  5030               	movf	(??_RapidFlashColourB+1)& (0+255),w,c
  2360  00269C  6E31               	movwf	(??_RapidFlashColourB+2)& (0+255),c
  2361  00269E  0E0A               	movlw	10
  2362  0026A0  6E24               	movwf	?_CalculateFutureTime+4,c
  2363  0026A2  5031               	movf	(??_RapidFlashColourB+2)& (0+255),w,c
  2364  0026A4  EC45  F00A         	call	_CalculateFutureTime	;wreg free
  2365                           
  2366                           ;OutputSequences.c: 106: *theState = 2;
  2367  0026A8  C02B  FFD9         	movff	RapidFlashColourB@theState,fsr2l
  2368  0026AC  C02C  FFDA         	movff	RapidFlashColourB@theState+1,fsr2h
  2369  0026B0  0E02               	movlw	2
  2370  0026B2  D01D               	goto	L6
  2371  0026B4                     l4290:
  2372                           
  2373                           ;OutputSequences.c: 109: ReturnColour = e_Off;
  2374  0026B4  6E2F               	movwf	??_RapidFlashColourB& (0+255),c
  2375  0026B6  0E01               	movlw	1
  2376  0026B8  0100               	movlb	0	; () banked
  2377  0026BA  0100               	movlb	0	; () banked
  2378  0026BC  6FC7               	movwf	RapidFlashColourB@ReturnColour& (0+255),b
  2379  0026BE  502F               	movf	??_RapidFlashColourB& (0+255),w,c
  2380                           
  2381                           ; BSR set to: 0
  2382                           ;OutputSequences.c: 110: CalculateFutureTime( theTimer, 0, 0, 50 );
  2383  0026C0  C02D  F020         	movff	RapidFlashColourB@theTimer,?_CalculateFutureTime
  2384  0026C4  C02E  F021         	movff	RapidFlashColourB@theTimer+1,?_CalculateFutureTime+1
  2385  0026C8  6E2F               	movwf	??_RapidFlashColourB& (0+255),c
  2386  0026CA  0E00               	movlw	0
  2387  0026CC  6E22               	movwf	?_CalculateFutureTime+2,c
  2388  0026CE  502F               	movf	??_RapidFlashColourB& (0+255),w,c
  2389  0026D0  6E30               	movwf	(??_RapidFlashColourB+1)& (0+255),c
  2390  0026D2  0E00               	movlw	0
  2391  0026D4  6E23               	movwf	?_CalculateFutureTime+3,c
  2392  0026D6  5030               	movf	(??_RapidFlashColourB+1)& (0+255),w,c
  2393  0026D8  6E31               	movwf	(??_RapidFlashColourB+2)& (0+255),c
  2394  0026DA  0E32               	movlw	50
  2395  0026DC  6E24               	movwf	?_CalculateFutureTime+4,c
  2396  0026DE  5031               	movf	(??_RapidFlashColourB+2)& (0+255),w,c
  2397  0026E0  EC45  F00A         	call	_CalculateFutureTime	;wreg free
  2398                           
  2399                           ;OutputSequences.c: 111: *theState = 1;
  2400  0026E4  C02B  FFD9         	movff	RapidFlashColourB@theState,fsr2l
  2401  0026E8  C02C  FFDA         	movff	RapidFlashColourB@theState+1,fsr2h
  2402  0026EC  0E01               	movlw	1
  2403  0026EE                     L6:
  2404  0026EE  6EDF               	movwf	indf2,c
  2405                           
  2406                           ;OutputSequences.c: 112: break;
  2407  0026F0  D00E               	goto	l4300
  2408  0026F2                     l4298:
  2409  0026F2  C02B  FFD9         	movff	RapidFlashColourB@theState,fsr2l
  2410  0026F6  C02C  FFDA         	movff	RapidFlashColourB@theState+1,fsr2h
  2411  0026FA  50DF               	movf	indf2,w,c
  2412                           
  2413                           ; Switch size 1, requested type "space"
  2414                           ; Number of cases is 3, Range of values is 0 to 2
  2415                           ; switch strategies available:
  2416                           ; Name         Instructions Cycles
  2417                           ; simple_byte           10     6 (average)
  2418                           ;	Chosen strategy is simple_byte
  2419  0026FC  0A00               	xorlw	0	; case 0
  2420  0026FE  B4D8               	btfsc	status,2,c
  2421  002700  D7BB               	goto	l4284
  2422  002702  0A01               	xorlw	1	; case 1
  2423  002704  B4D8               	btfsc	status,2,c
  2424  002706  D7B8               	goto	l4284
  2425  002708  0A03               	xorlw	3	; case 2
  2426  00270A  B4D8               	btfsc	status,2,c
  2427  00270C  D7D3               	goto	l4290
  2428  00270E                     l4300:
  2429                           
  2430                           ;OutputSequences.c: 114: return ReturnColour;
  2431  00270E  0100               	movlb	0	; () banked
  2432  002710  0100               	movlb	0	; () banked
  2433  002712  51C7               	movf	RapidFlashColourB@ReturnColour& (0+255),w,b
  2434                           
  2435                           ; BSR set to: 0
  2436                           
  2437                           ; BSR set to: 0
  2438  002714  0012               	return	
  2439  002716                     __end_of_RapidFlashColourB:
  2440                           	opt stack 0
  2441                           tblptru	equ	0xFF8
  2442                           tblptrh	equ	0xFF7
  2443                           tblptrl	equ	0xFF6
  2444                           tablat	equ	0xFF5
  2445                           intcon	equ	0xFF2
  2446                           postinc0	equ	0xFEE
  2447                           wreg	equ	0xFE8
  2448                           postdec1	equ	0xFE5
  2449                           fsr1l	equ	0xFE1
  2450                           indf2	equ	0xFDF
  2451                           fsr2h	equ	0xFDA
  2452                           fsr2l	equ	0xFD9
  2453                           status	equ	0xFD8
  2454                           
  2455 ;; *************** function _DimmedColourA *****************
  2456 ;; Defined at:
  2457 ;;		line 75 in file "source/OutputSequences.c"
  2458 ;; Parameters:    Size  Location     Type
  2459 ;;  theState        2   42[COMRAM] PTR volatile unsigned ch
  2460 ;;		 -> m_Keys(85), 
  2461 ;;  theTimer        2   44[COMRAM] PTR volatile struct ATim
  2462 ;;		 -> m_Keys(85), 
  2463 ;; Auto vars:     Size  Location     Type
  2464 ;;  ReturnColour    1    0[BANK0 ] enum E174
  2465 ;; Return value:  Size  Location     Type
  2466 ;;                  1    wreg      enum E174
  2467 ;; Registers used:
  2468 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2469 ;; Tracked objects:
  2470 ;;		On entry : 0/0
  2471 ;;		On exit  : 0/0
  2472 ;;		Unchanged: 0/0
  2473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2474 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2475 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2476 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2477 ;;      Totals:         7       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2478 ;;Total ram usage:        8 bytes
  2479 ;; Hardware stack levels used:    1
  2480 ;; Hardware stack levels required when called:    3
  2481 ;; This function calls:
  2482 ;;		_CalculateFutureTime
  2483 ;; This function is called by:
  2484 ;;		_GetColour
  2485 ;; This function uses a non-reentrant model
  2486 ;;
  2487                           
  2488                           	psect	text10
  2489  002716                     __ptext10:
  2490                           	opt stack 0
  2491  002716                     _DimmedColourA:
  2492                           	opt stack 23
  2493                           
  2494                           ;OutputSequences.c: 76: t_ButtonColour ReturnColour = e_Unknown;
  2495                           
  2496                           ; BSR set to: 0
  2497                           ;incstack = 0
  2498                           ;incstack = 0
  2499  002716  6E2F               	movwf	??_DimmedColourA& (0+255),c
  2500  002718  0E00               	movlw	0
  2501  00271A  0100               	movlb	0	; () banked
  2502  00271C  0100               	movlb	0	; () banked
  2503  00271E  6FC7               	movwf	DimmedColourA@ReturnColour& (0+255),b
  2504  002720  502F               	movf	??_DimmedColourA& (0+255),w,c
  2505                           
  2506                           ;OutputSequences.c: 79: switch( *theState )
  2507  002722  D03D               	goto	l4276
  2508  002724                     l4262:
  2509                           
  2510                           ;OutputSequences.c: 82: case 1:
  2511                           ;OutputSequences.c: 83: ReturnColour = e_ColourA;
  2512  002724  6E2F               	movwf	??_DimmedColourA& (0+255),c
  2513  002726  0E02               	movlw	2
  2514  002728  0100               	movlb	0	; () banked
  2515  00272A  0100               	movlb	0	; () banked
  2516  00272C  6FC7               	movwf	DimmedColourA@ReturnColour& (0+255),b
  2517  00272E  502F               	movf	??_DimmedColourA& (0+255),w,c
  2518                           
  2519                           ; BSR set to: 0
  2520                           ;OutputSequences.c: 84: CalculateFutureTime( theTimer, 0, 0, 1 );
  2521  002730  C02D  F020         	movff	DimmedColourA@theTimer,?_CalculateFutureTime
  2522  002734  C02E  F021         	movff	DimmedColourA@theTimer+1,?_CalculateFutureTime+1
  2523  002738  6E2F               	movwf	??_DimmedColourA& (0+255),c
  2524  00273A  0E00               	movlw	0
  2525  00273C  6E22               	movwf	?_CalculateFutureTime+2,c
  2526  00273E  502F               	movf	??_DimmedColourA& (0+255),w,c
  2527  002740  6E30               	movwf	(??_DimmedColourA+1)& (0+255),c
  2528  002742  0E00               	movlw	0
  2529  002744  6E23               	movwf	?_CalculateFutureTime+3,c
  2530  002746  5030               	movf	(??_DimmedColourA+1)& (0+255),w,c
  2531  002748  6E31               	movwf	(??_DimmedColourA+2)& (0+255),c
  2532  00274A  0E01               	movlw	1
  2533  00274C  6E24               	movwf	?_CalculateFutureTime+4,c
  2534  00274E  5031               	movf	(??_DimmedColourA+2)& (0+255),w,c
  2535  002750  EC45  F00A         	call	_CalculateFutureTime	;wreg free
  2536                           
  2537                           ;OutputSequences.c: 85: *theState = 2;
  2538  002754  C02B  FFD9         	movff	DimmedColourA@theState,fsr2l
  2539  002758  C02C  FFDA         	movff	DimmedColourA@theState+1,fsr2h
  2540  00275C  0E02               	movlw	2
  2541  00275E  D01D               	goto	L7
  2542  002760                     l4268:
  2543                           
  2544                           ;OutputSequences.c: 88: ReturnColour = e_Off;
  2545  002760  6E2F               	movwf	??_DimmedColourA& (0+255),c
  2546  002762  0E01               	movlw	1
  2547  002764  0100               	movlb	0	; () banked
  2548  002766  0100               	movlb	0	; () banked
  2549  002768  6FC7               	movwf	DimmedColourA@ReturnColour& (0+255),b
  2550  00276A  502F               	movf	??_DimmedColourA& (0+255),w,c
  2551                           
  2552                           ; BSR set to: 0
  2553                           ;OutputSequences.c: 89: CalculateFutureTime( theTimer, 0, 0, 2 );
  2554  00276C  C02D  F020         	movff	DimmedColourA@theTimer,?_CalculateFutureTime
  2555  002770  C02E  F021         	movff	DimmedColourA@theTimer+1,?_CalculateFutureTime+1
  2556  002774  6E2F               	movwf	??_DimmedColourA& (0+255),c
  2557  002776  0E00               	movlw	0
  2558  002778  6E22               	movwf	?_CalculateFutureTime+2,c
  2559  00277A  502F               	movf	??_DimmedColourA& (0+255),w,c
  2560  00277C  6E30               	movwf	(??_DimmedColourA+1)& (0+255),c
  2561  00277E  0E00               	movlw	0
  2562  002780  6E23               	movwf	?_CalculateFutureTime+3,c
  2563  002782  5030               	movf	(??_DimmedColourA+1)& (0+255),w,c
  2564  002784  6E31               	movwf	(??_DimmedColourA+2)& (0+255),c
  2565  002786  0E02               	movlw	2
  2566  002788  6E24               	movwf	?_CalculateFutureTime+4,c
  2567  00278A  5031               	movf	(??_DimmedColourA+2)& (0+255),w,c
  2568  00278C  EC45  F00A         	call	_CalculateFutureTime	;wreg free
  2569                           
  2570                           ;OutputSequences.c: 90: *theState = 1;
  2571  002790  C02B  FFD9         	movff	DimmedColourA@theState,fsr2l
  2572  002794  C02C  FFDA         	movff	DimmedColourA@theState+1,fsr2h
  2573  002798  0E01               	movlw	1
  2574  00279A                     L7:
  2575  00279A  6EDF               	movwf	indf2,c
  2576                           
  2577                           ;OutputSequences.c: 91: break;
  2578  00279C  D00E               	goto	l4278
  2579  00279E                     l4276:
  2580  00279E  C02B  FFD9         	movff	DimmedColourA@theState,fsr2l
  2581  0027A2  C02C  FFDA         	movff	DimmedColourA@theState+1,fsr2h
  2582  0027A6  50DF               	movf	indf2,w,c
  2583                           
  2584                           ; Switch size 1, requested type "space"
  2585                           ; Number of cases is 3, Range of values is 0 to 2
  2586                           ; switch strategies available:
  2587                           ; Name         Instructions Cycles
  2588                           ; simple_byte           10     6 (average)
  2589                           ;	Chosen strategy is simple_byte
  2590  0027A8  0A00               	xorlw	0	; case 0
  2591  0027AA  B4D8               	btfsc	status,2,c
  2592  0027AC  D7BB               	goto	l4262
  2593  0027AE  0A01               	xorlw	1	; case 1
  2594  0027B0  B4D8               	btfsc	status,2,c
  2595  0027B2  D7B8               	goto	l4262
  2596  0027B4  0A03               	xorlw	3	; case 2
  2597  0027B6  B4D8               	btfsc	status,2,c
  2598  0027B8  D7D3               	goto	l4268
  2599  0027BA                     l4278:
  2600                           
  2601                           ;OutputSequences.c: 93: return ReturnColour;
  2602  0027BA  0100               	movlb	0	; () banked
  2603  0027BC  0100               	movlb	0	; () banked
  2604  0027BE  51C7               	movf	DimmedColourA@ReturnColour& (0+255),w,b
  2605                           
  2606                           ; BSR set to: 0
  2607                           
  2608                           ; BSR set to: 0
  2609  0027C0  0012               	return	
  2610  0027C2                     __end_of_DimmedColourA:
  2611                           	opt stack 0
  2612                           tblptru	equ	0xFF8
  2613                           tblptrh	equ	0xFF7
  2614                           tblptrl	equ	0xFF6
  2615                           tablat	equ	0xFF5
  2616                           intcon	equ	0xFF2
  2617                           postinc0	equ	0xFEE
  2618                           wreg	equ	0xFE8
  2619                           postdec1	equ	0xFE5
  2620                           fsr1l	equ	0xFE1
  2621                           indf2	equ	0xFDF
  2622                           fsr2h	equ	0xFDA
  2623                           fsr2l	equ	0xFD9
  2624                           status	equ	0xFD8
  2625                           
  2626 ;; *************** function _RedGreenFlash *****************
  2627 ;; Defined at:
  2628 ;;		line 53 in file "source/OutputSequences.c"
  2629 ;; Parameters:    Size  Location     Type
  2630 ;;  theState        2   42[COMRAM] PTR volatile unsigned ch
  2631 ;;		 -> m_Keys(85), 
  2632 ;;  theTimer        2   44[COMRAM] PTR volatile struct ATim
  2633 ;;		 -> m_Keys(85), 
  2634 ;; Auto vars:     Size  Location     Type
  2635 ;;  ReturnColour    1    0[BANK0 ] enum E174
  2636 ;; Return value:  Size  Location     Type
  2637 ;;                  1    wreg      enum E174
  2638 ;; Registers used:
  2639 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2640 ;; Tracked objects:
  2641 ;;		On entry : 0/0
  2642 ;;		On exit  : 0/0
  2643 ;;		Unchanged: 0/0
  2644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2645 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2646 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2647 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2648 ;;      Totals:         7       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2649 ;;Total ram usage:        8 bytes
  2650 ;; Hardware stack levels used:    1
  2651 ;; Hardware stack levels required when called:    3
  2652 ;; This function calls:
  2653 ;;		_CalculateFutureTime
  2654 ;; This function is called by:
  2655 ;;		_GetColour
  2656 ;; This function uses a non-reentrant model
  2657 ;;
  2658                           
  2659                           	psect	text11
  2660  0027C2                     __ptext11:
  2661                           	opt stack 0
  2662  0027C2                     _RedGreenFlash:
  2663                           	opt stack 23
  2664                           
  2665                           ;OutputSequences.c: 54: t_ButtonColour ReturnColour = e_Unknown;
  2666                           
  2667                           ; BSR set to: 0
  2668                           ;incstack = 0
  2669                           ;incstack = 0
  2670  0027C2  6E2F               	movwf	??_RedGreenFlash& (0+255),c
  2671  0027C4  0E00               	movlw	0
  2672  0027C6  0100               	movlb	0	; () banked
  2673  0027C8  0100               	movlb	0	; () banked
  2674  0027CA  6FC7               	movwf	RedGreenFlash@ReturnColour& (0+255),b
  2675  0027CC  502F               	movf	??_RedGreenFlash& (0+255),w,c
  2676                           
  2677                           ;OutputSequences.c: 57: switch( *theState )
  2678  0027CE  D03D               	goto	l4254
  2679  0027D0                     l4240:
  2680                           
  2681                           ;OutputSequences.c: 60: case 1:
  2682                           ;OutputSequences.c: 61: ReturnColour = e_ColourA;
  2683  0027D0  6E2F               	movwf	??_RedGreenFlash& (0+255),c
  2684  0027D2  0E02               	movlw	2
  2685  0027D4  0100               	movlb	0	; () banked
  2686  0027D6  0100               	movlb	0	; () banked
  2687  0027D8  6FC7               	movwf	RedGreenFlash@ReturnColour& (0+255),b
  2688  0027DA  502F               	movf	??_RedGreenFlash& (0+255),w,c
  2689                           
  2690                           ; BSR set to: 0
  2691                           ;OutputSequences.c: 62: CalculateFutureTime( theTimer, 0, 2, 0 );
  2692  0027DC  C02D  F020         	movff	RedGreenFlash@theTimer,?_CalculateFutureTime
  2693  0027E0  C02E  F021         	movff	RedGreenFlash@theTimer+1,?_CalculateFutureTime+1
  2694  0027E4  6E2F               	movwf	??_RedGreenFlash& (0+255),c
  2695  0027E6  0E00               	movlw	0
  2696  0027E8  6E22               	movwf	?_CalculateFutureTime+2,c
  2697  0027EA  502F               	movf	??_RedGreenFlash& (0+255),w,c
  2698  0027EC  6E30               	movwf	(??_RedGreenFlash+1)& (0+255),c
  2699  0027EE  0E02               	movlw	2
  2700  0027F0  6E23               	movwf	?_CalculateFutureTime+3,c
  2701  0027F2  5030               	movf	(??_RedGreenFlash+1)& (0+255),w,c
  2702  0027F4  6E31               	movwf	(??_RedGreenFlash+2)& (0+255),c
  2703  0027F6  0E00               	movlw	0
  2704  0027F8  6E24               	movwf	?_CalculateFutureTime+4,c
  2705  0027FA  5031               	movf	(??_RedGreenFlash+2)& (0+255),w,c
  2706  0027FC  EC45  F00A         	call	_CalculateFutureTime	;wreg free
  2707                           
  2708                           ;OutputSequences.c: 63: *theState = 2;
  2709  002800  C02B  FFD9         	movff	RedGreenFlash@theState,fsr2l
  2710  002804  C02C  FFDA         	movff	RedGreenFlash@theState+1,fsr2h
  2711  002808  0E02               	movlw	2
  2712  00280A  D01D               	goto	L8
  2713  00280C                     l4246:
  2714                           
  2715                           ;OutputSequences.c: 66: ReturnColour = e_ColourB;
  2716  00280C  6E2F               	movwf	??_RedGreenFlash& (0+255),c
  2717  00280E  0E03               	movlw	3
  2718  002810  0100               	movlb	0	; () banked
  2719  002812  0100               	movlb	0	; () banked
  2720  002814  6FC7               	movwf	RedGreenFlash@ReturnColour& (0+255),b
  2721  002816  502F               	movf	??_RedGreenFlash& (0+255),w,c
  2722                           
  2723                           ; BSR set to: 0
  2724                           ;OutputSequences.c: 67: CalculateFutureTime( theTimer, 0, 2, 0 );
  2725  002818  C02D  F020         	movff	RedGreenFlash@theTimer,?_CalculateFutureTime
  2726  00281C  C02E  F021         	movff	RedGreenFlash@theTimer+1,?_CalculateFutureTime+1
  2727  002820  6E2F               	movwf	??_RedGreenFlash& (0+255),c
  2728  002822  0E00               	movlw	0
  2729  002824  6E22               	movwf	?_CalculateFutureTime+2,c
  2730  002826  502F               	movf	??_RedGreenFlash& (0+255),w,c
  2731  002828  6E30               	movwf	(??_RedGreenFlash+1)& (0+255),c
  2732  00282A  0E02               	movlw	2
  2733  00282C  6E23               	movwf	?_CalculateFutureTime+3,c
  2734  00282E  5030               	movf	(??_RedGreenFlash+1)& (0+255),w,c
  2735  002830  6E31               	movwf	(??_RedGreenFlash+2)& (0+255),c
  2736  002832  0E00               	movlw	0
  2737  002834  6E24               	movwf	?_CalculateFutureTime+4,c
  2738  002836  5031               	movf	(??_RedGreenFlash+2)& (0+255),w,c
  2739  002838  EC45  F00A         	call	_CalculateFutureTime	;wreg free
  2740                           
  2741                           ;OutputSequences.c: 68: *theState = 1;
  2742  00283C  C02B  FFD9         	movff	RedGreenFlash@theState,fsr2l
  2743  002840  C02C  FFDA         	movff	RedGreenFlash@theState+1,fsr2h
  2744  002844  0E01               	movlw	1
  2745  002846                     L8:
  2746  002846  6EDF               	movwf	indf2,c
  2747                           
  2748                           ;OutputSequences.c: 69: break;
  2749  002848  D00E               	goto	l4256
  2750  00284A                     l4254:
  2751  00284A  C02B  FFD9         	movff	RedGreenFlash@theState,fsr2l
  2752  00284E  C02C  FFDA         	movff	RedGreenFlash@theState+1,fsr2h
  2753  002852  50DF               	movf	indf2,w,c
  2754                           
  2755                           ; Switch size 1, requested type "space"
  2756                           ; Number of cases is 3, Range of values is 0 to 2
  2757                           ; switch strategies available:
  2758                           ; Name         Instructions Cycles
  2759                           ; simple_byte           10     6 (average)
  2760                           ;	Chosen strategy is simple_byte
  2761  002854  0A00               	xorlw	0	; case 0
  2762  002856  B4D8               	btfsc	status,2,c
  2763  002858  D7BB               	goto	l4240
  2764  00285A  0A01               	xorlw	1	; case 1
  2765  00285C  B4D8               	btfsc	status,2,c
  2766  00285E  D7B8               	goto	l4240
  2767  002860  0A03               	xorlw	3	; case 2
  2768  002862  B4D8               	btfsc	status,2,c
  2769  002864  D7D3               	goto	l4246
  2770  002866                     l4256:
  2771                           
  2772                           ;OutputSequences.c: 71: return ReturnColour;
  2773  002866  0100               	movlb	0	; () banked
  2774  002868  0100               	movlb	0	; () banked
  2775  00286A  51C7               	movf	RedGreenFlash@ReturnColour& (0+255),w,b
  2776                           
  2777                           ; BSR set to: 0
  2778                           
  2779                           ; BSR set to: 0
  2780  00286C  0012               	return	
  2781  00286E                     __end_of_RedGreenFlash:
  2782                           	opt stack 0
  2783                           tblptru	equ	0xFF8
  2784                           tblptrh	equ	0xFF7
  2785                           tblptrl	equ	0xFF6
  2786                           tablat	equ	0xFF5
  2787                           intcon	equ	0xFF2
  2788                           postinc0	equ	0xFEE
  2789                           wreg	equ	0xFE8
  2790                           postdec1	equ	0xFE5
  2791                           fsr1l	equ	0xFE1
  2792                           indf2	equ	0xFDF
  2793                           fsr2h	equ	0xFDA
  2794                           fsr2l	equ	0xFD9
  2795                           status	equ	0xFD8
  2796                           
  2797 ;; *************** function _ColourB *****************
  2798 ;; Defined at:
  2799 ;;		line 99 in file "source/OutputTask.c"
  2800 ;; Parameters:    Size  Location     Type
  2801 ;;  theId           1   31[COMRAM] unsigned char 
  2802 ;; Auto vars:     Size  Location     Type
  2803 ;;		None
  2804 ;; Return value:  Size  Location     Type
  2805 ;;		None               void
  2806 ;; Registers used:
  2807 ;;		wreg, status,2, status,0
  2808 ;; Tracked objects:
  2809 ;;		On entry : 0/0
  2810 ;;		On exit  : 0/0
  2811 ;;		Unchanged: 0/0
  2812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2813 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2814 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2815 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2816 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2817 ;;Total ram usage:        1 bytes
  2818 ;; Hardware stack levels used:    1
  2819 ;; Hardware stack levels required when called:    2
  2820 ;; This function calls:
  2821 ;;		Nothing
  2822 ;; This function is called by:
  2823 ;;		_IlluminateButton
  2824 ;;		_ColourBTest
  2825 ;; This function uses a non-reentrant model
  2826 ;;
  2827                           
  2828                           	psect	text12
  2829  002C96                     __ptext12:
  2830                           	opt stack 0
  2831  002C96                     _ColourB:
  2832                           	opt stack 25
  2833                           
  2834                           ;OutputTask.c: 100: switch ( theId )
  2835                           
  2836                           ; BSR set to: 0
  2837                           ;incstack = 0
  2838                           ;incstack = 0
  2839  002C96  D00F               	goto	l4202
  2840  002C98                     l382:
  2841                           
  2842                           ;OutputTask.c: 103: PORTAbits.RA1 = 1;
  2843  002C98  8280               	bsf	3968,1,c	;volatile
  2844                           
  2845                           ;OutputTask.c: 104: PORTAbits.RA2 = 0;
  2846  002C9A  9480               	bcf	3968,2,c	;volatile
  2847                           
  2848                           ;OutputTask.c: 105: break;
  2849  002C9C  D01C               	goto	l388
  2850  002C9E                     l384:
  2851                           
  2852                           ;OutputTask.c: 108: PORTAbits.RA4 = 1;
  2853  002C9E  8880               	bsf	3968,4,c	;volatile
  2854                           
  2855                           ;OutputTask.c: 109: PORTAbits.RA5 = 0;
  2856  002CA0  9A80               	bcf	3968,5,c	;volatile
  2857                           
  2858                           ;OutputTask.c: 110: break;
  2859  002CA2  D019               	goto	l388
  2860  002CA4                     l385:
  2861                           
  2862                           ;OutputTask.c: 113: PORTAbits.RA6 = 1;
  2863  002CA4  8C80               	bsf	3968,6,c	;volatile
  2864                           
  2865                           ;OutputTask.c: 114: PORTCbits.RC0 = 0;
  2866  002CA6  9082               	bcf	3970,0,c	;volatile
  2867                           
  2868                           ;OutputTask.c: 115: break;
  2869  002CA8  D016               	goto	l388
  2870  002CAA                     l386:
  2871                           
  2872                           ;OutputTask.c: 118: PORTCbits.RC2 = 1;
  2873  002CAA  8482               	bsf	3970,2,c	;volatile
  2874                           
  2875                           ;OutputTask.c: 119: PORTCbits.RC3 = 0;
  2876  002CAC  9682               	bcf	3970,3,c	;volatile
  2877                           
  2878                           ;OutputTask.c: 120: break;
  2879  002CAE  D013               	goto	l388
  2880  002CB0                     l387:
  2881                           
  2882                           ;OutputTask.c: 123: PORTCbits.RC4 = 0;
  2883  002CB0  9882               	bcf	3970,4,c	;volatile
  2884                           
  2885                           ;OutputTask.c: 124: PORTCbits.RC5 = 1;
  2886  002CB2  8A82               	bsf	3970,5,c	;volatile
  2887                           
  2888                           ;OutputTask.c: 125: break;
  2889  002CB4  D010               	goto	l388
  2890  002CB6                     l4202:
  2891  002CB6  5020               	movf	ColourB@theId,w,c
  2892                           
  2893                           ; Switch size 1, requested type "space"
  2894                           ; Number of cases is 5, Range of values is 0 to 4
  2895                           ; switch strategies available:
  2896                           ; Name         Instructions Cycles
  2897                           ; simple_byte           16     9 (average)
  2898                           ;	Chosen strategy is simple_byte
  2899  002CB8  0A00               	xorlw	0	; case 0
  2900  002CBA  B4D8               	btfsc	status,2,c
  2901  002CBC  D7ED               	goto	l382
  2902  002CBE  0A01               	xorlw	1	; case 1
  2903  002CC0  B4D8               	btfsc	status,2,c
  2904  002CC2  D7ED               	goto	l384
  2905  002CC4  0A03               	xorlw	3	; case 2
  2906  002CC6  B4D8               	btfsc	status,2,c
  2907  002CC8  D7ED               	goto	l385
  2908  002CCA  0A01               	xorlw	1	; case 3
  2909  002CCC  B4D8               	btfsc	status,2,c
  2910  002CCE  D7ED               	goto	l386
  2911  002CD0  0A07               	xorlw	7	; case 4
  2912  002CD2  B4D8               	btfsc	status,2,c
  2913  002CD4  D7ED               	goto	l387
  2914  002CD6                     l388:
  2915  002CD6  0012               	return	
  2916  002CD8                     __end_of_ColourB:
  2917                           	opt stack 0
  2918                           tblptru	equ	0xFF8
  2919                           tblptrh	equ	0xFF7
  2920                           tblptrl	equ	0xFF6
  2921                           tablat	equ	0xFF5
  2922                           intcon	equ	0xFF2
  2923                           postinc0	equ	0xFEE
  2924                           wreg	equ	0xFE8
  2925                           postdec1	equ	0xFE5
  2926                           fsr1l	equ	0xFE1
  2927                           indf2	equ	0xFDF
  2928                           fsr2h	equ	0xFDA
  2929                           fsr2l	equ	0xFD9
  2930                           status	equ	0xFD8
  2931                           
  2932 ;; *************** function _ColourA *****************
  2933 ;; Defined at:
  2934 ;;		line 68 in file "source/OutputTask.c"
  2935 ;; Parameters:    Size  Location     Type
  2936 ;;  theId           1   31[COMRAM] unsigned char 
  2937 ;; Auto vars:     Size  Location     Type
  2938 ;;		None
  2939 ;; Return value:  Size  Location     Type
  2940 ;;		None               void
  2941 ;; Registers used:
  2942 ;;		wreg, status,2, status,0
  2943 ;; Tracked objects:
  2944 ;;		On entry : 0/0
  2945 ;;		On exit  : 0/0
  2946 ;;		Unchanged: 0/0
  2947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2948 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2949 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2950 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2951 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2952 ;;Total ram usage:        1 bytes
  2953 ;; Hardware stack levels used:    1
  2954 ;; Hardware stack levels required when called:    2
  2955 ;; This function calls:
  2956 ;;		Nothing
  2957 ;; This function is called by:
  2958 ;;		_IlluminateButton
  2959 ;;		_ColourATest
  2960 ;; This function uses a non-reentrant model
  2961 ;;
  2962                           
  2963                           	psect	text13
  2964  002CD8                     __ptext13:
  2965                           	opt stack 0
  2966  002CD8                     _ColourA:
  2967                           	opt stack 25
  2968                           
  2969                           ;OutputTask.c: 69: switch ( theId )
  2970                           
  2971                           ;incstack = 0
  2972                           ;incstack = 0
  2973  002CD8  D00F               	goto	l4196
  2974  002CDA                     l372:
  2975                           
  2976                           ;OutputTask.c: 72: PORTAbits.RA1 = 0;
  2977  002CDA  9280               	bcf	3968,1,c	;volatile
  2978                           
  2979                           ;OutputTask.c: 73: PORTAbits.RA2 = 1;
  2980  002CDC  8480               	bsf	3968,2,c	;volatile
  2981                           
  2982                           ;OutputTask.c: 74: break;
  2983  002CDE  D01C               	goto	l378
  2984  002CE0                     l374:
  2985                           
  2986                           ;OutputTask.c: 77: PORTAbits.RA4 = 0;
  2987  002CE0  9880               	bcf	3968,4,c	;volatile
  2988                           
  2989                           ;OutputTask.c: 78: PORTAbits.RA5 = 1;
  2990  002CE2  8A80               	bsf	3968,5,c	;volatile
  2991                           
  2992                           ;OutputTask.c: 79: break;
  2993  002CE4  D019               	goto	l378
  2994  002CE6                     l375:
  2995                           
  2996                           ;OutputTask.c: 82: PORTAbits.RA6 = 0;
  2997  002CE6  9C80               	bcf	3968,6,c	;volatile
  2998                           
  2999                           ;OutputTask.c: 83: PORTCbits.RC0 = 1;
  3000  002CE8  8082               	bsf	3970,0,c	;volatile
  3001                           
  3002                           ;OutputTask.c: 84: break;
  3003  002CEA  D016               	goto	l378
  3004  002CEC                     l376:
  3005                           
  3006                           ;OutputTask.c: 87: PORTCbits.RC2 = 0;
  3007  002CEC  9482               	bcf	3970,2,c	;volatile
  3008                           
  3009                           ;OutputTask.c: 88: PORTCbits.RC3 = 1;
  3010  002CEE  8682               	bsf	3970,3,c	;volatile
  3011                           
  3012                           ;OutputTask.c: 89: break;
  3013  002CF0  D013               	goto	l378
  3014  002CF2                     l377:
  3015                           
  3016                           ;OutputTask.c: 92: PORTCbits.RC4 = 1;
  3017  002CF2  8882               	bsf	3970,4,c	;volatile
  3018                           
  3019                           ;OutputTask.c: 93: PORTCbits.RC5 = 0;
  3020  002CF4  9A82               	bcf	3970,5,c	;volatile
  3021                           
  3022                           ;OutputTask.c: 94: break;
  3023  002CF6  D010               	goto	l378
  3024  002CF8                     l4196:
  3025  002CF8  5020               	movf	ColourA@theId,w,c
  3026                           
  3027                           ; Switch size 1, requested type "space"
  3028                           ; Number of cases is 5, Range of values is 0 to 4
  3029                           ; switch strategies available:
  3030                           ; Name         Instructions Cycles
  3031                           ; simple_byte           16     9 (average)
  3032                           ;	Chosen strategy is simple_byte
  3033  002CFA  0A00               	xorlw	0	; case 0
  3034  002CFC  B4D8               	btfsc	status,2,c
  3035  002CFE  D7ED               	goto	l372
  3036  002D00  0A01               	xorlw	1	; case 1
  3037  002D02  B4D8               	btfsc	status,2,c
  3038  002D04  D7ED               	goto	l374
  3039  002D06  0A03               	xorlw	3	; case 2
  3040  002D08  B4D8               	btfsc	status,2,c
  3041  002D0A  D7ED               	goto	l375
  3042  002D0C  0A01               	xorlw	1	; case 3
  3043  002D0E  B4D8               	btfsc	status,2,c
  3044  002D10  D7ED               	goto	l376
  3045  002D12  0A07               	xorlw	7	; case 4
  3046  002D14  B4D8               	btfsc	status,2,c
  3047  002D16  D7ED               	goto	l377
  3048  002D18                     l378:
  3049  002D18  0012               	return	
  3050  002D1A                     __end_of_ColourA:
  3051                           	opt stack 0
  3052                           tblptru	equ	0xFF8
  3053                           tblptrh	equ	0xFF7
  3054                           tblptrl	equ	0xFF6
  3055                           tablat	equ	0xFF5
  3056                           intcon	equ	0xFF2
  3057                           postinc0	equ	0xFEE
  3058                           wreg	equ	0xFE8
  3059                           postdec1	equ	0xFE5
  3060                           fsr1l	equ	0xFE1
  3061                           indf2	equ	0xFDF
  3062                           fsr2h	equ	0xFDA
  3063                           fsr2l	equ	0xFD9
  3064                           status	equ	0xFD8
  3065                           
  3066 ;; *************** function _ColourNone *****************
  3067 ;; Defined at:
  3068 ;;		line 130 in file "source/OutputTask.c"
  3069 ;; Parameters:    Size  Location     Type
  3070 ;;  theId           1   31[COMRAM] unsigned char 
  3071 ;; Auto vars:     Size  Location     Type
  3072 ;;		None
  3073 ;; Return value:  Size  Location     Type
  3074 ;;		None               void
  3075 ;; Registers used:
  3076 ;;		wreg, status,2, status,0
  3077 ;; Tracked objects:
  3078 ;;		On entry : 0/0
  3079 ;;		On exit  : 0/0
  3080 ;;		Unchanged: 0/0
  3081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3082 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3083 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3084 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3085 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3086 ;;Total ram usage:        1 bytes
  3087 ;; Hardware stack levels used:    1
  3088 ;; Hardware stack levels required when called:    2
  3089 ;; This function calls:
  3090 ;;		Nothing
  3091 ;; This function is called by:
  3092 ;;		_IlluminateButton
  3093 ;; This function uses a non-reentrant model
  3094 ;;
  3095                           
  3096                           	psect	text14
  3097  002D1A                     __ptext14:
  3098                           	opt stack 0
  3099  002D1A                     _ColourNone:
  3100                           	opt stack 25
  3101                           
  3102                           ;OutputTask.c: 131: switch ( theId )
  3103                           
  3104                           ;incstack = 0
  3105                           ;incstack = 0
  3106  002D1A  D00F               	goto	l4190
  3107  002D1C                     l392:
  3108                           
  3109                           ;OutputTask.c: 134: PORTAbits.RA1 = 0;
  3110  002D1C  9280               	bcf	3968,1,c	;volatile
  3111                           
  3112                           ;OutputTask.c: 135: PORTAbits.RA2 = 0;
  3113  002D1E  9480               	bcf	3968,2,c	;volatile
  3114                           
  3115                           ;OutputTask.c: 136: break;
  3116  002D20  D01C               	goto	l398
  3117  002D22                     l394:
  3118                           
  3119                           ;OutputTask.c: 139: PORTAbits.RA4 = 0;
  3120  002D22  9880               	bcf	3968,4,c	;volatile
  3121                           
  3122                           ;OutputTask.c: 140: PORTAbits.RA5 = 0;
  3123  002D24  9A80               	bcf	3968,5,c	;volatile
  3124                           
  3125                           ;OutputTask.c: 141: break;
  3126  002D26  D019               	goto	l398
  3127  002D28                     l395:
  3128                           
  3129                           ;OutputTask.c: 144: PORTAbits.RA6 = 0;
  3130  002D28  9C80               	bcf	3968,6,c	;volatile
  3131                           
  3132                           ;OutputTask.c: 145: PORTCbits.RC0 = 0;
  3133  002D2A  9082               	bcf	3970,0,c	;volatile
  3134                           
  3135                           ;OutputTask.c: 146: break;
  3136  002D2C  D016               	goto	l398
  3137  002D2E                     l396:
  3138                           
  3139                           ;OutputTask.c: 149: PORTCbits.RC2 = 0;
  3140  002D2E  9482               	bcf	3970,2,c	;volatile
  3141                           
  3142                           ;OutputTask.c: 150: PORTCbits.RC3 = 0;
  3143  002D30  9682               	bcf	3970,3,c	;volatile
  3144                           
  3145                           ;OutputTask.c: 151: break;
  3146  002D32  D013               	goto	l398
  3147  002D34                     l397:
  3148                           
  3149                           ;OutputTask.c: 154: PORTCbits.RC4 = 0;
  3150  002D34  9882               	bcf	3970,4,c	;volatile
  3151                           
  3152                           ;OutputTask.c: 155: PORTCbits.RC5 = 0;
  3153  002D36  9A82               	bcf	3970,5,c	;volatile
  3154                           
  3155                           ;OutputTask.c: 156: break;
  3156  002D38  D010               	goto	l398
  3157  002D3A                     l4190:
  3158  002D3A  5020               	movf	ColourNone@theId,w,c
  3159                           
  3160                           ; Switch size 1, requested type "space"
  3161                           ; Number of cases is 5, Range of values is 0 to 4
  3162                           ; switch strategies available:
  3163                           ; Name         Instructions Cycles
  3164                           ; simple_byte           16     9 (average)
  3165                           ;	Chosen strategy is simple_byte
  3166  002D3C  0A00               	xorlw	0	; case 0
  3167  002D3E  B4D8               	btfsc	status,2,c
  3168  002D40  D7ED               	goto	l392
  3169  002D42  0A01               	xorlw	1	; case 1
  3170  002D44  B4D8               	btfsc	status,2,c
  3171  002D46  D7ED               	goto	l394
  3172  002D48  0A03               	xorlw	3	; case 2
  3173  002D4A  B4D8               	btfsc	status,2,c
  3174  002D4C  D7ED               	goto	l395
  3175  002D4E  0A01               	xorlw	1	; case 3
  3176  002D50  B4D8               	btfsc	status,2,c
  3177  002D52  D7ED               	goto	l396
  3178  002D54  0A07               	xorlw	7	; case 4
  3179  002D56  B4D8               	btfsc	status,2,c
  3180  002D58  D7ED               	goto	l397
  3181  002D5A                     l398:
  3182  002D5A  0012               	return	
  3183  002D5C                     __end_of_ColourNone:
  3184                           	opt stack 0
  3185                           tblptru	equ	0xFF8
  3186                           tblptrh	equ	0xFF7
  3187                           tblptrl	equ	0xFF6
  3188                           tablat	equ	0xFF5
  3189                           intcon	equ	0xFF2
  3190                           postinc0	equ	0xFEE
  3191                           wreg	equ	0xFE8
  3192                           postdec1	equ	0xFE5
  3193                           fsr1l	equ	0xFE1
  3194                           indf2	equ	0xFDF
  3195                           fsr2h	equ	0xFDA
  3196                           fsr2l	equ	0xFD9
  3197                           status	equ	0xFD8
  3198                           
  3199 ;; *************** function _GetSequence *****************
  3200 ;; Defined at:
  3201 ;;		line 84 in file "source/Model.c"
  3202 ;; Parameters:    Size  Location     Type
  3203 ;;  theKeyId        1   31[COMRAM] unsigned char 
  3204 ;; Auto vars:     Size  Location     Type
  3205 ;;  ReturnedSequ    1   32[COMRAM] volatile enum E180
  3206 ;; Return value:  Size  Location     Type
  3207 ;;                  1    wreg      enum E196
  3208 ;; Registers used:
  3209 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3210 ;; Tracked objects:
  3211 ;;		On entry : 0/0
  3212 ;;		On exit  : 0/0
  3213 ;;		Unchanged: 0/0
  3214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3215 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3216 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3217 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3218 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3219 ;;Total ram usage:        2 bytes
  3220 ;; Hardware stack levels used:    1
  3221 ;; Hardware stack levels required when called:    2
  3222 ;; This function calls:
  3223 ;;		Nothing
  3224 ;; This function is called by:
  3225 ;;		_IlluminateButton
  3226 ;; This function uses a non-reentrant model
  3227 ;;
  3228                           
  3229                           	psect	text15
  3230  002980                     __ptext15:
  3231                           	opt stack 0
  3232  002980                     _GetSequence:
  3233                           	opt stack 25
  3234                           
  3235                           ;Model.c: 85: volatile t_Sequences ReturnedSequence = 1;
  3236                           
  3237                           ;incstack = 0
  3238                           ;incstack = 0
  3239  002980  0E01               	movlw	1
  3240  002982  6E21               	movwf	GetSequence@ReturnedSequence,c	;volatile
  3241                           
  3242                           ;Model.c: 87: switch ( m_Keys[ theKeyId ].ButtonState )
  3243  002984  D01D               	goto	l4180
  3244  002986                     l4170:
  3245                           
  3246                           ;Model.c: 90: ReturnedSequence = m_Keys[ theKeyId ].SequenceIdPressedNo;
  3247  002986  5020               	movf	GetSequence@theKeyId,w,c
  3248  002988  0D11               	mullw	17
  3249  00298A  0E0B               	movlw	11
  3250  00298C  D00B               	goto	L11
  3251  00298E                     l4172:
  3252                           
  3253                           ; BSR set to: 0
  3254                           ;Model.c: 93: ReturnedSequence = m_Keys[ theKeyId ].SequenceIdPressedYes;
  3255  00298E  5020               	movf	GetSequence@theKeyId,w,c
  3256  002990  0D11               	mullw	17
  3257  002992  0E0C               	movlw	12
  3258  002994  D007               	goto	L11
  3259  002996                     l4174:
  3260                           
  3261                           ; BSR set to: 0
  3262                           ;Model.c: 96: ReturnedSequence = m_Keys[ theKeyId ].SequenceIdBeingServedNo;
  3263  002996  5020               	movf	GetSequence@theKeyId,w,c
  3264  002998  0D11               	mullw	17
  3265  00299A  0E0D               	movlw	13
  3266  00299C  D003               	goto	L11
  3267  00299E                     l4176:
  3268                           
  3269                           ; BSR set to: 0
  3270                           ;Model.c: 99: ReturnedSequence = m_Keys[ theKeyId ].SequenceIdBeingServedYes;
  3271  00299E  5020               	movf	GetSequence@theKeyId,w,c
  3272  0029A0  0D11               	mullw	17
  3273  0029A2  0E0E               	movlw	14
  3274  0029A4                     L11:
  3275  0029A4  26F3               	addwf	prodl,f,c
  3276  0029A6  0E00               	movlw	0
  3277  0029A8  22F4               	addwfc	prodh,f,c
  3278  0029AA  0100               	movlb	0	; () banked
  3279  0029AC  0E63               	movlw	low _m_Keys	;volatile
  3280  0029AE  24F3               	addwf	prodl,w,c
  3281  0029B0  6ED9               	movwf	fsr2l,c
  3282  0029B2  0100               	movlb	0	; () banked
  3283  0029B4  0E00               	movlw	high _m_Keys	;volatile
  3284  0029B6  20F4               	addwfc	prodh,w,c
  3285  0029B8  6EDA               	movwf	fsr2h,c
  3286  0029BA  50DF               	movf	indf2,w,c
  3287  0029BC  6E21               	movwf	GetSequence@ReturnedSequence,c	;volatile
  3288                           
  3289                           ;Model.c: 100: break;
  3290  0029BE  D017               	goto	l4182
  3291  0029C0                     l4180:
  3292  0029C0  5020               	movf	GetSequence@theKeyId,w,c
  3293  0029C2  0D11               	mullw	17
  3294  0029C4  0100               	movlb	0	; () banked
  3295  0029C6  0E63               	movlw	low _m_Keys	;volatile
  3296  0029C8  24F3               	addwf	prodl,w,c
  3297  0029CA  6ED9               	movwf	fsr2l,c
  3298  0029CC  0100               	movlb	0	; () banked
  3299  0029CE  0E00               	movlw	high _m_Keys	;volatile
  3300  0029D0  20F4               	addwfc	prodh,w,c
  3301  0029D2  6EDA               	movwf	fsr2h,c
  3302  0029D4  50DF               	movf	indf2,w,c
  3303                           
  3304                           ; Switch size 1, requested type "space"
  3305                           ; Number of cases is 4, Range of values is 1 to 4
  3306                           ; switch strategies available:
  3307                           ; Name         Instructions Cycles
  3308                           ; simple_byte           13     7 (average)
  3309                           ;	Chosen strategy is simple_byte
  3310  0029D6  0A01               	xorlw	1	; case 1
  3311  0029D8  B4D8               	btfsc	status,2,c
  3312  0029DA  D7D5               	goto	l4170
  3313  0029DC  0A03               	xorlw	3	; case 2
  3314  0029DE  B4D8               	btfsc	status,2,c
  3315  0029E0  D7D6               	goto	l4172
  3316  0029E2  0A01               	xorlw	1	; case 3
  3317  0029E4  B4D8               	btfsc	status,2,c
  3318  0029E6  D7D7               	goto	l4174
  3319  0029E8  0A07               	xorlw	7	; case 4
  3320  0029EA  B4D8               	btfsc	status,2,c
  3321  0029EC  D7D8               	goto	l4176
  3322  0029EE                     l4182:
  3323                           
  3324                           ; BSR set to: 0
  3325                           ;Model.c: 103: return ReturnedSequence;
  3326  0029EE  5021               	movf	GetSequence@ReturnedSequence,w,c	;volatile
  3327                           
  3328                           ; BSR set to: 0
  3329                           
  3330                           ; BSR set to: 0
  3331  0029F0  0012               	return	
  3332  0029F2                     __end_of_GetSequence:
  3333                           	opt stack 0
  3334                           tblptru	equ	0xFF8
  3335                           tblptrh	equ	0xFF7
  3336                           tblptrl	equ	0xFF6
  3337                           tablat	equ	0xFF5
  3338                           prodh	equ	0xFF4
  3339                           prodl	equ	0xFF3
  3340                           intcon	equ	0xFF2
  3341                           postinc0	equ	0xFEE
  3342                           wreg	equ	0xFE8
  3343                           postdec1	equ	0xFE5
  3344                           fsr1l	equ	0xFE1
  3345                           indf2	equ	0xFDF
  3346                           fsr2h	equ	0xFDA
  3347                           fsr2l	equ	0xFD9
  3348                           status	equ	0xFD8
  3349                           
  3350 ;; *************** function _GetSequenceState *****************
  3351 ;; Defined at:
  3352 ;;		line 73 in file "source/Model.c"
  3353 ;; Parameters:    Size  Location     Type
  3354 ;;  theKeyId        1   31[COMRAM] unsigned char 
  3355 ;; Auto vars:     Size  Location     Type
  3356 ;;		None
  3357 ;; Return value:  Size  Location     Type
  3358 ;;                  2   31[COMRAM] PTR volatile unsigned ch
  3359 ;; Registers used:
  3360 ;;		wreg, status,2, status,0, prodl, prodh
  3361 ;; Tracked objects:
  3362 ;;		On entry : 0/0
  3363 ;;		On exit  : 0/0
  3364 ;;		Unchanged: 0/0
  3365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3366 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3367 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3368 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3369 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3370 ;;Total ram usage:        2 bytes
  3371 ;; Hardware stack levels used:    1
  3372 ;; Hardware stack levels required when called:    2
  3373 ;; This function calls:
  3374 ;;		Nothing
  3375 ;; This function is called by:
  3376 ;;		_IlluminateButton
  3377 ;; This function uses a non-reentrant model
  3378 ;;
  3379                           
  3380                           	psect	text16
  3381  002E24                     __ptext16:
  3382                           	opt stack 0
  3383  002E24                     _GetSequenceState:
  3384                           	opt stack 25
  3385                           
  3386                           ;Model.c: 74: return &m_Keys[ theKeyId ].SequenceState;
  3387                           
  3388                           ; BSR set to: 0
  3389                           ;incstack = 0
  3390                           ;incstack = 0
  3391  002E24  5020               	movf	GetSequenceState@theKeyId,w,c
  3392  002E26  0D11               	mullw	17
  3393  002E28  0E0F               	movlw	15
  3394  002E2A  26F3               	addwf	prodl,f,c
  3395  002E2C  0E00               	movlw	0
  3396  002E2E  22F4               	addwfc	prodh,f,c
  3397  002E30  0100               	movlb	0	; () banked
  3398  002E32  0E63               	movlw	low _m_Keys	;volatile
  3399  002E34  24F3               	addwf	prodl,w,c
  3400  002E36  6E20               	movwf	?_GetSequenceState,c
  3401  002E38  0100               	movlb	0	; () banked
  3402  002E3A  0E00               	movlw	high _m_Keys	;volatile
  3403  002E3C  20F4               	addwfc	prodh,w,c
  3404  002E3E  6E21               	movwf	?_GetSequenceState+1,c
  3405                           
  3406                           ; BSR set to: 0
  3407                           
  3408                           ; BSR set to: 0
  3409  002E40  0012               	return	
  3410  002E42                     __end_of_GetSequenceState:
  3411                           	opt stack 0
  3412                           tblptru	equ	0xFF8
  3413                           tblptrh	equ	0xFF7
  3414                           tblptrl	equ	0xFF6
  3415                           tablat	equ	0xFF5
  3416                           prodh	equ	0xFF4
  3417                           prodl	equ	0xFF3
  3418                           intcon	equ	0xFF2
  3419                           postinc0	equ	0xFEE
  3420                           wreg	equ	0xFE8
  3421                           postdec1	equ	0xFE5
  3422                           fsr1l	equ	0xFE1
  3423                           indf2	equ	0xFDF
  3424                           fsr2h	equ	0xFDA
  3425                           fsr2l	equ	0xFD9
  3426                           status	equ	0xFD8
  3427                           
  3428 ;; *************** function _GetKeyTimer *****************
  3429 ;; Defined at:
  3430 ;;		line 63 in file "source/Model.c"
  3431 ;; Parameters:    Size  Location     Type
  3432 ;;  theKeyId        1   31[COMRAM] unsigned char 
  3433 ;; Auto vars:     Size  Location     Type
  3434 ;;		None
  3435 ;; Return value:  Size  Location     Type
  3436 ;;                  2   31[COMRAM] PTR volatile struct ATim
  3437 ;; Registers used:
  3438 ;;		wreg, status,2, status,0, prodl, prodh
  3439 ;; Tracked objects:
  3440 ;;		On entry : 0/0
  3441 ;;		On exit  : 0/0
  3442 ;;		Unchanged: 0/0
  3443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3444 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3445 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3446 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3447 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3448 ;;Total ram usage:        2 bytes
  3449 ;; Hardware stack levels used:    1
  3450 ;; Hardware stack levels required when called:    2
  3451 ;; This function calls:
  3452 ;;		Nothing
  3453 ;; This function is called by:
  3454 ;;		_IlluminateButton
  3455 ;; This function uses a non-reentrant model
  3456 ;;
  3457                           
  3458                           	psect	text17
  3459  002E42                     __ptext17:
  3460                           	opt stack 0
  3461  002E42                     _GetKeyTimer:
  3462                           	opt stack 25
  3463                           
  3464                           ;Model.c: 64: return &m_Keys[ theKeyId ].NextActionTimer;
  3465                           
  3466                           ; BSR set to: 0
  3467                           ;incstack = 0
  3468                           ;incstack = 0
  3469  002E42  5020               	movf	GetKeyTimer@theKeyId,w,c
  3470  002E44  0D11               	mullw	17
  3471  002E46  0E06               	movlw	6
  3472  002E48  26F3               	addwf	prodl,f,c
  3473  002E4A  0E00               	movlw	0
  3474  002E4C  22F4               	addwfc	prodh,f,c
  3475  002E4E  0100               	movlb	0	; () banked
  3476  002E50  0E63               	movlw	low _m_Keys	;volatile
  3477  002E52  24F3               	addwf	prodl,w,c
  3478  002E54  6E20               	movwf	?_GetKeyTimer,c
  3479  002E56  0100               	movlb	0	; () banked
  3480  002E58  0E00               	movlw	high _m_Keys	;volatile
  3481  002E5A  20F4               	addwfc	prodh,w,c
  3482  002E5C  6E21               	movwf	?_GetKeyTimer+1,c
  3483                           
  3484                           ; BSR set to: 0
  3485                           
  3486                           ; BSR set to: 0
  3487  002E5E  0012               	return	
  3488  002E60                     __end_of_GetKeyTimer:
  3489                           	opt stack 0
  3490                           tblptru	equ	0xFF8
  3491                           tblptrh	equ	0xFF7
  3492                           tblptrl	equ	0xFF6
  3493                           tablat	equ	0xFF5
  3494                           prodh	equ	0xFF4
  3495                           prodl	equ	0xFF3
  3496                           intcon	equ	0xFF2
  3497                           postinc0	equ	0xFEE
  3498                           wreg	equ	0xFE8
  3499                           postdec1	equ	0xFE5
  3500                           fsr1l	equ	0xFE1
  3501                           indf2	equ	0xFDF
  3502                           fsr2h	equ	0xFDA
  3503                           fsr2l	equ	0xFD9
  3504                           status	equ	0xFD8
  3505                           
  3506 ;; *************** function _InputTask *****************
  3507 ;; Defined at:
  3508 ;;		line 20 in file "source/InputTask.c"
  3509 ;; Parameters:    Size  Location     Type
  3510 ;;		None
  3511 ;; Auto vars:     Size  Location     Type
  3512 ;;  i               1    0[BANK0 ] unsigned char 
  3513 ;; Return value:  Size  Location     Type
  3514 ;;		None               void
  3515 ;; Registers used:
  3516 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  3517 ;; Tracked objects:
  3518 ;;		On entry : 0/0
  3519 ;;		On exit  : 0/0
  3520 ;;		Unchanged: 0/0
  3521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3522 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3523 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3524 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3525 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3526 ;;Total ram usage:        2 bytes
  3527 ;; Hardware stack levels used:    1
  3528 ;; Hardware stack levels required when called:    7
  3529 ;; This function calls:
  3530 ;;		_MonitorButton
  3531 ;; This function is called by:
  3532 ;;		_TaskManager
  3533 ;; This function uses a non-reentrant model
  3534 ;;
  3535                           
  3536                           	psect	text18
  3537  002DD2                     __ptext18:
  3538                           	opt stack 0
  3539  002DD2                     _InputTask:
  3540                           	opt stack 22
  3541                           
  3542                           ;InputTask.c: 23: for( uint8_t i = 0; i < KeyCount; i++ )
  3543                           
  3544                           ; BSR set to: 0
  3545                           ;incstack = 0
  3546                           ;incstack = 0
  3547  002DD2  6E31               	movwf	??_InputTask& (0+255),c
  3548  002DD4  0E00               	movlw	0
  3549  002DD6  0100               	movlb	0	; () banked
  3550  002DD8  0100               	movlb	0	; () banked
  3551  002DDA  6FC7               	movwf	InputTask@i& (0+255),b
  3552  002DDC  5031               	movf	??_InputTask& (0+255),w,c
  3553  002DDE                     
  3554                           ; BSR set to: 0
  3555  002DDE  0E0B               	movlw	low _KeyCount
  3556  002DE0  6EF6               	movwf	tblptrl,c
  3557  002DE2  0E0D               	movlw	high _KeyCount
  3558  002DE4  6EF7               	movwf	tblptrh,c
  3559  002DE6  0008               	tblrd		*
  3560  002DE8  50F5               	movf	tablat,w,c
  3561  002DEA  0100               	movlb	0	; () banked
  3562  002DEC  0100               	movlb	0	; () banked
  3563  002DEE  5DC7               	subwf	InputTask@i& (0+255),w,b
  3564  002DF0  B0D8               	btfsc	status,0,c
  3565  002DF2  D008               	goto	l279
  3566                           
  3567                           ; BSR set to: 0
  3568                           ;InputTask.c: 24: {
  3569                           ;InputTask.c: 25: MonitorButton( i );
  3570                           
  3571                           ; BSR set to: 0
  3572                           
  3573                           ; BSR set to: 0
  3574  002DF4  C0C7  F02B         	movff	InputTask@i,?_MonitorButton
  3575  002DF8  EC2D  F012         	call	_MonitorButton	;wreg free
  3576  002DFC  0100               	movlb	0	; () banked
  3577  002DFE  0100               	movlb	0	; () banked
  3578  002E00  2BC7               	incf	InputTask@i& (0+255),f,b
  3579  002E02  D7ED               	goto	L12
  3580  002E04                     l279:
  3581                           
  3582                           ; BSR set to: 0
  3583  002E04  0012               	return	
  3584  002E06                     __end_of_InputTask:
  3585                           	opt stack 0
  3586                           tblptru	equ	0xFF8
  3587                           tblptrh	equ	0xFF7
  3588                           tblptrl	equ	0xFF6
  3589                           tablat	equ	0xFF5
  3590                           prodh	equ	0xFF4
  3591                           prodl	equ	0xFF3
  3592                           intcon	equ	0xFF2
  3593                           postinc0	equ	0xFEE
  3594                           wreg	equ	0xFE8
  3595                           postdec1	equ	0xFE5
  3596                           fsr1l	equ	0xFE1
  3597                           indf2	equ	0xFDF
  3598                           fsr2h	equ	0xFDA
  3599                           fsr2l	equ	0xFD9
  3600                           status	equ	0xFD8
  3601                           
  3602 ;; *************** function _MonitorButton *****************
  3603 ;; Defined at:
  3604 ;;		line 69 in file "source/InputTask.c"
  3605 ;; Parameters:    Size  Location     Type
  3606 ;;  theId           1   42[COMRAM] unsigned char 
  3607 ;; Auto vars:     Size  Location     Type
  3608 ;;  KeyTimer        2   46[COMRAM] PTR volatile struct ATim
  3609 ;;		 -> m_Keys(85), 
  3610 ;; Return value:  Size  Location     Type
  3611 ;;		None               void
  3612 ;; Registers used:
  3613 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3614 ;; Tracked objects:
  3615 ;;		On entry : 0/0
  3616 ;;		On exit  : 0/0
  3617 ;;		Unchanged: 0/0
  3618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3619 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3620 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3621 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3622 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3623 ;;Total ram usage:        6 bytes
  3624 ;; Hardware stack levels used:    1
  3625 ;; Hardware stack levels required when called:    6
  3626 ;; This function calls:
  3627 ;;		_MaturedTimer
  3628 ;;		_CalculateFutureTime
  3629 ;;		_GetKeyState
  3630 ;;		_SetKeyState
  3631 ;;		_GetKeyInputTimer
  3632 ;;		_ButtonBeingPressed
  3633 ;; This function is called by:
  3634 ;;		_InputTask
  3635 ;; This function uses a non-reentrant model
  3636 ;;
  3637                           
  3638                           	psect	text19
  3639  00245A                     __ptext19:
  3640                           	opt stack 0
  3641  00245A                     _MonitorButton:
  3642                           	opt stack 22
  3643                           
  3644                           ;InputTask.c: 70: volatile t_ATime* KeyTimer = GetKeyInputTimer( theId );
  3645                           
  3646                           ; BSR set to: 0
  3647                           ;incstack = 0
  3648                           ;incstack = 0
  3649  00245A  C02B  F020         	movff	MonitorButton@theId,?_GetKeyInputTimer
  3650  00245E  EC30  F017         	call	_GetKeyInputTimer	;wreg free
  3651  002462  C020  F02F         	movff	?_GetKeyInputTimer,MonitorButton@KeyTimer
  3652  002466  C021  F030         	movff	?_GetKeyInputTimer+1,MonitorButton@KeyTimer+1
  3653                           
  3654                           ;InputTask.c: 72: switch ( GetKeyState( theId ) )
  3655  00246A  D044               	goto	l4094
  3656  00246C                     l4078:
  3657                           
  3658                           ;InputTask.c: 75: if ( ButtonBeingPressed( theId ) )
  3659  00246C  C02B  F020         	movff	MonitorButton@theId,?_ButtonBeingPressed
  3660  002470  ECDE  F015         	call	_ButtonBeingPressed	;wreg free
  3661  002474  0900               	iorlw	0
  3662  002476  B4D8               	btfsc	status,2,c
  3663  002478  D04A               	goto	l306
  3664                           
  3665                           ;InputTask.c: 76: {
  3666                           ;InputTask.c: 77: SetKeyState( theId, e_PressedYes );
  3667  00247A  C02B  F026         	movff	MonitorButton@theId,?_SetKeyState
  3668  00247E  6E2C               	movwf	??_MonitorButton& (0+255),c
  3669  002480  0E02               	movlw	2
  3670  002482  6E27               	movwf	?_SetKeyState+1,c
  3671  002484  502C               	movf	??_MonitorButton& (0+255),w,c
  3672  002486  EC3E  F010         	call	_SetKeyState	;wreg free
  3673                           
  3674                           ;InputTask.c: 78: CalculateFutureTime( KeyTimer, 0, 1, 0 );
  3675  00248A  C02F  F020         	movff	MonitorButton@KeyTimer,?_CalculateFutureTime
  3676  00248E  C030  F021         	movff	MonitorButton@KeyTimer+1,?_CalculateFutureTime+1
  3677  002492  6E2C               	movwf	??_MonitorButton& (0+255),c
  3678  002494  0E00               	movlw	0
  3679  002496  6E22               	movwf	?_CalculateFutureTime+2,c
  3680  002498  502C               	movf	??_MonitorButton& (0+255),w,c
  3681  00249A  6E2D               	movwf	(??_MonitorButton+1)& (0+255),c
  3682  00249C  0E01               	movlw	1
  3683  00249E  6E23               	movwf	?_CalculateFutureTime+3,c
  3684  0024A0  502D               	movf	(??_MonitorButton+1)& (0+255),w,c
  3685  0024A2  6E2E               	movwf	(??_MonitorButton+2)& (0+255),c
  3686  0024A4  0E00               	movlw	0
  3687  0024A6  6E24               	movwf	?_CalculateFutureTime+4,c
  3688  0024A8  502E               	movf	(??_MonitorButton+2)& (0+255),w,c
  3689  0024AA  EC45  F00A         	call	_CalculateFutureTime	;wreg free
  3690  0024AE  D02F               	goto	l306
  3691  0024B0                     l4084:
  3692                           
  3693                           ;InputTask.c: 83: if ( ButtonBeingPressed( theId ) )
  3694  0024B0  C02B  F020         	movff	MonitorButton@theId,?_ButtonBeingPressed
  3695  0024B4  ECDE  F015         	call	_ButtonBeingPressed	;wreg free
  3696  0024B8  0900               	iorlw	0
  3697  0024BA  B4D8               	btfsc	status,2,c
  3698  0024BC  D012               	goto	l4090
  3699                           
  3700                           ;InputTask.c: 84: {
  3701                           ;InputTask.c: 85: if ( MaturedTimer( KeyTimer ) )
  3702  0024BE  C02F  F020         	movff	MonitorButton@KeyTimer,?_MaturedTimer
  3703  0024C2  C030  F021         	movff	MonitorButton@KeyTimer+1,?_MaturedTimer+1
  3704  0024C6  EC61  F011         	call	_MaturedTimer	;wreg free
  3705  0024CA  0900               	iorlw	0
  3706  0024CC  B4D8               	btfsc	status,2,c
  3707  0024CE  D01F               	goto	l306
  3708                           
  3709                           ;InputTask.c: 86: {
  3710                           ;InputTask.c: 87: SetKeyState( theId, e_BeingServedNo );
  3711  0024D0  C02B  F026         	movff	MonitorButton@theId,?_SetKeyState
  3712  0024D4  6E2C               	movwf	??_MonitorButton& (0+255),c
  3713  0024D6  0E03               	movlw	3
  3714  0024D8  6E27               	movwf	?_SetKeyState+1,c
  3715  0024DA  502C               	movf	??_MonitorButton& (0+255),w,c
  3716  0024DC  EC3E  F010         	call	_SetKeyState	;wreg free
  3717  0024E0  D016               	goto	l306
  3718  0024E2                     l4090:
  3719                           
  3720                           ;InputTask.c: 90: else
  3721                           ;InputTask.c: 91: {
  3722                           ;InputTask.c: 93: SetKeyState( theId, e_PressedNo );
  3723  0024E2  C02B  F026         	movff	MonitorButton@theId,?_SetKeyState
  3724  0024E6  6E2C               	movwf	??_MonitorButton& (0+255),c
  3725  0024E8  0E01               	movlw	1
  3726  0024EA  6E27               	movwf	?_SetKeyState+1,c
  3727  0024EC  502C               	movf	??_MonitorButton& (0+255),w,c
  3728  0024EE  EC3E  F010         	call	_SetKeyState	;wreg free
  3729  0024F2  D00D               	goto	l306
  3730  0024F4                     l4094:
  3731  0024F4  C02B  F020         	movff	MonitorButton@theId,?_GetKeyState
  3732  0024F8  EC5D  F017         	call	_GetKeyState	;wreg free
  3733                           
  3734                           ; Switch size 1, requested type "space"
  3735                           ; Number of cases is 4, Range of values is 1 to 4
  3736                           ; switch strategies available:
  3737                           ; Name         Instructions Cycles
  3738                           ; simple_byte           13     7 (average)
  3739                           ;	Chosen strategy is simple_byte
  3740  0024FC  0A01               	xorlw	1	; case 1
  3741  0024FE  B4D8               	btfsc	status,2,c
  3742  002500  D7B5               	goto	l4078
  3743  002502  0A03               	xorlw	3	; case 2
  3744  002504  B4D8               	btfsc	status,2,c
  3745  002506  D7D4               	goto	l4084
  3746  002508  0A01               	xorlw	1	; case 3
  3747  00250A  A4D8               	btfss	status,2,c
  3748  00250C  0A07               	xorlw	7	; case 4
  3749  00250E                     l306:
  3750  00250E  0012               	return	
  3751  002510                     __end_of_MonitorButton:
  3752                           	opt stack 0
  3753                           tblptru	equ	0xFF8
  3754                           tblptrh	equ	0xFF7
  3755                           tblptrl	equ	0xFF6
  3756                           tablat	equ	0xFF5
  3757                           prodh	equ	0xFF4
  3758                           prodl	equ	0xFF3
  3759                           intcon	equ	0xFF2
  3760                           postinc0	equ	0xFEE
  3761                           wreg	equ	0xFE8
  3762                           postdec1	equ	0xFE5
  3763                           fsr1l	equ	0xFE1
  3764                           indf2	equ	0xFDF
  3765                           fsr2h	equ	0xFDA
  3766                           fsr2l	equ	0xFD9
  3767                           status	equ	0xFD8
  3768                           
  3769 ;; *************** function _ButtonBeingPressed *****************
  3770 ;; Defined at:
  3771 ;;		line 106 in file "source/InputTask.c"
  3772 ;; Parameters:    Size  Location     Type
  3773 ;;  theId           1   31[COMRAM] unsigned char 
  3774 ;; Auto vars:     Size  Location     Type
  3775 ;;  BeingPressed    1   33[COMRAM] unsigned char 
  3776 ;; Return value:  Size  Location     Type
  3777 ;;                  1    wreg      unsigned char 
  3778 ;; Registers used:
  3779 ;;		wreg, status,2, status,0
  3780 ;; Tracked objects:
  3781 ;;		On entry : 0/0
  3782 ;;		On exit  : 0/0
  3783 ;;		Unchanged: 0/0
  3784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3785 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3786 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3787 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3788 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3789 ;;Total ram usage:        3 bytes
  3790 ;; Hardware stack levels used:    1
  3791 ;; Hardware stack levels required when called:    2
  3792 ;; This function calls:
  3793 ;;		Nothing
  3794 ;; This function is called by:
  3795 ;;		_MonitorButton
  3796 ;; This function uses a non-reentrant model
  3797 ;;
  3798                           
  3799                           	psect	text20
  3800  002BBC                     __ptext20:
  3801                           	opt stack 0
  3802  002BBC                     _ButtonBeingPressed:
  3803                           	opt stack 25
  3804                           
  3805                           ;InputTask.c: 107: bool BeingPressed = 0;
  3806                           
  3807                           ;incstack = 0
  3808                           ;incstack = 0
  3809  002BBC  6E21               	movwf	??_ButtonBeingPressed& (0+255),c
  3810  002BBE  0E00               	movlw	0
  3811  002BC0  6E22               	movwf	ButtonBeingPressed@BeingPressed,c
  3812  002BC2  5021               	movf	??_ButtonBeingPressed& (0+255),w,c
  3813                           
  3814                           ;InputTask.c: 109: switch ( theId )
  3815  002BC4  D010               	goto	l4136
  3816  002BC6                     l310:
  3817                           
  3818                           ;InputTask.c: 112: if ( PORTAbits.RA0 == 0 )
  3819  002BC6  B080               	btfsc	3968,0,c	;volatile
  3820  002BC8  D01E               	goto	l4138
  3821  002BCA  D008               	goto	u3050
  3822  002BCC                     l313:
  3823                           
  3824                           ;InputTask.c: 119: if ( PORTAbits.RA3 == 0 )
  3825  002BCC  B680               	btfsc	3968,3,c	;volatile
  3826  002BCE  D01B               	goto	l4138
  3827  002BD0  D005               	goto	u3050
  3828  002BD2                     l315:
  3829                           
  3830                           ;InputTask.c: 126: if ( PORTAbits.RA7 == 0 )
  3831  002BD2  BE80               	btfsc	3968,7,c	;volatile
  3832  002BD4  D018               	goto	l4138
  3833  002BD6  D002               	goto	u3050
  3834  002BD8                     l318:
  3835                           
  3836                           ;InputTask.c: 140: if ( PORTBbits.RB4 == 0 )
  3837  002BD8  B881               	btfsc	3969,4,c	;volatile
  3838  002BDA  D015               	goto	l4138
  3839  002BDC                     u3050:
  3840                           
  3841                           ;InputTask.c: 141: {
  3842                           ;InputTask.c: 142: BeingPressed = 1;
  3843  002BDC  6E21               	movwf	??_ButtonBeingPressed& (0+255),c
  3844  002BDE  0E01               	movlw	1
  3845  002BE0  6E22               	movwf	ButtonBeingPressed@BeingPressed,c
  3846  002BE2  5021               	movf	??_ButtonBeingPressed& (0+255),w,c
  3847  002BE4  D010               	goto	l4138
  3848  002BE6                     l4136:
  3849  002BE6  5020               	movf	ButtonBeingPressed@theId,w,c
  3850                           
  3851                           ; Switch size 1, requested type "space"
  3852                           ; Number of cases is 5, Range of values is 0 to 4
  3853                           ; switch strategies available:
  3854                           ; Name         Instructions Cycles
  3855                           ; simple_byte           16     9 (average)
  3856                           ;	Chosen strategy is simple_byte
  3857  002BE8  0A00               	xorlw	0	; case 0
  3858  002BEA  B4D8               	btfsc	status,2,c
  3859  002BEC  D7EC               	goto	l310
  3860  002BEE  0A01               	xorlw	1	; case 1
  3861  002BF0  B4D8               	btfsc	status,2,c
  3862  002BF2  D7EC               	goto	l313
  3863  002BF4  0A03               	xorlw	3	; case 2
  3864  002BF6  B4D8               	btfsc	status,2,c
  3865  002BF8  D7EC               	goto	l315
  3866  002BFA  0A01               	xorlw	1	; case 3
  3867  002BFC  B4D8               	btfsc	status,2,c
  3868  002BFE  D003               	goto	l4138
  3869  002C00  0A07               	xorlw	7	; case 4
  3870  002C02  B4D8               	btfsc	status,2,c
  3871  002C04  D7E9               	goto	l318
  3872  002C06                     l4138:
  3873                           
  3874                           ;InputTask.c: 147: return BeingPressed;
  3875  002C06  5022               	movf	ButtonBeingPressed@BeingPressed,w,c
  3876  002C08  0012               	return	
  3877  002C0A                     __end_of_ButtonBeingPressed:
  3878                           	opt stack 0
  3879                           tblptru	equ	0xFF8
  3880                           tblptrh	equ	0xFF7
  3881                           tblptrl	equ	0xFF6
  3882                           tablat	equ	0xFF5
  3883                           prodh	equ	0xFF4
  3884                           prodl	equ	0xFF3
  3885                           intcon	equ	0xFF2
  3886                           postinc0	equ	0xFEE
  3887                           wreg	equ	0xFE8
  3888                           postdec1	equ	0xFE5
  3889                           fsr1l	equ	0xFE1
  3890                           indf2	equ	0xFDF
  3891                           fsr2h	equ	0xFDA
  3892                           fsr2l	equ	0xFD9
  3893                           status	equ	0xFD8
  3894                           
  3895 ;; *************** function _GetKeyInputTimer *****************
  3896 ;; Defined at:
  3897 ;;		line 68 in file "source/Model.c"
  3898 ;; Parameters:    Size  Location     Type
  3899 ;;  theKeyId        1   31[COMRAM] unsigned char 
  3900 ;; Auto vars:     Size  Location     Type
  3901 ;;		None
  3902 ;; Return value:  Size  Location     Type
  3903 ;;                  2   31[COMRAM] PTR volatile struct ATim
  3904 ;; Registers used:
  3905 ;;		wreg, status,2, status,0, prodl, prodh
  3906 ;; Tracked objects:
  3907 ;;		On entry : 0/0
  3908 ;;		On exit  : 0/0
  3909 ;;		Unchanged: 0/0
  3910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3911 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3912 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3913 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3914 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3915 ;;Total ram usage:        2 bytes
  3916 ;; Hardware stack levels used:    1
  3917 ;; Hardware stack levels required when called:    2
  3918 ;; This function calls:
  3919 ;;		Nothing
  3920 ;; This function is called by:
  3921 ;;		_MonitorButton
  3922 ;; This function uses a non-reentrant model
  3923 ;;
  3924                           
  3925                           	psect	text21
  3926  002E60                     __ptext21:
  3927                           	opt stack 0
  3928  002E60                     _GetKeyInputTimer:
  3929                           	opt stack 25
  3930                           
  3931                           ;Model.c: 69: return &m_Keys[ theKeyId ].InputTimer;
  3932                           
  3933                           ;incstack = 0
  3934                           ;incstack = 0
  3935  002E60  5020               	movf	GetKeyInputTimer@theKeyId,w,c
  3936  002E62  0D11               	mullw	17
  3937  002E64  0E01               	movlw	1
  3938  002E66  26F3               	addwf	prodl,f,c
  3939  002E68  0E00               	movlw	0
  3940  002E6A  22F4               	addwfc	prodh,f,c
  3941  002E6C  0100               	movlb	0	; () banked
  3942  002E6E  0E63               	movlw	low _m_Keys	;volatile
  3943  002E70  24F3               	addwf	prodl,w,c
  3944  002E72  6E20               	movwf	?_GetKeyInputTimer,c
  3945  002E74  0100               	movlb	0	; () banked
  3946  002E76  0E00               	movlw	high _m_Keys	;volatile
  3947  002E78  20F4               	addwfc	prodh,w,c
  3948  002E7A  6E21               	movwf	?_GetKeyInputTimer+1,c
  3949                           
  3950                           ; BSR set to: 0
  3951                           
  3952                           ; BSR set to: 0
  3953  002E7C  0012               	return	
  3954  002E7E                     __end_of_GetKeyInputTimer:
  3955                           	opt stack 0
  3956                           tblptru	equ	0xFF8
  3957                           tblptrh	equ	0xFF7
  3958                           tblptrl	equ	0xFF6
  3959                           tablat	equ	0xFF5
  3960                           prodh	equ	0xFF4
  3961                           prodl	equ	0xFF3
  3962                           intcon	equ	0xFF2
  3963                           postinc0	equ	0xFEE
  3964                           wreg	equ	0xFE8
  3965                           postdec1	equ	0xFE5
  3966                           fsr1l	equ	0xFE1
  3967                           indf2	equ	0xFDF
  3968                           fsr2h	equ	0xFDA
  3969                           fsr2l	equ	0xFD9
  3970                           status	equ	0xFD8
  3971                           
  3972 ;; *************** function _DataCommsTask *****************
  3973 ;; Defined at:
  3974 ;;		line 75 in file "source/DataCommsTask.c"
  3975 ;; Parameters:    Size  Location     Type
  3976 ;;		None
  3977 ;; Auto vars:     Size  Location     Type
  3978 ;;		None
  3979 ;; Return value:  Size  Location     Type
  3980 ;;                  2    8[COMRAM] int 
  3981 ;; Registers used:
  3982 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  3983 ;; Tracked objects:
  3984 ;;		On entry : 0/0
  3985 ;;		On exit  : 0/0
  3986 ;;		Unchanged: 0/0
  3987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3988 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3989 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3990 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3991 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3992 ;;Total ram usage:        0 bytes
  3993 ;; Hardware stack levels used:    1
  3994 ;; Hardware stack levels required when called:    7
  3995 ;; This function calls:
  3996 ;;		_CanCommsTask
  3997 ;;		_UartCommsTask
  3998 ;; This function is called by:
  3999 ;;		_TaskManager
  4000 ;; This function uses a non-reentrant model
  4001 ;;
  4002                           
  4003                           	psect	text22
  4004  002F4C                     __ptext22:
  4005                           	opt stack 0
  4006  002F4C                     _DataCommsTask:
  4007                           	opt stack 22
  4008                           
  4009                           ;DataCommsTask.c: 76: CanCommsTask();
  4010                           
  4011                           ; BSR set to: 0
  4012                           ;incstack = 0
  4013                           ;incstack = 0
  4014  002F4C  EC88  F008         	call	_CanCommsTask	;wreg free
  4015                           
  4016                           ;DataCommsTask.c: 77: UartCommsTask();
  4017  002F50  ECE6  F010         	call	_UartCommsTask	;wreg free
  4018                           
  4019                           ;DataCommsTask.c: 78: return 0;
  4020                           ;	Return value of _DataCommsTask is never used
  4021  002F54  0012               	return	
  4022  002F56                     __end_of_DataCommsTask:
  4023                           	opt stack 0
  4024                           tblptru	equ	0xFF8
  4025                           tblptrh	equ	0xFF7
  4026                           tblptrl	equ	0xFF6
  4027                           tablat	equ	0xFF5
  4028                           prodh	equ	0xFF4
  4029                           prodl	equ	0xFF3
  4030                           intcon	equ	0xFF2
  4031                           postinc0	equ	0xFEE
  4032                           wreg	equ	0xFE8
  4033                           postdec1	equ	0xFE5
  4034                           fsr1l	equ	0xFE1
  4035                           indf2	equ	0xFDF
  4036                           fsr2h	equ	0xFDA
  4037                           fsr2l	equ	0xFD9
  4038                           status	equ	0xFD8
  4039                           
  4040 ;; *************** function _UartCommsTask *****************
  4041 ;; Defined at:
  4042 ;;		line 207 in file "source/DataCommsTask.c"
  4043 ;; Parameters:    Size  Location     Type
  4044 ;;		None
  4045 ;; Auto vars:     Size  Location     Type
  4046 ;;  HeadOfQueue     1   42[COMRAM] volatile unsigned char 
  4047 ;; Return value:  Size  Location     Type
  4048 ;;		None               void
  4049 ;; Registers used:
  4050 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  4051 ;; Tracked objects:
  4052 ;;		On entry : 0/0
  4053 ;;		On exit  : 0/0
  4054 ;;		Unchanged: 0/0
  4055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4056 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4057 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4058 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4059 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4060 ;;Total ram usage:        2 bytes
  4061 ;; Hardware stack levels used:    1
  4062 ;; Hardware stack levels required when called:    6
  4063 ;; This function calls:
  4064 ;;		_GetSerialChar
  4065 ;;		_putsUSART
  4066 ;;		_GetHeadOfQueue
  4067 ;;		_GetKeyState
  4068 ;;		_SetKeyState
  4069 ;; This function is called by:
  4070 ;;		_DataCommsTask
  4071 ;; This function uses a non-reentrant model
  4072 ;;
  4073                           
  4074                           	psect	text23
  4075  0021CC                     __ptext23:
  4076                           	opt stack 0
  4077  0021CC                     _UartCommsTask:
  4078                           	opt stack 22
  4079                           
  4080                           ;DataCommsTask.c: 208: static CommsStateMachine DataCommsReadState = e_DataComsInit;
  4081                           ;DataCommsTask.c: 210: static char Msg = 0;
  4082                           ;DataCommsTask.c: 212: volatile uint8_t HeadOfQueue;
  4083                           ;DataCommsTask.c: 214: switch ( DataCommsReadState )
  4084                           
  4085                           ;incstack = 0
  4086                           ;incstack = 0
  4087  0021CC  D069               	goto	l3718
  4088  0021CE                     l3676:
  4089                           
  4090                           ;DataCommsTask.c: 218: putsUSART( InitText );
  4091  0021CE  0101               	movlb	1	; () banked
  4092  0021D0  0E01               	movlw	high _InitText
  4093  0021D2  6E22               	movwf	?_putsUSART+1,c
  4094  0021D4  0101               	movlb	1	; () banked
  4095  0021D6  0E58               	movlw	low _InitText
  4096  0021D8  6E21               	movwf	?_putsUSART,c
  4097  0021DA  ECB3  F015         	call	_putsUSART	;wreg free
  4098  0021DE  D05B               	goto	l3714
  4099  0021E0                     l3680:
  4100                           
  4101                           ;DataCommsTask.c: 223: if( GetSerialChar() == StartChar )
  4102  0021E0  0E0E               	movlw	low _StartChar
  4103  0021E2  6EF6               	movwf	tblptrl,c
  4104  0021E4  0E0D               	movlw	high _StartChar
  4105  0021E6  6EF7               	movwf	tblptrh,c
  4106  0021E8  0008               	tblrd		*
  4107  0021EA  CFF5 F02A          	movff	tablat,??_UartCommsTask
  4108  0021EE  EC3F  F017         	call	_GetSerialChar	;wreg free
  4109  0021F2  182A               	xorwf	??_UartCommsTask,w,c
  4110  0021F4  A4D8               	btfss	status,2,c
  4111  0021F6  D064               	goto	l150
  4112  0021F8  D04E               	goto	l3714
  4113  0021FA                     l3684:
  4114                           
  4115                           ;DataCommsTask.c: 231: Msg = GetSerialChar();
  4116  0021FA  EC3F  F017         	call	_GetSerialChar	;wreg free
  4117  0021FE  6E3B               	movwf	UartCommsTask@Msg,c
  4118                           
  4119                           ;DataCommsTask.c: 233: switch( Msg )
  4120  002200  D006               	goto	l3690
  4121  002202                     l3686:
  4122                           
  4123                           ;DataCommsTask.c: 242: DataCommsReadState = e_ReadStartChar;
  4124  002202  6E2A               	movwf	??_UartCommsTask& (0+255),c
  4125  002204  0E01               	movlw	1
  4126  002206  D049               	goto	L16
  4127  002208                     l3688:
  4128                           
  4129                           ;DataCommsTask.c: 247: DataCommsReadState = e_DoMsgCommand;
  4130  002208  6E2A               	movwf	??_UartCommsTask& (0+255),c
  4131  00220A  0E04               	movlw	4
  4132  00220C  D046               	goto	L16
  4133  00220E                     l3690:
  4134  00220E  503B               	movf	UartCommsTask@Msg,w,c
  4135                           
  4136                           ; Switch size 1, requested type "space"
  4137                           ; Number of cases is 2, Range of values is 0 to 3
  4138                           ; switch strategies available:
  4139                           ; Name         Instructions Cycles
  4140                           ; simple_byte            7     4 (average)
  4141                           ;	Chosen strategy is simple_byte
  4142  002210  0A00               	xorlw	0	; case 0
  4143  002212  B4D8               	btfsc	status,2,c
  4144  002214  D055               	goto	l150
  4145  002216  0A03               	xorlw	3	; case 3
  4146  002218  B4D8               	btfsc	status,2,c
  4147  00221A  D7F3               	goto	l3686
  4148  00221C  D7F5               	goto	l3688
  4149  00221E                     l3694:
  4150  00221E  EC3F  F017         	call	_GetSerialChar	;wreg free
  4151  002222  D7EF               	goto	l3686
  4152  002224                     l3696:
  4153                           
  4154                           ;DataCommsTask.c: 267: HeadOfQueue = GetHeadOfQueue();
  4155  002224  ECAB  F017         	call	_GetHeadOfQueue	;wreg free
  4156  002228  6E2B               	movwf	UartCommsTask@HeadOfQueue,c	;volatile
  4157                           
  4158                           ;DataCommsTask.c: 269: if ( HeadOfQueue != KeyCount )
  4159  00222A  0E0B               	movlw	low _KeyCount
  4160  00222C  6EF6               	movwf	tblptrl,c
  4161  00222E  0E0D               	movlw	high _KeyCount
  4162  002230  6EF7               	movwf	tblptrh,c
  4163  002232  0008               	tblrd		*
  4164  002234  CFF5 F02A          	movff	tablat,??_UartCommsTask
  4165  002238  502B               	movf	UartCommsTask@HeadOfQueue,w,c	;volatile
  4166  00223A  182A               	xorwf	??_UartCommsTask,w,c
  4167  00223C  B4D8               	btfsc	status,2,c
  4168  00223E  D02B               	goto	l3714
  4169                           
  4170                           ;DataCommsTask.c: 270: {
  4171                           ;DataCommsTask.c: 271: if ( GetKeyState( HeadOfQueue ) == e_BeingServedYes )
  4172  002240  C02B  F020         	movff	UartCommsTask@HeadOfQueue,?_GetKeyState	;volatile
  4173  002244  EC5D  F017         	call	_GetKeyState	;wreg free
  4174  002248  0A04               	xorlw	4
  4175  00224A  A4D8               	btfss	status,2,c
  4176  00224C  D008               	goto	l3704
  4177                           
  4178                           ;DataCommsTask.c: 272: {
  4179                           ;DataCommsTask.c: 273: SetKeyState( HeadOfQueue, e_PressedNo );
  4180  00224E  C02B  F026         	movff	UartCommsTask@HeadOfQueue,?_SetKeyState	;volatile
  4181  002252  6E2A               	movwf	??_UartCommsTask& (0+255),c
  4182  002254  0E01               	movlw	1
  4183  002256  6E27               	movwf	?_SetKeyState+1,c
  4184  002258  502A               	movf	??_UartCommsTask& (0+255),w,c
  4185  00225A  EC3E  F010         	call	_SetKeyState	;wreg free
  4186  00225E                     l3704:
  4187                           
  4188                           ;DataCommsTask.c: 274: }
  4189                           ;DataCommsTask.c: 276: HeadOfQueue = GetHeadOfQueue();
  4190  00225E  ECAB  F017         	call	_GetHeadOfQueue	;wreg free
  4191  002262  6E2B               	movwf	UartCommsTask@HeadOfQueue,c	;volatile
  4192                           
  4193                           ;DataCommsTask.c: 278: if( HeadOfQueue != KeyCount )
  4194  002264  0E0B               	movlw	low _KeyCount
  4195  002266  6EF6               	movwf	tblptrl,c
  4196  002268  0E0D               	movlw	high _KeyCount
  4197  00226A  6EF7               	movwf	tblptrh,c
  4198  00226C  0008               	tblrd		*
  4199  00226E  CFF5 F02A          	movff	tablat,??_UartCommsTask
  4200  002272  502B               	movf	UartCommsTask@HeadOfQueue,w,c	;volatile
  4201  002274  182A               	xorwf	??_UartCommsTask,w,c
  4202  002276  B4D8               	btfsc	status,2,c
  4203  002278  D00E               	goto	l3714
  4204                           
  4205                           ;DataCommsTask.c: 279: {
  4206                           ;DataCommsTask.c: 280: SetKeyState( HeadOfQueue, e_BeingServedYes );
  4207  00227A  C02B  F026         	movff	UartCommsTask@HeadOfQueue,?_SetKeyState	;volatile
  4208  00227E  6E2A               	movwf	??_UartCommsTask& (0+255),c
  4209  002280  0E04               	movlw	4
  4210  002282  6E27               	movwf	?_SetKeyState+1,c
  4211  002284  502A               	movf	??_UartCommsTask& (0+255),w,c
  4212  002286  EC3E  F010         	call	_SetKeyState	;wreg free
  4213  00228A  D005               	goto	l3714
  4214  00228C                     l3712:
  4215  00228C  503B               	movf	UartCommsTask@Msg,w,c
  4216                           
  4217                           ; Switch size 1, requested type "space"
  4218                           ; Number of cases is 2, Range of values is 97 to 98
  4219                           ; switch strategies available:
  4220                           ; Name         Instructions Cycles
  4221                           ; simple_byte            7     4 (average)
  4222                           ;	Chosen strategy is simple_byte
  4223  00228E  0A61               	xorlw	97	; case 97
  4224  002290  B4D8               	btfsc	status,2,c
  4225  002292  D7C8               	goto	l3696
  4226  002294  0A03               	xorlw	3	; case 98
  4227  002296                     l3714:
  4228                           
  4229                           ;DataCommsTask.c: 290: DataCommsReadState = e_ReadMsg;
  4230  002296  6E2A               	movwf	??_UartCommsTask& (0+255),c
  4231  002298  0E02               	movlw	2
  4232  00229A                     L16:
  4233  00229A  6E3A               	movwf	UartCommsTask@DataCommsReadState,c
  4234  00229C  502A               	movf	??_UartCommsTask& (0+255),w,c
  4235                           
  4236                           ;DataCommsTask.c: 291: break;
  4237  00229E  D010               	goto	l150
  4238  0022A0                     l3718:
  4239  0022A0  503A               	movf	UartCommsTask@DataCommsReadState,w,c
  4240                           
  4241                           ; Switch size 1, requested type "space"
  4242                           ; Number of cases is 5, Range of values is 0 to 4
  4243                           ; switch strategies available:
  4244                           ; Name         Instructions Cycles
  4245                           ; simple_byte           16     9 (average)
  4246                           ;	Chosen strategy is simple_byte
  4247  0022A2  0A00               	xorlw	0	; case 0
  4248  0022A4  B4D8               	btfsc	status,2,c
  4249  0022A6  D793               	goto	l3676
  4250  0022A8  0A01               	xorlw	1	; case 1
  4251  0022AA  B4D8               	btfsc	status,2,c
  4252  0022AC  D799               	goto	l3680
  4253  0022AE  0A03               	xorlw	3	; case 2
  4254  0022B0  B4D8               	btfsc	status,2,c
  4255  0022B2  D7A3               	goto	l3684
  4256  0022B4  0A01               	xorlw	1	; case 3
  4257  0022B6  B4D8               	btfsc	status,2,c
  4258  0022B8  D7B2               	goto	l3694
  4259  0022BA  0A07               	xorlw	7	; case 4
  4260  0022BC  B4D8               	btfsc	status,2,c
  4261  0022BE  D7E6               	goto	l3712
  4262  0022C0                     l150:
  4263  0022C0  0012               	return	
  4264  0022C2                     __end_of_UartCommsTask:
  4265                           	opt stack 0
  4266                           tblptru	equ	0xFF8
  4267                           tblptrh	equ	0xFF7
  4268                           tblptrl	equ	0xFF6
  4269                           tablat	equ	0xFF5
  4270                           prodh	equ	0xFF4
  4271                           prodl	equ	0xFF3
  4272                           intcon	equ	0xFF2
  4273                           postinc0	equ	0xFEE
  4274                           wreg	equ	0xFE8
  4275                           postdec1	equ	0xFE5
  4276                           fsr1l	equ	0xFE1
  4277                           indf2	equ	0xFDF
  4278                           fsr2h	equ	0xFDA
  4279                           fsr2l	equ	0xFD9
  4280                           status	equ	0xFD8
  4281                           
  4282 ;; *************** function _SetKeyState *****************
  4283 ;; Defined at:
  4284 ;;		line 10 in file "source/Model.c"
  4285 ;; Parameters:    Size  Location     Type
  4286 ;;  theKeyId        1   37[COMRAM] unsigned char 
  4287 ;;  theState        1   38[COMRAM] enum E208
  4288 ;; Auto vars:     Size  Location     Type
  4289 ;;  LoopKeyId       1   40[COMRAM] volatile unsigned char 
  4290 ;;  OldHeadOfQue    1   39[COMRAM] volatile unsigned char 
  4291 ;; Return value:  Size  Location     Type
  4292 ;;		None               void
  4293 ;; Registers used:
  4294 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4295 ;; Tracked objects:
  4296 ;;		On entry : 0/0
  4297 ;;		On exit  : 0/0
  4298 ;;		Unchanged: 0/0
  4299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4300 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4301 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4302 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4303 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4304 ;;Total ram usage:        4 bytes
  4305 ;; Hardware stack levels used:    1
  4306 ;; Hardware stack levels required when called:    5
  4307 ;; This function calls:
  4308 ;;		_CustomerWating
  4309 ;;		_CustomerBeingServed
  4310 ;; This function is called by:
  4311 ;;		_UartCommsTask
  4312 ;;		_MonitorButton
  4313 ;;		_MonitorBartenderButton
  4314 ;; This function uses a non-reentrant model
  4315 ;;
  4316                           
  4317                           	psect	text24
  4318  00207C                     __ptext24:
  4319                           	opt stack 0
  4320  00207C                     _SetKeyState:
  4321                           	opt stack 22
  4322                           
  4323                           ;Model.c: 14: if( theState == e_BeingServedNo )
  4324                           
  4325                           ;incstack = 0
  4326                           ;incstack = 0
  4327  00207C  5027               	movf	SetKeyState@theState,w,c
  4328  00207E  0A03               	xorlw	3
  4329  002080  A4D8               	btfss	status,2,c
  4330  002082  D048               	goto	l4054
  4331                           
  4332                           ;Model.c: 15: {
  4333                           ;Model.c: 16: if( m_HeadOfQueue == KeyCount )
  4334  002084  0E0B               	movlw	low _KeyCount
  4335  002086  6EF6               	movwf	tblptrl,c
  4336  002088  0E0D               	movlw	high _KeyCount
  4337  00208A  6EF7               	movwf	tblptrh,c
  4338  00208C  0008               	tblrd		*
  4339  00208E  50F5               	movf	tablat,w,c
  4340  002090  623D               	cpfseq	_m_HeadOfQueue,c	;volatile
  4341  002092  D003               	goto	l414
  4342                           
  4343                           ;Model.c: 17: {
  4344                           ;Model.c: 18: m_HeadOfQueue = theKeyId;
  4345  002094  C026  F03D         	movff	SetKeyState@theKeyId,_m_HeadOfQueue	;volatile
  4346                           
  4347                           ;Model.c: 19: }
  4348  002098  D039               	goto	l4052
  4349  00209A                     l414:
  4350                           
  4351                           ;Model.c: 20: else
  4352                           ;Model.c: 21: {
  4353                           ;Model.c: 22: volatile uint8_t LoopKeyId = m_HeadOfQueue;
  4354  00209A  C03D  F029         	movff	_m_HeadOfQueue,SetKeyState@LoopKeyId	;volatile
  4355                           
  4356                           ;Model.c: 24: while( m_Keys[ LoopKeyId ].NextInQueue != KeyCount )
  4357  00209E  D010               	goto	l4048
  4358  0020A0                     l4046:
  4359                           
  4360                           ;Model.c: 25: {
  4361                           ;Model.c: 26: LoopKeyId = m_Keys[ LoopKeyId ].NextInQueue;
  4362  0020A0  5029               	movf	SetKeyState@LoopKeyId,w,c	;volatile
  4363  0020A2  0D11               	mullw	17
  4364  0020A4  0E10               	movlw	16
  4365  0020A6  26F3               	addwf	prodl,f,c
  4366  0020A8  0E00               	movlw	0
  4367  0020AA  22F4               	addwfc	prodh,f,c
  4368  0020AC  0100               	movlb	0	; () banked
  4369  0020AE  0E63               	movlw	low _m_Keys	;volatile
  4370  0020B0  24F3               	addwf	prodl,w,c
  4371  0020B2  6ED9               	movwf	fsr2l,c
  4372  0020B4  0100               	movlb	0	; () banked
  4373  0020B6  0E00               	movlw	high _m_Keys	;volatile
  4374  0020B8  20F4               	addwfc	prodh,w,c
  4375  0020BA  6EDA               	movwf	fsr2h,c
  4376  0020BC  50DF               	movf	indf2,w,c
  4377  0020BE  6E29               	movwf	SetKeyState@LoopKeyId,c	;volatile
  4378  0020C0                     l4048:
  4379  0020C0  5029               	movf	SetKeyState@LoopKeyId,w,c	;volatile
  4380  0020C2  0D11               	mullw	17
  4381  0020C4  0E10               	movlw	16
  4382  0020C6  26F3               	addwf	prodl,f,c
  4383  0020C8  0E00               	movlw	0
  4384  0020CA  22F4               	addwfc	prodh,f,c
  4385  0020CC  0100               	movlb	0	; () banked
  4386  0020CE  0E63               	movlw	low _m_Keys	;volatile
  4387  0020D0  24F3               	addwf	prodl,w,c
  4388  0020D2  6ED9               	movwf	fsr2l,c
  4389  0020D4  0100               	movlb	0	; () banked
  4390  0020D6  0E00               	movlw	high _m_Keys	;volatile
  4391  0020D8  20F4               	addwfc	prodh,w,c
  4392  0020DA  6EDA               	movwf	fsr2h,c
  4393  0020DC  0E0B               	movlw	low _KeyCount
  4394  0020DE  6EF6               	movwf	tblptrl,c
  4395  0020E0  0E0D               	movlw	high _KeyCount
  4396  0020E2  6EF7               	movwf	tblptrh,c
  4397  0020E4  0008               	tblrd		*
  4398  0020E6  50F5               	movf	tablat,w,c
  4399  0020E8  62DF               	cpfseq	indf2,c
  4400  0020EA  D7DA               	goto	l4046
  4401                           
  4402                           ; BSR set to: 0
  4403                           ;Model.c: 27: }
  4404                           ;Model.c: 29: m_Keys[ LoopKeyId ].NextInQueue = theKeyId;
  4405                           
  4406                           ; BSR set to: 0
  4407  0020EC  5029               	movf	SetKeyState@LoopKeyId,w,c	;volatile
  4408  0020EE  0D11               	mullw	17
  4409  0020F0  0E10               	movlw	16
  4410  0020F2  26F3               	addwf	prodl,f,c
  4411  0020F4  0E00               	movlw	0
  4412  0020F6  22F4               	addwfc	prodh,f,c
  4413  0020F8  0100               	movlb	0	; () banked
  4414  0020FA  0E63               	movlw	low _m_Keys	;volatile
  4415  0020FC  24F3               	addwf	prodl,w,c
  4416  0020FE  6ED9               	movwf	fsr2l,c
  4417  002100  0100               	movlb	0	; () banked
  4418  002102  0E00               	movlw	high _m_Keys	;volatile
  4419  002104  20F4               	addwfc	prodh,w,c
  4420  002106  6EDA               	movwf	fsr2h,c
  4421  002108  C026  FFDF         	movff	SetKeyState@theKeyId,indf2
  4422  00210C                     l4052:
  4423                           
  4424                           ;Model.c: 30: }
  4425                           ;Model.c: 32: CustomerWating( theKeyId );
  4426  00210C  C026  F025         	movff	SetKeyState@theKeyId,?_CustomerWating
  4427  002110  EC87  F017         	call	_CustomerWating	;wreg free
  4428  002114                     l4054:
  4429                           
  4430                           ;Model.c: 33: }
  4431                           ;Model.c: 35: if( theState == e_BeingServedYes )
  4432  002114  5027               	movf	SetKeyState@theState,w,c
  4433  002116  0A04               	xorlw	4
  4434  002118  A4D8               	btfss	status,2,c
  4435  00211A  D004               	goto	l4058
  4436                           
  4437                           ;Model.c: 36: {
  4438                           ;Model.c: 37: CustomerBeingServed( theKeyId );
  4439  00211C  C026  F025         	movff	SetKeyState@theKeyId,?_CustomerBeingServed
  4440  002120  EC7E  F017         	call	_CustomerBeingServed	;wreg free
  4441  002124                     l4058:
  4442                           
  4443                           ;Model.c: 38: }
  4444                           ;Model.c: 41: if( ( theState == e_PressedNo ) && ( m_Keys[ theKeyId ].ButtonState == e_B
      +                          eingServedYes ) )
  4445  002124  0427               	decf	SetKeyState@theState,w,c
  4446  002126  A4D8               	btfss	status,2,c
  4447  002128  D034               	goto	l4068
  4448  00212A  5026               	movf	SetKeyState@theKeyId,w,c
  4449  00212C  0D11               	mullw	17
  4450  00212E  0100               	movlb	0	; () banked
  4451  002130  0E63               	movlw	low _m_Keys	;volatile
  4452  002132  24F3               	addwf	prodl,w,c
  4453  002134  6ED9               	movwf	fsr2l,c
  4454  002136  0100               	movlb	0	; () banked
  4455  002138  0E00               	movlw	high _m_Keys	;volatile
  4456  00213A  20F4               	addwfc	prodh,w,c
  4457  00213C  6EDA               	movwf	fsr2h,c
  4458  00213E  0E04               	movlw	4
  4459  002140  62DF               	cpfseq	indf2,c
  4460  002142  D027               	goto	l4068
  4461                           
  4462                           ; BSR set to: 0
  4463                           ;Model.c: 42: {
  4464                           ;Model.c: 43: volatile uint8_t OldHeadOfQueue = m_HeadOfQueue;
  4465  002144  C03D  F028         	movff	_m_HeadOfQueue,SetKeyState@OldHeadOfQueue	;volatile
  4466                           
  4467                           ; BSR set to: 0
  4468                           ;Model.c: 44: m_HeadOfQueue = m_Keys[ m_HeadOfQueue ].NextInQueue;
  4469  002148  503D               	movf	_m_HeadOfQueue,w,c	;volatile
  4470  00214A  0D11               	mullw	17
  4471  00214C  0E10               	movlw	16
  4472  00214E  26F3               	addwf	prodl,f,c
  4473  002150  0E00               	movlw	0
  4474  002152  22F4               	addwfc	prodh,f,c
  4475  002154  0100               	movlb	0	; () banked
  4476  002156  0E63               	movlw	low _m_Keys	;volatile
  4477  002158  24F3               	addwf	prodl,w,c
  4478  00215A  6ED9               	movwf	fsr2l,c
  4479  00215C  0100               	movlb	0	; () banked
  4480  00215E  0E00               	movlw	high _m_Keys	;volatile
  4481  002160  20F4               	addwfc	prodh,w,c
  4482  002162  6EDA               	movwf	fsr2h,c
  4483  002164  50DF               	movf	indf2,w,c
  4484  002166  6E3D               	movwf	_m_HeadOfQueue,c	;volatile
  4485                           
  4486                           ; BSR set to: 0
  4487                           ;Model.c: 45: m_Keys[ OldHeadOfQueue ].NextInQueue = KeyCount;
  4488  002168  0E0B               	movlw	low _KeyCount
  4489  00216A  6EF6               	movwf	tblptrl,c
  4490  00216C  0E0D               	movlw	high _KeyCount
  4491  00216E  6EF7               	movwf	tblptrh,c
  4492  002170  5028               	movf	SetKeyState@OldHeadOfQueue,w,c	;volatile
  4493  002172  0D11               	mullw	17
  4494  002174  0E10               	movlw	16
  4495  002176  26F3               	addwf	prodl,f,c
  4496  002178  0E00               	movlw	0
  4497  00217A  22F4               	addwfc	prodh,f,c
  4498  00217C  0100               	movlb	0	; () banked
  4499  00217E  0E63               	movlw	low _m_Keys	;volatile
  4500  002180  24F3               	addwf	prodl,w,c
  4501  002182  6ED9               	movwf	fsr2l,c
  4502  002184  0100               	movlb	0	; () banked
  4503  002186  0E00               	movlw	high _m_Keys	;volatile
  4504  002188  20F4               	addwfc	prodh,w,c
  4505  00218A  6EDA               	movwf	fsr2h,c
  4506  00218C  0008               	tblrd		*
  4507  00218E  CFF5 FFDF          	movff	tablat,indf2
  4508  002192                     l4068:
  4509                           
  4510                           ;Model.c: 46: }
  4511                           ;Model.c: 48: m_Keys[ theKeyId ].ButtonState = theState;
  4512  002192  5026               	movf	SetKeyState@theKeyId,w,c
  4513  002194  0D11               	mullw	17
  4514  002196  0100               	movlb	0	; () banked
  4515  002198  0E63               	movlw	low _m_Keys	;volatile
  4516  00219A  24F3               	addwf	prodl,w,c
  4517  00219C  6ED9               	movwf	fsr2l,c
  4518  00219E  0100               	movlb	0	; () banked
  4519  0021A0  0E00               	movlw	high _m_Keys	;volatile
  4520  0021A2  20F4               	addwfc	prodh,w,c
  4521  0021A4  6EDA               	movwf	fsr2h,c
  4522  0021A6  C027  FFDF         	movff	SetKeyState@theState,indf2
  4523                           
  4524                           ; BSR set to: 0
  4525                           ;Model.c: 49: m_Keys[ theKeyId ].SequenceState = 0;
  4526  0021AA  5026               	movf	SetKeyState@theKeyId,w,c
  4527  0021AC  0D11               	mullw	17
  4528  0021AE  0E0F               	movlw	15
  4529  0021B0  26F3               	addwf	prodl,f,c
  4530  0021B2  0E00               	movlw	0
  4531  0021B4  22F4               	addwfc	prodh,f,c
  4532  0021B6  0100               	movlb	0	; () banked
  4533  0021B8  0E63               	movlw	low _m_Keys	;volatile
  4534  0021BA  24F3               	addwf	prodl,w,c
  4535  0021BC  6ED9               	movwf	fsr2l,c
  4536  0021BE  0100               	movlb	0	; () banked
  4537  0021C0  0E00               	movlw	high _m_Keys	;volatile
  4538  0021C2  20F4               	addwfc	prodh,w,c
  4539  0021C4  6EDA               	movwf	fsr2h,c
  4540  0021C6  0E00               	movlw	0
  4541  0021C8  6EDF               	movwf	indf2,c
  4542                           
  4543                           ; BSR set to: 0
  4544  0021CA  0012               	return	
  4545  0021CC                     __end_of_SetKeyState:
  4546                           	opt stack 0
  4547                           tblptru	equ	0xFF8
  4548                           tblptrh	equ	0xFF7
  4549                           tblptrl	equ	0xFF6
  4550                           tablat	equ	0xFF5
  4551                           prodh	equ	0xFF4
  4552                           prodl	equ	0xFF3
  4553                           intcon	equ	0xFF2
  4554                           postinc0	equ	0xFEE
  4555                           wreg	equ	0xFE8
  4556                           postdec1	equ	0xFE5
  4557                           fsr1l	equ	0xFE1
  4558                           indf2	equ	0xFDF
  4559                           fsr2h	equ	0xFDA
  4560                           fsr2l	equ	0xFD9
  4561                           status	equ	0xFD8
  4562                           
  4563 ;; *************** function _CustomerBeingServed *****************
  4564 ;; Defined at:
  4565 ;;		line 300 in file "source/DataCommsTask.c"
  4566 ;; Parameters:    Size  Location     Type
  4567 ;;  theKeyId        1   36[COMRAM] unsigned char 
  4568 ;; Auto vars:     Size  Location     Type
  4569 ;;		None
  4570 ;; Return value:  Size  Location     Type
  4571 ;;		None               void
  4572 ;; Registers used:
  4573 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4574 ;; Tracked objects:
  4575 ;;		On entry : 0/0
  4576 ;;		On exit  : 0/0
  4577 ;;		Unchanged: 0/0
  4578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4579 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4580 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4581 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4582 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4583 ;;Total ram usage:        1 bytes
  4584 ;; Hardware stack levels used:    1
  4585 ;; Hardware stack levels required when called:    4
  4586 ;; This function calls:
  4587 ;;		_putsUSART
  4588 ;; This function is called by:
  4589 ;;		_SetKeyState
  4590 ;; This function uses a non-reentrant model
  4591 ;;
  4592                           
  4593                           	psect	text25
  4594  002EFC                     __ptext25:
  4595                           	opt stack 0
  4596  002EFC                     _CustomerBeingServed:
  4597                           	opt stack 22
  4598                           
  4599                           ;DataCommsTask.c: 301: putsUSART( c_CustomerBeingServed );
  4600                           
  4601                           ; BSR set to: 0
  4602                           ;incstack = 0
  4603                           ;incstack = 0
  4604  002EFC  0101               	movlb	1	; () banked
  4605  002EFE  0E01               	movlw	high _c_CustomerBeingServed
  4606  002F00  6E22               	movwf	?_putsUSART+1,c
  4607  002F02  0101               	movlb	1	; () banked
  4608  002F04  0E7F               	movlw	low _c_CustomerBeingServed
  4609  002F06  6E21               	movwf	?_putsUSART,c
  4610  002F08  ECB3  F015         	call	_putsUSART	;wreg free
  4611  002F0C  0012               	return	
  4612  002F0E                     __end_of_CustomerBeingServed:
  4613                           	opt stack 0
  4614                           tblptru	equ	0xFF8
  4615                           tblptrh	equ	0xFF7
  4616                           tblptrl	equ	0xFF6
  4617                           tablat	equ	0xFF5
  4618                           prodh	equ	0xFF4
  4619                           prodl	equ	0xFF3
  4620                           intcon	equ	0xFF2
  4621                           postinc0	equ	0xFEE
  4622                           wreg	equ	0xFE8
  4623                           postdec1	equ	0xFE5
  4624                           fsr1l	equ	0xFE1
  4625                           indf2	equ	0xFDF
  4626                           fsr2h	equ	0xFDA
  4627                           fsr2l	equ	0xFD9
  4628                           status	equ	0xFD8
  4629                           
  4630 ;; *************** function _CustomerWating *****************
  4631 ;; Defined at:
  4632 ;;		line 296 in file "source/DataCommsTask.c"
  4633 ;; Parameters:    Size  Location     Type
  4634 ;;  theKeyId        1   36[COMRAM] unsigned char 
  4635 ;; Auto vars:     Size  Location     Type
  4636 ;;		None
  4637 ;; Return value:  Size  Location     Type
  4638 ;;		None               void
  4639 ;; Registers used:
  4640 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4641 ;; Tracked objects:
  4642 ;;		On entry : 0/0
  4643 ;;		On exit  : 0/0
  4644 ;;		Unchanged: 0/0
  4645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4646 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4647 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4648 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4649 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4650 ;;Total ram usage:        1 bytes
  4651 ;; Hardware stack levels used:    1
  4652 ;; Hardware stack levels required when called:    4
  4653 ;; This function calls:
  4654 ;;		_putsUSART
  4655 ;; This function is called by:
  4656 ;;		_SetKeyState
  4657 ;; This function uses a non-reentrant model
  4658 ;;
  4659                           
  4660                           	psect	text26
  4661  002F0E                     __ptext26:
  4662                           	opt stack 0
  4663  002F0E                     _CustomerWating:
  4664                           	opt stack 22
  4665                           
  4666                           ;DataCommsTask.c: 297: putsUSART( c_CustomerWating );
  4667                           
  4668                           ;incstack = 0
  4669                           ;incstack = 0
  4670  002F0E  0101               	movlb	1	; () banked
  4671  002F10  0E01               	movlw	high _c_CustomerWating
  4672  002F12  6E22               	movwf	?_putsUSART+1,c
  4673  002F14  0101               	movlb	1	; () banked
  4674  002F16  0E99               	movlw	low _c_CustomerWating
  4675  002F18  6E21               	movwf	?_putsUSART,c
  4676  002F1A  ECB3  F015         	call	_putsUSART	;wreg free
  4677  002F1E  0012               	return	
  4678  002F20                     __end_of_CustomerWating:
  4679                           	opt stack 0
  4680                           tblptru	equ	0xFF8
  4681                           tblptrh	equ	0xFF7
  4682                           tblptrl	equ	0xFF6
  4683                           tablat	equ	0xFF5
  4684                           prodh	equ	0xFF4
  4685                           prodl	equ	0xFF3
  4686                           intcon	equ	0xFF2
  4687                           postinc0	equ	0xFEE
  4688                           wreg	equ	0xFE8
  4689                           postdec1	equ	0xFE5
  4690                           fsr1l	equ	0xFE1
  4691                           indf2	equ	0xFDF
  4692                           fsr2h	equ	0xFDA
  4693                           fsr2l	equ	0xFD9
  4694                           status	equ	0xFD8
  4695                           
  4696 ;; *************** function _GetKeyState *****************
  4697 ;; Defined at:
  4698 ;;		line 58 in file "source/Model.c"
  4699 ;; Parameters:    Size  Location     Type
  4700 ;;  theKeyId        1   31[COMRAM] unsigned char 
  4701 ;; Auto vars:     Size  Location     Type
  4702 ;;		None
  4703 ;; Return value:  Size  Location     Type
  4704 ;;                  1    wreg      enum E15781
  4705 ;; Registers used:
  4706 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4707 ;; Tracked objects:
  4708 ;;		On entry : 0/0
  4709 ;;		On exit  : 0/0
  4710 ;;		Unchanged: 0/0
  4711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4712 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4713 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4714 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4715 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4716 ;;Total ram usage:        1 bytes
  4717 ;; Hardware stack levels used:    1
  4718 ;; Hardware stack levels required when called:    2
  4719 ;; This function calls:
  4720 ;;		Nothing
  4721 ;; This function is called by:
  4722 ;;		_UartCommsTask
  4723 ;;		_MonitorButton
  4724 ;;		_MonitorBartenderButton
  4725 ;; This function uses a non-reentrant model
  4726 ;;
  4727                           
  4728                           	psect	text27
  4729  002EBA                     __ptext27:
  4730                           	opt stack 0
  4731  002EBA                     _GetKeyState:
  4732                           	opt stack 25
  4733                           
  4734                           ;Model.c: 59: return m_Keys[ theKeyId ].ButtonState;
  4735                           
  4736                           ;incstack = 0
  4737                           ;incstack = 0
  4738  002EBA  5020               	movf	GetKeyState@theKeyId,w,c
  4739  002EBC  0D11               	mullw	17
  4740  002EBE  0100               	movlb	0	; () banked
  4741  002EC0  0E63               	movlw	low _m_Keys	;volatile
  4742  002EC2  24F3               	addwf	prodl,w,c
  4743  002EC4  6ED9               	movwf	fsr2l,c
  4744  002EC6  0100               	movlb	0	; () banked
  4745  002EC8  0E00               	movlw	high _m_Keys	;volatile
  4746  002ECA  20F4               	addwfc	prodh,w,c
  4747  002ECC  6EDA               	movwf	fsr2h,c
  4748  002ECE  50DF               	movf	indf2,w,c
  4749                           
  4750                           ; BSR set to: 0
  4751                           
  4752                           ; BSR set to: 0
  4753  002ED0  0012               	return	
  4754  002ED2                     __end_of_GetKeyState:
  4755                           	opt stack 0
  4756                           tblptru	equ	0xFF8
  4757                           tblptrh	equ	0xFF7
  4758                           tblptrl	equ	0xFF6
  4759                           tablat	equ	0xFF5
  4760                           prodh	equ	0xFF4
  4761                           prodl	equ	0xFF3
  4762                           intcon	equ	0xFF2
  4763                           postinc0	equ	0xFEE
  4764                           wreg	equ	0xFE8
  4765                           postdec1	equ	0xFE5
  4766                           fsr1l	equ	0xFE1
  4767                           indf2	equ	0xFDF
  4768                           fsr2h	equ	0xFDA
  4769                           fsr2l	equ	0xFD9
  4770                           status	equ	0xFD8
  4771                           
  4772 ;; *************** function _GetHeadOfQueue *****************
  4773 ;; Defined at:
  4774 ;;		line 53 in file "source/Model.c"
  4775 ;; Parameters:    Size  Location     Type
  4776 ;;		None
  4777 ;; Auto vars:     Size  Location     Type
  4778 ;;		None
  4779 ;; Return value:  Size  Location     Type
  4780 ;;                  1    wreg      unsigned char 
  4781 ;; Registers used:
  4782 ;;		wreg, status,2
  4783 ;; Tracked objects:
  4784 ;;		On entry : 0/0
  4785 ;;		On exit  : 0/0
  4786 ;;		Unchanged: 0/0
  4787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4788 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4789 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4790 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4791 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4792 ;;Total ram usage:        0 bytes
  4793 ;; Hardware stack levels used:    1
  4794 ;; Hardware stack levels required when called:    2
  4795 ;; This function calls:
  4796 ;;		Nothing
  4797 ;; This function is called by:
  4798 ;;		_UartCommsTask
  4799 ;;		_MonitorBartenderButton
  4800 ;; This function uses a non-reentrant model
  4801 ;;
  4802                           
  4803                           	psect	text28
  4804  002F56                     __ptext28:
  4805                           	opt stack 0
  4806  002F56                     _GetHeadOfQueue:
  4807                           	opt stack 25
  4808                           
  4809                           ;Model.c: 54: return m_HeadOfQueue;
  4810                           
  4811                           ; BSR set to: 0
  4812                           ;incstack = 0
  4813                           ;incstack = 0
  4814  002F56  503D               	movf	_m_HeadOfQueue,w,c	;volatile
  4815  002F58  0012               	return	
  4816  002F5A                     __end_of_GetHeadOfQueue:
  4817                           	opt stack 0
  4818                           tblptru	equ	0xFF8
  4819                           tblptrh	equ	0xFF7
  4820                           tblptrl	equ	0xFF6
  4821                           tablat	equ	0xFF5
  4822                           prodh	equ	0xFF4
  4823                           prodl	equ	0xFF3
  4824                           intcon	equ	0xFF2
  4825                           postinc0	equ	0xFEE
  4826                           wreg	equ	0xFE8
  4827                           postdec1	equ	0xFE5
  4828                           fsr1l	equ	0xFE1
  4829                           indf2	equ	0xFDF
  4830                           fsr2h	equ	0xFDA
  4831                           fsr2l	equ	0xFD9
  4832                           status	equ	0xFD8
  4833                           
  4834 ;; *************** function _GetSerialChar *****************
  4835 ;; Defined at:
  4836 ;;		line 82 in file "source/DataCommsTask.c"
  4837 ;; Parameters:    Size  Location     Type
  4838 ;;		None
  4839 ;; Auto vars:     Size  Location     Type
  4840 ;;  ReceivedChar    1   32[COMRAM] unsigned char 
  4841 ;; Return value:  Size  Location     Type
  4842 ;;                  1    wreg      unsigned char 
  4843 ;; Registers used:
  4844 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4845 ;; Tracked objects:
  4846 ;;		On entry : 0/0
  4847 ;;		On exit  : 0/0
  4848 ;;		Unchanged: 0/0
  4849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4850 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4851 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4852 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4853 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4854 ;;Total ram usage:        1 bytes
  4855 ;; Hardware stack levels used:    1
  4856 ;; Hardware stack levels required when called:    3
  4857 ;; This function calls:
  4858 ;;		_ReadUSART
  4859 ;; This function is called by:
  4860 ;;		_UartCommsTask
  4861 ;; This function uses a non-reentrant model
  4862 ;;
  4863                           
  4864                           	psect	text29
  4865  002E7E                     __ptext29:
  4866                           	opt stack 0
  4867  002E7E                     _GetSerialChar:
  4868                           	opt stack 24
  4869                           
  4870                           ;DataCommsTask.c: 83: char ReceivedChar = NoRead;
  4871                           
  4872                           ;incstack = 0
  4873                           ;incstack = 0
  4874  002E7E  0E0C               	movlw	low _NoRead
  4875  002E80  6EF6               	movwf	tblptrl,c
  4876  002E82  0E0D               	movlw	high _NoRead
  4877  002E84  6EF7               	movwf	tblptrh,c
  4878  002E86  0008               	tblrd		*
  4879  002E88  CFF5 F021          	movff	tablat,GetSerialChar@ReceivedChar
  4880                           
  4881                           ;DataCommsTask.c: 85: if ( ( (PIR1bits.RCIF) == 1 ) && ( (!TXSTAbits.TRMT) == 0 ) )
  4882  002E8C  BA9E               	btfsc	3998,5,c	;volatile
  4883  002E8E  A2AC               	btfss	4012,1,c	;volatile
  4884  002E90  D003               	goto	l2762
  4885                           
  4886                           ;DataCommsTask.c: 86: {
  4887                           ;DataCommsTask.c: 87: ReceivedChar = ReadUSART();
  4888  002E92  EC4E  F017         	call	_ReadUSART	;wreg free
  4889  002E96  6E21               	movwf	GetSerialChar@ReceivedChar,c
  4890  002E98                     l2762:
  4891                           
  4892                           ;DataCommsTask.c: 88: }
  4893                           ;DataCommsTask.c: 90: return ReceivedChar;
  4894  002E98  5021               	movf	GetSerialChar@ReceivedChar,w,c
  4895  002E9A  0012               	return	
  4896  002E9C                     __end_of_GetSerialChar:
  4897                           	opt stack 0
  4898                           tblptru	equ	0xFF8
  4899                           tblptrh	equ	0xFF7
  4900                           tblptrl	equ	0xFF6
  4901                           tablat	equ	0xFF5
  4902                           prodh	equ	0xFF4
  4903                           prodl	equ	0xFF3
  4904                           intcon	equ	0xFF2
  4905                           postinc0	equ	0xFEE
  4906                           wreg	equ	0xFE8
  4907                           postdec1	equ	0xFE5
  4908                           fsr1l	equ	0xFE1
  4909                           indf2	equ	0xFDF
  4910                           fsr2h	equ	0xFDA
  4911                           fsr2l	equ	0xFD9
  4912                           status	equ	0xFD8
  4913                           
  4914 ;; *************** function _ReadUSART *****************
  4915 ;; Defined at:
  4916 ;;		line 16 in file "C:\Program Files\Microchip\xc8\v1.20\sources\pic18\plib\USART\uread.c"
  4917 ;; Parameters:    Size  Location     Type
  4918 ;;		None
  4919 ;; Auto vars:     Size  Location     Type
  4920 ;;  data            1   31[COMRAM] unsigned char 
  4921 ;; Return value:  Size  Location     Type
  4922 ;;                  1    wreg      unsigned char 
  4923 ;; Registers used:
  4924 ;;		wreg, status,2, status,0
  4925 ;; Tracked objects:
  4926 ;;		On entry : 0/0
  4927 ;;		On exit  : 0/0
  4928 ;;		Unchanged: 0/0
  4929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4930 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4931 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4932 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4933 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4934 ;;Total ram usage:        1 bytes
  4935 ;; Hardware stack levels used:    1
  4936 ;; Hardware stack levels required when called:    2
  4937 ;; This function calls:
  4938 ;;		Nothing
  4939 ;; This function is called by:
  4940 ;;		_GetSerialChar
  4941 ;; This function uses a non-reentrant model
  4942 ;;
  4943                           
  4944                           	psect	text30
  4945  002E9C                     __ptext30:
  4946                           	opt stack 0
  4947  002E9C                     _ReadUSART:
  4948                           	opt stack 24
  4949                           
  4950                           ;incstack = 0
  4951                           ;incstack = 0
  4952  002E9C  0EF2               	movlw	242
  4953  002E9E  163C               	andwf	_USART_Status,f,c
  4954  002EA0  ACAB               	btfss	4011,6,c	;volatile
  4955  002EA2  D003               	goto	l735
  4956  002EA4  903C               	bcf	_USART_Status,0,c
  4957  002EA6  B0AB               	btfsc	4011,0,c	;volatile
  4958  002EA8  803C               	bsf	_USART_Status,0,c
  4959  002EAA                     l735:
  4960  002EAA  B4AB               	btfsc	4011,2,c	;volatile
  4961  002EAC  843C               	bsf	_USART_Status,2,c
  4962  002EAE  B2AB               	btfsc	4011,1,c	;volatile
  4963  002EB0  863C               	bsf	_USART_Status,3,c
  4964  002EB2  CFAE F020          	movff	4014,ReadUSART@data	;volatile
  4965  002EB6  5020               	movf	ReadUSART@data,w,c
  4966  002EB8  0012               	return	
  4967  002EBA                     __end_of_ReadUSART:
  4968                           	opt stack 0
  4969                           tblptru	equ	0xFF8
  4970                           tblptrh	equ	0xFF7
  4971                           tblptrl	equ	0xFF6
  4972                           tablat	equ	0xFF5
  4973                           prodh	equ	0xFF4
  4974                           prodl	equ	0xFF3
  4975                           intcon	equ	0xFF2
  4976                           postinc0	equ	0xFEE
  4977                           wreg	equ	0xFE8
  4978                           postdec1	equ	0xFE5
  4979                           fsr1l	equ	0xFE1
  4980                           indf2	equ	0xFDF
  4981                           fsr2h	equ	0xFDA
  4982                           fsr2l	equ	0xFD9
  4983                           status	equ	0xFD8
  4984                           
  4985 ;; *************** function _CanCommsTask *****************
  4986 ;; Defined at:
  4987 ;;		line 94 in file "source/DataCommsTask.c"
  4988 ;; Parameters:    Size  Location     Type
  4989 ;;		None
  4990 ;; Auto vars:     Size  Location     Type
  4991 ;;  str             5   48[BANK0 ] unsigned char [5]
  4992 ;;  str             5   43[BANK0 ] unsigned char [5]
  4993 ;; Return value:  Size  Location     Type
  4994 ;;		None               void
  4995 ;; Registers used:
  4996 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  4997 ;; Tracked objects:
  4998 ;;		On entry : 0/0
  4999 ;;		On exit  : 0/0
  5000 ;;		Unchanged: 0/0
  5001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5002 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5003 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5004 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5005 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5006 ;;Total ram usage:       13 bytes
  5007 ;; Hardware stack levels used:    1
  5008 ;; Hardware stack levels required when called:    5
  5009 ;; This function calls:
  5010 ;;		_putsUSART
  5011 ;;		_ECANInitialize
  5012 ;;		_ECANReceiveMessage
  5013 ;;		_sprintf
  5014 ;;		_MaturedTimer
  5015 ;;		_ECANSendMessage
  5016 ;;		_CalculateFutureTime
  5017 ;; This function is called by:
  5018 ;;		_DataCommsTask
  5019 ;; This function uses a non-reentrant model
  5020 ;;
  5021                           
  5022                           	psect	text31
  5023  001110                     __ptext31:
  5024                           	opt stack 0
  5025  001110                     _CanCommsTask:
  5026                           	opt stack 23
  5027                           
  5028                           ;DataCommsTask.c: 95: static CanCommsStateMachine DataCommsReadState = e_CANInit;
  5029                           ;DataCommsTask.c: 97: switch( DataCommsReadState )
  5030                           
  5031                           ;incstack = 0
  5032                           ;incstack = 0
  5033  001110  D1AF               	goto	l3672
  5034  001112                     l3582:
  5035                           
  5036                           ;DataCommsTask.c: 100: {
  5037                           ;DataCommsTask.c: 103: putsUSART( "Line: " );
  5038  001112  0E0D               	movlw	high STR_1
  5039  001114  6E22               	movwf	?_putsUSART+1,c
  5040  001116  0E40               	movlw	low STR_1
  5041  001118  6E21               	movwf	?_putsUSART,c
  5042  00111A  ECB3  F015         	call	_putsUSART	;wreg free
  5043                           
  5044                           ;DataCommsTask.c: 104: putsUSART( 104 );
  5045  00111E  0E00               	movlw	0
  5046  001120  6E22               	movwf	?_putsUSART+1,c
  5047  001122  0E68               	movlw	104
  5048  001124  6E21               	movwf	?_putsUSART,c
  5049  001126  ECB3  F015         	call	_putsUSART	;wreg free
  5050                           
  5051                           ;DataCommsTask.c: 105: putsUSART( " File: " );
  5052  00112A  0E0D               	movlw	high STR_2
  5053  00112C  6E22               	movwf	?_putsUSART+1,c
  5054  00112E  0E38               	movlw	low STR_2
  5055  001130  6E21               	movwf	?_putsUSART,c
  5056  001132  ECB3  F015         	call	_putsUSART	;wreg free
  5057                           
  5058                           ;DataCommsTask.c: 106: putsUSART( "source/DataCommsTask.c" );
  5059  001136  0E0D               	movlw	high STR_3
  5060  001138  6E22               	movwf	?_putsUSART+1,c
  5061  00113A  0E13               	movlw	low STR_3
  5062  00113C  6E21               	movwf	?_putsUSART,c
  5063  00113E  ECB3  F015         	call	_putsUSART	;wreg free
  5064                           
  5065                           ;DataCommsTask.c: 107: putsUSART( "\r\n" );
  5066  001142  0E0D               	movlw	high STR_4
  5067  001144  6E22               	movwf	?_putsUSART+1,c
  5068  001146  0E47               	movlw	low STR_4
  5069  001148  6E21               	movwf	?_putsUSART,c
  5070  00114A  ECB3  F015         	call	_putsUSART	;wreg free
  5071                           
  5072                           ;DataCommsTask.c: 110: ECANInitialize();
  5073  00114E  ECCB  F011         	call	_ECANInitialize	;wreg free
  5074                           
  5075                           ;DataCommsTask.c: 113: putsUSART( "Line: " );
  5076  001152  0E0D               	movlw	high STR_1
  5077  001154  6E22               	movwf	?_putsUSART+1,c
  5078  001156  0E40               	movlw	low STR_1
  5079  001158  6E21               	movwf	?_putsUSART,c
  5080  00115A  ECB3  F015         	call	_putsUSART	;wreg free
  5081                           
  5082                           ;DataCommsTask.c: 114: putsUSART( 114 );
  5083  00115E  0E00               	movlw	0
  5084  001160  6E22               	movwf	?_putsUSART+1,c
  5085  001162  0E72               	movlw	114
  5086  001164  6E21               	movwf	?_putsUSART,c
  5087  001166  ECB3  F015         	call	_putsUSART	;wreg free
  5088                           
  5089                           ;DataCommsTask.c: 115: putsUSART( " File: " );
  5090  00116A  0E0D               	movlw	high STR_2
  5091  00116C  6E22               	movwf	?_putsUSART+1,c
  5092  00116E  0E38               	movlw	low STR_2
  5093  001170  6E21               	movwf	?_putsUSART,c
  5094  001172  ECB3  F015         	call	_putsUSART	;wreg free
  5095                           
  5096                           ;DataCommsTask.c: 116: putsUSART( "source/DataCommsTask.c" );
  5097  001176  0E0D               	movlw	high STR_3
  5098  001178  6E22               	movwf	?_putsUSART+1,c
  5099  00117A  0E13               	movlw	low STR_3
  5100  00117C  6E21               	movwf	?_putsUSART,c
  5101  00117E  ECB3  F015         	call	_putsUSART	;wreg free
  5102                           
  5103                           ;DataCommsTask.c: 117: putsUSART( "\r\n" );
  5104  001182  0E0D               	movlw	high STR_4
  5105  001184  6E22               	movwf	?_putsUSART+1,c
  5106  001186  0E47               	movlw	low STR_4
  5107  001188  6E21               	movwf	?_putsUSART,c
  5108  00118A  ECB3  F015         	call	_putsUSART	;wreg free
  5109                           
  5110                           ;DataCommsTask.c: 120: m_Toggle = 0;
  5111  00118E  0E00               	movlw	0
  5112  001190  0100               	movlb	0	; () banked
  5113  001192  0100               	movlb	0	; () banked
  5114  001194  6F62               	movwf	_m_Toggle& (0+255),b	;volatile
  5115                           
  5116                           ; BSR set to: 0
  5117                           ;DataCommsTask.c: 121: m_DataWriteTimer.Day = 0;
  5118  001196  0E00               	movlw	0
  5119  001198  0100               	movlb	0	; () banked
  5120  00119A  0100               	movlb	0	; () banked
  5121  00119C  6FBC               	movwf	(_m_DataWriteTimer+4)& (0+255),b	;volatile
  5122                           
  5123                           ; BSR set to: 0
  5124                           ;DataCommsTask.c: 122: m_DataWriteTimer.Hour = 0;
  5125  00119E  0E00               	movlw	0
  5126  0011A0  0100               	movlb	0	; () banked
  5127  0011A2  0100               	movlb	0	; () banked
  5128  0011A4  6FBB               	movwf	(_m_DataWriteTimer+3)& (0+255),b	;volatile
  5129                           
  5130                           ; BSR set to: 0
  5131                           ;DataCommsTask.c: 123: m_DataWriteTimer.Millisecond = 0;
  5132  0011A6  0E00               	movlw	0
  5133  0011A8  0100               	movlb	0	; () banked
  5134  0011AA  0100               	movlb	0	; () banked
  5135  0011AC  6FB8               	movwf	_m_DataWriteTimer& (0+255),b	;volatile
  5136                           
  5137                           ; BSR set to: 0
  5138                           ;DataCommsTask.c: 124: m_DataWriteTimer.Minute = 0;
  5139  0011AE  0E00               	movlw	0
  5140  0011B0  0100               	movlb	0	; () banked
  5141  0011B2  0100               	movlb	0	; () banked
  5142  0011B4  6FBA               	movwf	(_m_DataWriteTimer+2)& (0+255),b	;volatile
  5143                           
  5144                           ; BSR set to: 0
  5145                           ;DataCommsTask.c: 125: m_DataWriteTimer.Second = 0;
  5146  0011B6  0E00               	movlw	0
  5147  0011B8  0100               	movlb	0	; () banked
  5148  0011BA  0100               	movlb	0	; () banked
  5149  0011BC  6FB9               	movwf	(_m_DataWriteTimer+1)& (0+255),b	;volatile
  5150  0011BE  D14F               	goto	l3668
  5151  0011C0                     l3610:
  5152                           
  5153                           ; BSR set to: 0
  5154                           ;DataCommsTask.c: 134: ECANReceiveMessage(&id, &data[0], &dataLen, &flags);
  5155  0011C0  0100               	movlb	0	; () banked
  5156  0011C2  0E00               	movlw	high _id
  5157  0011C4  0100               	movlb	0	; () banked
  5158  0011C6  0100               	movlb	0	; () banked
  5159  0011C8  6FD8               	movwf	(?_ECANReceiveMessage+1)& (0+255),b
  5160  0011CA  0100               	movlb	0	; () banked
  5161  0011CC  0EC1               	movlw	low _id
  5162  0011CE  0100               	movlb	0	; () banked
  5163  0011D0  6FD7               	movwf	?_ECANReceiveMessage& (0+255),b
  5164  0011D2  0100               	movlb	0	; () banked
  5165  0011D4  0E00               	movlw	high _data
  5166  0011D6  0100               	movlb	0	; () banked
  5167  0011D8  0100               	movlb	0	; () banked
  5168  0011DA  6FDA               	movwf	(?_ECANReceiveMessage+3)& (0+255),b
  5169  0011DC  0100               	movlb	0	; () banked
  5170  0011DE  0EBD               	movlw	low _data
  5171  0011E0  0100               	movlb	0	; () banked
  5172  0011E2  6FD9               	movwf	(?_ECANReceiveMessage+2)& (0+255),b
  5173  0011E4  0100               	movlb	0	; () banked
  5174  0011E6  0E00               	movlw	high _dataLen
  5175  0011E8  0100               	movlb	0	; () banked
  5176  0011EA  0100               	movlb	0	; () banked
  5177  0011EC  6FDC               	movwf	(?_ECANReceiveMessage+5)& (0+255),b
  5178  0011EE  0100               	movlb	0	; () banked
  5179  0011F0  0EC5               	movlw	low _dataLen
  5180  0011F2  0100               	movlb	0	; () banked
  5181  0011F4  6FDB               	movwf	(?_ECANReceiveMessage+4)& (0+255),b
  5182  0011F6  0100               	movlb	0	; () banked
  5183  0011F8  0E00               	movlw	high _flags
  5184  0011FA  0100               	movlb	0	; () banked
  5185  0011FC  0100               	movlb	0	; () banked
  5186  0011FE  6FDE               	movwf	(?_ECANReceiveMessage+7)& (0+255),b
  5187  001200  0100               	movlb	0	; () banked
  5188  001202  0EC6               	movlw	low _flags
  5189  001204  0100               	movlb	0	; () banked
  5190  001206  6FDD               	movwf	(?_ECANReceiveMessage+6)& (0+255),b
  5191  001208  ECA7  F006         	call	_ECANReceiveMessage	;wreg free
  5192                           
  5193                           ;DataCommsTask.c: 136: if ( dataLen > 0 )
  5194  00120C  0100               	movlb	0	; () banked
  5195  00120E  0100               	movlb	0	; () banked
  5196  001210  51C5               	movf	_dataLen& (0+255),w,b
  5197  001212  B4D8               	btfsc	status,2,c
  5198  001214  D041               	goto	l3628
  5199                           
  5200                           ; BSR set to: 0
  5201                           ;DataCommsTask.c: 137: {
  5202                           ;DataCommsTask.c: 139: putsUSART( "Line: " );
  5203  001216  0E0D               	movlw	high STR_1
  5204  001218  6E22               	movwf	?_putsUSART+1,c
  5205  00121A  0E40               	movlw	low STR_1
  5206  00121C  6E21               	movwf	?_putsUSART,c
  5207  00121E  ECB3  F015         	call	_putsUSART	;wreg free
  5208                           
  5209                           ;DataCommsTask.c: 140: char str[5];
  5210                           ;DataCommsTask.c: 141: str[0] = 0;
  5211  001222  0100               	movlb	0	; () banked
  5212  001224  6FEF               	movwf	??_CanCommsTask& (0+255),b
  5213  001226  0E00               	movlw	0
  5214  001228  0100               	movlb	0	; () banked
  5215  00122A  0100               	movlb	0	; () banked
  5216  00122C  6FF2               	movwf	CanCommsTask@str& (0+255),b
  5217  00122E  0100               	movlb	0	; () banked
  5218  001230  51EF               	movf	??_CanCommsTask& (0+255),w,b
  5219                           
  5220                           ; BSR set to: 0
  5221                           ;DataCommsTask.c: 142: sprintf(str, "%d", 142);
  5222  001232  0100               	movlb	0	; () banked
  5223  001234  0E00               	movlw	high CanCommsTask@str
  5224  001236  0100               	movlb	0	; () banked
  5225  001238  0100               	movlb	0	; () banked
  5226  00123A  6FC8               	movwf	(?_sprintf+1)& (0+255),b
  5227  00123C  0100               	movlb	0	; () banked
  5228  00123E  0EF2               	movlw	low CanCommsTask@str
  5229  001240  0100               	movlb	0	; () banked
  5230  001242  6FC7               	movwf	?_sprintf& (0+255),b
  5231  001244  0E0D               	movlw	high STR_10
  5232  001246  0100               	movlb	0	; () banked
  5233  001248  0100               	movlb	0	; () banked
  5234  00124A  6FCA               	movwf	(?_sprintf+3)& (0+255),b
  5235  00124C  0E4A               	movlw	low STR_10
  5236  00124E  0100               	movlb	0	; () banked
  5237  001250  6FC9               	movwf	(?_sprintf+2)& (0+255),b
  5238  001252  0E00               	movlw	0
  5239  001254  0100               	movlb	0	; () banked
  5240  001256  0100               	movlb	0	; () banked
  5241  001258  6FCC               	movwf	(?_sprintf+5)& (0+255),b
  5242  00125A  0E8E               	movlw	142
  5243  00125C  0100               	movlb	0	; () banked
  5244  00125E  6FCB               	movwf	(?_sprintf+4)& (0+255),b
  5245  001260  EC70  F00C         	call	_sprintf	;wreg free
  5246                           
  5247                           ;DataCommsTask.c: 143: putsUSART( str );
  5248  001264  0100               	movlb	0	; () banked
  5249  001266  0E00               	movlw	high CanCommsTask@str
  5250  001268  6E22               	movwf	?_putsUSART+1,c
  5251  00126A  0100               	movlb	0	; () banked
  5252  00126C  0EF2               	movlw	low CanCommsTask@str
  5253  00126E  6E21               	movwf	?_putsUSART,c
  5254  001270  ECB3  F015         	call	_putsUSART	;wreg free
  5255                           
  5256                           ;DataCommsTask.c: 144: putsUSART( " File: " );
  5257  001274  0E0D               	movlw	high STR_2
  5258  001276  6E22               	movwf	?_putsUSART+1,c
  5259  001278  0E38               	movlw	low STR_2
  5260  00127A  6E21               	movwf	?_putsUSART,c
  5261  00127C  ECB3  F015         	call	_putsUSART	;wreg free
  5262                           
  5263                           ;DataCommsTask.c: 145: putsUSART( "source/DataCommsTask.c" );
  5264  001280  0E0D               	movlw	high STR_3
  5265  001282  6E22               	movwf	?_putsUSART+1,c
  5266  001284  0E13               	movlw	low STR_3
  5267  001286  6E21               	movwf	?_putsUSART,c
  5268  001288  ECB3  F015         	call	_putsUSART	;wreg free
  5269                           
  5270                           ;DataCommsTask.c: 146: putsUSART( "\r\n" );
  5271  00128C  0E0D               	movlw	high STR_4
  5272  00128E  6E22               	movwf	?_putsUSART+1,c
  5273  001290  0E47               	movlw	low STR_4
  5274  001292  6E21               	movwf	?_putsUSART,c
  5275  001294  ECB3  F015         	call	_putsUSART	;wreg free
  5276  001298                     l3628:
  5277                           
  5278                           ;DataCommsTask.c: 148: }
  5279                           ;DataCommsTask.c: 150: data[0] = 0;
  5280  001298  0100               	movlb	0	; () banked
  5281  00129A  6FEF               	movwf	??_CanCommsTask& (0+255),b
  5282  00129C  0E00               	movlw	0
  5283  00129E  0100               	movlb	0	; () banked
  5284  0012A0  0100               	movlb	0	; () banked
  5285  0012A2  6FBD               	movwf	_data& (0+255),b
  5286  0012A4  0100               	movlb	0	; () banked
  5287  0012A6  51EF               	movf	??_CanCommsTask& (0+255),w,b
  5288                           
  5289                           ; BSR set to: 0
  5290                           ;DataCommsTask.c: 152: DataCommsReadState = e_CANWrite;
  5291  0012A8  0100               	movlb	0	; () banked
  5292  0012AA  6FEF               	movwf	??_CanCommsTask& (0+255),b
  5293  0012AC  0E02               	movlw	2
  5294  0012AE  D0DA               	goto	L18
  5295  0012B0                     l3632:
  5296                           
  5297                           ; BSR set to: 0
  5298                           ;DataCommsTask.c: 156: if ( MaturedTimer( &m_DataWriteTimer ) )
  5299  0012B0  0100               	movlb	0	; () banked
  5300  0012B2  0E00               	movlw	high _m_DataWriteTimer	;volatile
  5301  0012B4  6E21               	movwf	?_MaturedTimer+1,c
  5302  0012B6  0100               	movlb	0	; () banked
  5303  0012B8  0EB8               	movlw	low _m_DataWriteTimer	;volatile
  5304  0012BA  6E20               	movwf	?_MaturedTimer,c
  5305  0012BC  EC61  F011         	call	_MaturedTimer	;wreg free
  5306  0012C0  0900               	iorlw	0
  5307  0012C2  B4D8               	btfsc	status,2,c
  5308  0012C4  D0CC               	goto	l3668
  5309                           
  5310                           ;DataCommsTask.c: 157: {
  5311                           ;DataCommsTask.c: 160: putsUSART( "Line: " );
  5312  0012C6  0E0D               	movlw	high STR_1
  5313  0012C8  6E22               	movwf	?_putsUSART+1,c
  5314  0012CA  0E40               	movlw	low STR_1
  5315  0012CC  6E21               	movwf	?_putsUSART,c
  5316  0012CE  ECB3  F015         	call	_putsUSART	;wreg free
  5317                           
  5318                           ;DataCommsTask.c: 161: char str[5];
  5319                           ;DataCommsTask.c: 162: str[0] = 0;
  5320  0012D2  0100               	movlb	0	; () banked
  5321  0012D4  6FEF               	movwf	??_CanCommsTask& (0+255),b
  5322  0012D6  0E00               	movlw	0
  5323  0012D8  0100               	movlb	0	; () banked
  5324  0012DA  0100               	movlb	0	; () banked
  5325  0012DC  6FF7               	movwf	CanCommsTask@str_333& (0+255),b
  5326  0012DE  0100               	movlb	0	; () banked
  5327  0012E0  51EF               	movf	??_CanCommsTask& (0+255),w,b
  5328                           
  5329                           ; BSR set to: 0
  5330                           ;DataCommsTask.c: 163: sprintf(str, "%d", 163);
  5331  0012E2  0100               	movlb	0	; () banked
  5332  0012E4  0E00               	movlw	high CanCommsTask@str_333
  5333  0012E6  0100               	movlb	0	; () banked
  5334  0012E8  0100               	movlb	0	; () banked
  5335  0012EA  6FC8               	movwf	(?_sprintf+1)& (0+255),b
  5336  0012EC  0100               	movlb	0	; () banked
  5337  0012EE  0EF7               	movlw	low CanCommsTask@str_333
  5338  0012F0  0100               	movlb	0	; () banked
  5339  0012F2  6FC7               	movwf	?_sprintf& (0+255),b
  5340  0012F4  0E0D               	movlw	high STR_10
  5341  0012F6  0100               	movlb	0	; () banked
  5342  0012F8  0100               	movlb	0	; () banked
  5343  0012FA  6FCA               	movwf	(?_sprintf+3)& (0+255),b
  5344  0012FC  0E4A               	movlw	low STR_10
  5345  0012FE  0100               	movlb	0	; () banked
  5346  001300  6FC9               	movwf	(?_sprintf+2)& (0+255),b
  5347  001302  0E00               	movlw	0
  5348  001304  0100               	movlb	0	; () banked
  5349  001306  0100               	movlb	0	; () banked
  5350  001308  6FCC               	movwf	(?_sprintf+5)& (0+255),b
  5351  00130A  0EA3               	movlw	163
  5352  00130C  0100               	movlb	0	; () banked
  5353  00130E  6FCB               	movwf	(?_sprintf+4)& (0+255),b
  5354  001310  EC70  F00C         	call	_sprintf	;wreg free
  5355                           
  5356                           ;DataCommsTask.c: 164: putsUSART( str );
  5357  001314  0100               	movlb	0	; () banked
  5358  001316  0E00               	movlw	high CanCommsTask@str_333
  5359  001318  6E22               	movwf	?_putsUSART+1,c
  5360  00131A  0100               	movlb	0	; () banked
  5361  00131C  0EF7               	movlw	low CanCommsTask@str_333
  5362  00131E  6E21               	movwf	?_putsUSART,c
  5363  001320  ECB3  F015         	call	_putsUSART	;wreg free
  5364                           
  5365                           ;DataCommsTask.c: 165: putsUSART( " File: " );
  5366  001324  0E0D               	movlw	high STR_2
  5367  001326  6E22               	movwf	?_putsUSART+1,c
  5368  001328  0E38               	movlw	low STR_2
  5369  00132A  6E21               	movwf	?_putsUSART,c
  5370  00132C  ECB3  F015         	call	_putsUSART	;wreg free
  5371                           
  5372                           ;DataCommsTask.c: 166: putsUSART( "source/DataCommsTask.c" );
  5373  001330  0E0D               	movlw	high STR_3
  5374  001332  6E22               	movwf	?_putsUSART+1,c
  5375  001334  0E13               	movlw	low STR_3
  5376  001336  6E21               	movwf	?_putsUSART,c
  5377  001338  ECB3  F015         	call	_putsUSART	;wreg free
  5378                           
  5379                           ;DataCommsTask.c: 167: putsUSART( "\r\n" );
  5380  00133C  0E0D               	movlw	high STR_4
  5381  00133E  6E22               	movwf	?_putsUSART+1,c
  5382  001340  0E47               	movlw	low STR_4
  5383  001342  6E21               	movwf	?_putsUSART,c
  5384  001344  ECB3  F015         	call	_putsUSART	;wreg free
  5385                           
  5386                           ;DataCommsTask.c: 170: data[0] = 'c';
  5387  001348  0100               	movlb	0	; () banked
  5388  00134A  6FEF               	movwf	??_CanCommsTask& (0+255),b
  5389  00134C  0E63               	movlw	99
  5390  00134E  0100               	movlb	0	; () banked
  5391  001350  0100               	movlb	0	; () banked
  5392  001352  6FBD               	movwf	_data& (0+255),b
  5393  001354  0100               	movlb	0	; () banked
  5394  001356  51EF               	movf	??_CanCommsTask& (0+255),w,b
  5395                           
  5396                           ; BSR set to: 0
  5397                           ;DataCommsTask.c: 172: ECANSendMessage(0x123, &data[0], sizeof( data[0] ), ECAN_TX_STD_F
      +                          RAME);
  5398  001358  0E23               	movlw	35
  5399  00135A  0100               	movlb	0	; () banked
  5400  00135C  0100               	movlb	0	; () banked
  5401  00135E  6FC7               	movwf	?_ECANSendMessage& (0+255),b
  5402  001360  0E01               	movlw	1
  5403  001362  0100               	movlb	0	; () banked
  5404  001364  6FC8               	movwf	(?_ECANSendMessage+1)& (0+255),b
  5405  001366  0E00               	movlw	0
  5406  001368  0100               	movlb	0	; () banked
  5407  00136A  6FC9               	movwf	(?_ECANSendMessage+2)& (0+255),b
  5408  00136C  0E00               	movlw	0
  5409  00136E  0100               	movlb	0	; () banked
  5410  001370  6FCA               	movwf	(?_ECANSendMessage+3)& (0+255),b
  5411  001372  0100               	movlb	0	; () banked
  5412  001374  0E00               	movlw	high _data
  5413  001376  0100               	movlb	0	; () banked
  5414  001378  0100               	movlb	0	; () banked
  5415  00137A  6FCC               	movwf	(?_ECANSendMessage+5)& (0+255),b
  5416  00137C  0100               	movlb	0	; () banked
  5417  00137E  0EBD               	movlw	low _data
  5418  001380  0100               	movlb	0	; () banked
  5419  001382  6FCB               	movwf	(?_ECANSendMessage+4)& (0+255),b
  5420  001384  0100               	movlb	0	; () banked
  5421  001386  6FEF               	movwf	??_CanCommsTask& (0+255),b
  5422  001388  0E01               	movlw	1
  5423  00138A  0100               	movlb	0	; () banked
  5424  00138C  0100               	movlb	0	; () banked
  5425  00138E  6FCD               	movwf	(?_ECANSendMessage+6)& (0+255),b
  5426  001390  0100               	movlb	0	; () banked
  5427  001392  51EF               	movf	??_CanCommsTask& (0+255),w,b
  5428  001394  0100               	movlb	0	; () banked
  5429  001396  6FF0               	movwf	(??_CanCommsTask+1)& (0+255),b
  5430  001398  0E00               	movlw	0
  5431  00139A  0100               	movlb	0	; () banked
  5432  00139C  0100               	movlb	0	; () banked
  5433  00139E  6FCE               	movwf	(?_ECANSendMessage+7)& (0+255),b
  5434  0013A0  0100               	movlb	0	; () banked
  5435  0013A2  51F0               	movf	(??_CanCommsTask+1)& (0+255),w,b
  5436  0013A4  EC56  F00D         	call	_ECANSendMessage	;wreg free
  5437                           
  5438                           ;DataCommsTask.c: 175: putsUSART( "Line: " );
  5439  0013A8  0E0D               	movlw	high STR_1
  5440  0013AA  6E22               	movwf	?_putsUSART+1,c
  5441  0013AC  0E40               	movlw	low STR_1
  5442  0013AE  6E21               	movwf	?_putsUSART,c
  5443  0013B0  ECB3  F015         	call	_putsUSART	;wreg free
  5444                           
  5445                           ;DataCommsTask.c: 176: str[0] = 0;
  5446  0013B4  0100               	movlb	0	; () banked
  5447  0013B6  6FEF               	movwf	??_CanCommsTask& (0+255),b
  5448  0013B8  0E00               	movlw	0
  5449  0013BA  0100               	movlb	0	; () banked
  5450  0013BC  0100               	movlb	0	; () banked
  5451  0013BE  6FF7               	movwf	CanCommsTask@str_333& (0+255),b
  5452  0013C0  0100               	movlb	0	; () banked
  5453  0013C2  51EF               	movf	??_CanCommsTask& (0+255),w,b
  5454                           
  5455                           ; BSR set to: 0
  5456                           ;DataCommsTask.c: 177: sprintf(str, "%d", 177);
  5457  0013C4  0100               	movlb	0	; () banked
  5458  0013C6  0E00               	movlw	high CanCommsTask@str_333
  5459  0013C8  0100               	movlb	0	; () banked
  5460  0013CA  0100               	movlb	0	; () banked
  5461  0013CC  6FC8               	movwf	(?_sprintf+1)& (0+255),b
  5462  0013CE  0100               	movlb	0	; () banked
  5463  0013D0  0EF7               	movlw	low CanCommsTask@str_333
  5464  0013D2  0100               	movlb	0	; () banked
  5465  0013D4  6FC7               	movwf	?_sprintf& (0+255),b
  5466  0013D6  0E0D               	movlw	high STR_10
  5467  0013D8  0100               	movlb	0	; () banked
  5468  0013DA  0100               	movlb	0	; () banked
  5469  0013DC  6FCA               	movwf	(?_sprintf+3)& (0+255),b
  5470  0013DE  0E4A               	movlw	low STR_10
  5471  0013E0  0100               	movlb	0	; () banked
  5472  0013E2  6FC9               	movwf	(?_sprintf+2)& (0+255),b
  5473  0013E4  0E00               	movlw	0
  5474  0013E6  0100               	movlb	0	; () banked
  5475  0013E8  0100               	movlb	0	; () banked
  5476  0013EA  6FCC               	movwf	(?_sprintf+5)& (0+255),b
  5477  0013EC  0EB1               	movlw	177
  5478  0013EE  0100               	movlb	0	; () banked
  5479  0013F0  6FCB               	movwf	(?_sprintf+4)& (0+255),b
  5480  0013F2  EC70  F00C         	call	_sprintf	;wreg free
  5481                           
  5482                           ;DataCommsTask.c: 178: putsUSART( str );
  5483  0013F6  0100               	movlb	0	; () banked
  5484  0013F8  0E00               	movlw	high CanCommsTask@str_333
  5485  0013FA  6E22               	movwf	?_putsUSART+1,c
  5486  0013FC  0100               	movlb	0	; () banked
  5487  0013FE  0EF7               	movlw	low CanCommsTask@str_333
  5488  001400  6E21               	movwf	?_putsUSART,c
  5489  001402  ECB3  F015         	call	_putsUSART	;wreg free
  5490                           
  5491                           ;DataCommsTask.c: 179: putsUSART( " File: " );
  5492  001406  0E0D               	movlw	high STR_2
  5493  001408  6E22               	movwf	?_putsUSART+1,c
  5494  00140A  0E38               	movlw	low STR_2
  5495  00140C  6E21               	movwf	?_putsUSART,c
  5496  00140E  ECB3  F015         	call	_putsUSART	;wreg free
  5497                           
  5498                           ;DataCommsTask.c: 180: putsUSART( "source/DataCommsTask.c" );
  5499  001412  0E0D               	movlw	high STR_3
  5500  001414  6E22               	movwf	?_putsUSART+1,c
  5501  001416  0E13               	movlw	low STR_3
  5502  001418  6E21               	movwf	?_putsUSART,c
  5503  00141A  ECB3  F015         	call	_putsUSART	;wreg free
  5504                           
  5505                           ;DataCommsTask.c: 181: putsUSART( "\r\n" );
  5506  00141E  0E0D               	movlw	high STR_4
  5507  001420  6E22               	movwf	?_putsUSART+1,c
  5508  001422  0E47               	movlw	low STR_4
  5509  001424  6E21               	movwf	?_putsUSART,c
  5510  001426  ECB3  F015         	call	_putsUSART	;wreg free
  5511                           
  5512                           ;DataCommsTask.c: 199: CalculateFutureTime( &m_DataWriteTimer, 0, 3, 0 );
  5513  00142A  0100               	movlb	0	; () banked
  5514  00142C  0E00               	movlw	high _m_DataWriteTimer	;volatile
  5515  00142E  6E21               	movwf	?_CalculateFutureTime+1,c
  5516  001430  0100               	movlb	0	; () banked
  5517  001432  0EB8               	movlw	low _m_DataWriteTimer	;volatile
  5518  001434  6E20               	movwf	?_CalculateFutureTime,c
  5519  001436  0100               	movlb	0	; () banked
  5520  001438  6FEF               	movwf	??_CanCommsTask& (0+255),b
  5521  00143A  0E00               	movlw	0
  5522  00143C  6E22               	movwf	?_CalculateFutureTime+2,c
  5523  00143E  0100               	movlb	0	; () banked
  5524  001440  51EF               	movf	??_CanCommsTask& (0+255),w,b
  5525  001442  0100               	movlb	0	; () banked
  5526  001444  6FF0               	movwf	(??_CanCommsTask+1)& (0+255),b
  5527  001446  0E03               	movlw	3
  5528  001448  6E23               	movwf	?_CalculateFutureTime+3,c
  5529  00144A  0100               	movlb	0	; () banked
  5530  00144C  51F0               	movf	(??_CanCommsTask+1)& (0+255),w,b
  5531  00144E  0100               	movlb	0	; () banked
  5532  001450  6FF1               	movwf	(??_CanCommsTask+2)& (0+255),b
  5533  001452  0E00               	movlw	0
  5534  001454  6E24               	movwf	?_CalculateFutureTime+4,c
  5535  001456  0100               	movlb	0	; () banked
  5536  001458  51F1               	movf	(??_CanCommsTask+2)& (0+255),w,b
  5537  00145A  EC45  F00A         	call	_CalculateFutureTime	;wreg free
  5538  00145E                     l3668:
  5539                           
  5540                           ;DataCommsTask.c: 200: }
  5541                           ;DataCommsTask.c: 201: DataCommsReadState = e_CANRead;
  5542  00145E  0100               	movlb	0	; () banked
  5543  001460  6FEF               	movwf	??_CanCommsTask& (0+255),b
  5544  001462  0E01               	movlw	1
  5545  001464                     L18:
  5546  001464  0100               	movlb	0	; () banked
  5547  001466  0100               	movlb	0	; () banked
  5548  001468  6F60               	movwf	CanCommsTask@DataCommsReadState& (0+255),b
  5549  00146A  0100               	movlb	0	; () banked
  5550  00146C  51EF               	movf	??_CanCommsTask& (0+255),w,b
  5551                           
  5552                           ;DataCommsTask.c: 202: break;
  5553  00146E  D00C               	goto	l120
  5554  001470                     l3672:
  5555  001470  0100               	movlb	0	; () banked
  5556  001472  0100               	movlb	0	; () banked
  5557  001474  5160               	movf	CanCommsTask@DataCommsReadState& (0+255),w,b
  5558                           
  5559                           ; Switch size 1, requested type "space"
  5560                           ; Number of cases is 3, Range of values is 0 to 2
  5561                           ; switch strategies available:
  5562                           ; Name         Instructions Cycles
  5563                           ; simple_byte           10     6 (average)
  5564                           ;	Chosen strategy is simple_byte
  5565  001476  0A00               	xorlw	0	; case 0
  5566  001478  B4D8               	btfsc	status,2,c
  5567  00147A  D64B               	goto	l3582
  5568  00147C  0A01               	xorlw	1	; case 1
  5569  00147E  B4D8               	btfsc	status,2,c
  5570  001480  D69F               	goto	l3610
  5571  001482  0A03               	xorlw	3	; case 2
  5572  001484  B4D8               	btfsc	status,2,c
  5573  001486  D714               	goto	l3632
  5574  001488                     l120:
  5575                           
  5576                           ; BSR set to: 0
  5577  001488  0012               	return	
  5578  00148A                     __end_of_CanCommsTask:
  5579                           	opt stack 0
  5580                           tblptru	equ	0xFF8
  5581                           tblptrh	equ	0xFF7
  5582                           tblptrl	equ	0xFF6
  5583                           tablat	equ	0xFF5
  5584                           prodh	equ	0xFF4
  5585                           prodl	equ	0xFF3
  5586                           intcon	equ	0xFF2
  5587                           postinc0	equ	0xFEE
  5588                           wreg	equ	0xFE8
  5589                           postdec1	equ	0xFE5
  5590                           fsr1l	equ	0xFE1
  5591                           indf2	equ	0xFDF
  5592                           fsr2h	equ	0xFDA
  5593                           fsr2l	equ	0xFD9
  5594                           status	equ	0xFD8
  5595                           
  5596 ;; *************** function _CalculateFutureTime *****************
  5597 ;; Defined at:
  5598 ;;		line 86 in file "source/TimerTask.c"
  5599 ;; Parameters:    Size  Location     Type
  5600 ;;  theTimer        2   31[COMRAM] PTR volatile struct ATim
  5601 ;;		 -> m_Keys(85), m_DataWriteTimer(5), 
  5602 ;;  theMinutes      1   33[COMRAM] unsigned char 
  5603 ;;  theSeconds      1   34[COMRAM] unsigned char 
  5604 ;;  theHalfSecon    1   35[COMRAM] unsigned char 
  5605 ;; Auto vars:     Size  Location     Type
  5606 ;;  CarryOver       1   41[COMRAM] volatile unsigned char 
  5607 ;; Return value:  Size  Location     Type
  5608 ;;		None               void
  5609 ;; Registers used:
  5610 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  5611 ;; Tracked objects:
  5612 ;;		On entry : 0/0
  5613 ;;		On exit  : 0/0
  5614 ;;		Unchanged: 0/0
  5615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5616 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5617 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5618 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5619 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5620 ;;Total ram usage:       11 bytes
  5621 ;; Hardware stack levels used:    1
  5622 ;; Hardware stack levels required when called:    2
  5623 ;; This function calls:
  5624 ;;		Nothing
  5625 ;; This function is called by:
  5626 ;;		_CanCommsTask
  5627 ;;		_MonitorButton
  5628 ;;		_GetColour
  5629 ;;		_RedGreenFlash
  5630 ;;		_DimmedColourA
  5631 ;;		_RapidFlashColourB
  5632 ;;		_ColourMix
  5633 ;; This function uses a non-reentrant model
  5634 ;;
  5635                           
  5636                           	psect	text32
  5637  00148A                     __ptext32:
  5638                           	opt stack 0
  5639  00148A                     _CalculateFutureTime:
  5640                           	opt stack 23
  5641                           
  5642                           ;TimerTask.c: 87: volatile uint8_t CarryOver = 0;
  5643                           
  5644                           ; BSR set to: 0
  5645                           ;incstack = 0
  5646                           ;incstack = 0
  5647  00148A  0E00               	movlw	0
  5648  00148C  6E2A               	movwf	CalculateFutureTime@CarryOver,c	;volatile
  5649                           
  5650                           ;TimerTask.c: 91: if ( theHalfSeconds > c_NoMsecInSec )
  5651  00148E  0E11               	movlw	low _c_NoMsecInSec
  5652  001490  6EF6               	movwf	tblptrl,c
  5653  001492  0E0D               	movlw	high _c_NoMsecInSec
  5654  001494  6EF7               	movwf	tblptrh,c
  5655  001496  0008               	tblrd		*
  5656  001498  CFF5 F025          	movff	tablat,??_CalculateFutureTime
  5657  00149C  5024               	movf	CalculateFutureTime@theHalfSeconds,w,c
  5658  00149E  5C25               	subwf	??_CalculateFutureTime,w,c
  5659  0014A0  B0D8               	btfsc	status,0,c
  5660  0014A2  D007               	goto	l3992
  5661                           
  5662                           ;TimerTask.c: 92: {
  5663                           ;TimerTask.c: 93: theHalfSeconds = c_NoMsecInSec;
  5664  0014A4  0E11               	movlw	low _c_NoMsecInSec
  5665  0014A6  6EF6               	movwf	tblptrl,c
  5666  0014A8  0E0D               	movlw	high _c_NoMsecInSec
  5667  0014AA  6EF7               	movwf	tblptrh,c
  5668  0014AC  0008               	tblrd		*
  5669  0014AE  CFF5 F024          	movff	tablat,CalculateFutureTime@theHalfSeconds
  5670  0014B2                     l3992:
  5671                           
  5672                           ;TimerTask.c: 94: }
  5673                           ;TimerTask.c: 96: if ( theSeconds >= c_NoSecInMinOrMinInHr )
  5674  0014B2  0E12               	movlw	low _c_NoSecInMinOrMinInHr
  5675  0014B4  6EF6               	movwf	tblptrl,c
  5676  0014B6  0E0D               	movlw	high _c_NoSecInMinOrMinInHr
  5677  0014B8  6EF7               	movwf	tblptrh,c
  5678  0014BA  0008               	tblrd		*
  5679  0014BC  50F5               	movf	tablat,w,c
  5680  0014BE  5C23               	subwf	CalculateFutureTime@theSeconds,w,c
  5681  0014C0  A0D8               	btfss	status,0,c
  5682  0014C2  D009               	goto	l190
  5683                           
  5684                           ;TimerTask.c: 97: {
  5685                           ;TimerTask.c: 98: theSeconds = c_NoSecInMinOrMinInHr - 1;
  5686  0014C4  0E12               	movlw	low _c_NoSecInMinOrMinInHr
  5687  0014C6  6EF6               	movwf	tblptrl,c
  5688  0014C8  0E0D               	movlw	high _c_NoSecInMinOrMinInHr
  5689  0014CA  6EF7               	movwf	tblptrh,c
  5690  0014CC  0008               	tblrd		*
  5691  0014CE  CFF5 F025          	movff	tablat,??_CalculateFutureTime
  5692  0014D2  0425               	decf	??_CalculateFutureTime,w,c
  5693  0014D4  6E23               	movwf	CalculateFutureTime@theSeconds,c
  5694  0014D6                     l190:
  5695                           
  5696                           ;TimerTask.c: 99: }
  5697                           ;TimerTask.c: 101: if ( theMinutes >= c_NoSecInMinOrMinInHr )
  5698  0014D6  0E12               	movlw	low _c_NoSecInMinOrMinInHr
  5699  0014D8  6EF6               	movwf	tblptrl,c
  5700  0014DA  0E0D               	movlw	high _c_NoSecInMinOrMinInHr
  5701  0014DC  6EF7               	movwf	tblptrh,c
  5702  0014DE  0008               	tblrd		*
  5703  0014E0  50F5               	movf	tablat,w,c
  5704  0014E2  5C22               	subwf	CalculateFutureTime@theMinutes,w,c
  5705  0014E4  A0D8               	btfss	status,0,c
  5706  0014E6  D009               	goto	l191
  5707                           
  5708                           ;TimerTask.c: 102: {
  5709                           ;TimerTask.c: 103: theMinutes = c_NoSecInMinOrMinInHr - 1;
  5710  0014E8  0E12               	movlw	low _c_NoSecInMinOrMinInHr
  5711  0014EA  6EF6               	movwf	tblptrl,c
  5712  0014EC  0E0D               	movlw	high _c_NoSecInMinOrMinInHr
  5713  0014EE  6EF7               	movwf	tblptrh,c
  5714  0014F0  0008               	tblrd		*
  5715  0014F2  CFF5 F025          	movff	tablat,??_CalculateFutureTime
  5716  0014F6  0425               	decf	??_CalculateFutureTime,w,c
  5717  0014F8  6E22               	movwf	CalculateFutureTime@theMinutes,c
  5718  0014FA                     l191:
  5719                           
  5720                           ;TimerTask.c: 104: }
  5721                           ;TimerTask.c: 108: if( ( theHalfSeconds + m_CurrentTime.Millisecond ) <= c_NoMsecInSec )
  5722  0014FA  5032               	movf	_m_CurrentTime,w,c	;volatile
  5723  0014FC  C024  F025         	movff	CalculateFutureTime@theHalfSeconds,??_CalculateFutureTime
  5724  001500  6A26               	clrf	(??_CalculateFutureTime+1)& (0+255),c
  5725  001502  2625               	addwf	??_CalculateFutureTime,f,c
  5726  001504  0E00               	movlw	0
  5727  001506  2226               	addwfc	??_CalculateFutureTime+1,f,c
  5728  001508  0E11               	movlw	low _c_NoMsecInSec
  5729  00150A  6EF6               	movwf	tblptrl,c
  5730  00150C  0E0D               	movlw	high _c_NoMsecInSec
  5731  00150E  6EF7               	movwf	tblptrh,c
  5732  001510  0008               	tblrd		*
  5733  001512  50F5               	movf	tablat,w,c
  5734  001514  6E27               	movwf	(??_CalculateFutureTime+2)& (0+255),c
  5735  001516  6A28               	clrf	(??_CalculateFutureTime+3)& (0+255),c
  5736  001518  5028               	movf	??_CalculateFutureTime+3,w,c
  5737  00151A  0A80               	xorlw	128
  5738  00151C  6E29               	movwf	(??_CalculateFutureTime+4)& (0+255),c
  5739  00151E  5025               	movf	??_CalculateFutureTime,w,c
  5740  001520  5C27               	subwf	??_CalculateFutureTime+2,w,c
  5741  001522  5026               	movf	??_CalculateFutureTime+1,w,c
  5742  001524  0A80               	xorlw	128
  5743  001526  5829               	subwfb	(??_CalculateFutureTime+4)& (0+255),w,c
  5744  001528  A0D8               	btfss	status,0,c
  5745  00152A  D00A               	goto	l4002
  5746                           
  5747                           ;TimerTask.c: 109: {
  5748                           ;TimerTask.c: 110: theTimer->Millisecond = theHalfSeconds + m_CurrentTime.Millisecond;
  5749  00152C  5032               	movf	_m_CurrentTime,w,c	;volatile
  5750  00152E  2424               	addwf	CalculateFutureTime@theHalfSeconds,w,c
  5751  001530  C020  FFD9         	movff	CalculateFutureTime@theTimer,fsr2l
  5752  001534  C021  FFDA         	movff	CalculateFutureTime@theTimer+1,fsr2h
  5753  001538  6EDF               	movwf	indf2,c
  5754                           
  5755                           ;TimerTask.c: 111: CarryOver = 0;
  5756  00153A  0E00               	movlw	0
  5757  00153C  6E2A               	movwf	CalculateFutureTime@CarryOver,c	;volatile
  5758                           
  5759                           ;TimerTask.c: 112: }
  5760  00153E  D010               	goto	l4006
  5761  001540                     l4002:
  5762                           
  5763                           ;TimerTask.c: 113: else
  5764                           ;TimerTask.c: 114: {
  5765                           ;TimerTask.c: 115: CarryOver = 1;
  5766  001540  0E01               	movlw	1
  5767  001542  6E2A               	movwf	CalculateFutureTime@CarryOver,c	;volatile
  5768                           
  5769                           ;TimerTask.c: 116: theTimer->Millisecond = ( theHalfSeconds + m_CurrentTime.Millisecond 
      +                          ) - c_NoMsecInSec;
  5770  001544  0E11               	movlw	low _c_NoMsecInSec
  5771  001546  6EF6               	movwf	tblptrl,c
  5772  001548  0E0D               	movlw	high _c_NoMsecInSec
  5773  00154A  6EF7               	movwf	tblptrh,c
  5774  00154C  0008               	tblrd		*
  5775  00154E  50F5               	movf	tablat,w,c
  5776  001550  0800               	sublw	0
  5777  001552  2424               	addwf	CalculateFutureTime@theHalfSeconds,w,c
  5778  001554  2432               	addwf	_m_CurrentTime,w,c	;volatile
  5779  001556  C020  FFD9         	movff	CalculateFutureTime@theTimer,fsr2l
  5780  00155A  C021  FFDA         	movff	CalculateFutureTime@theTimer+1,fsr2h
  5781  00155E  6EDF               	movwf	indf2,c
  5782  001560                     l4006:
  5783                           
  5784                           ;TimerTask.c: 117: }
  5785                           ;TimerTask.c: 119: if( ( theSeconds + m_CurrentTime.Second + CarryOver ) < c_NoSecInMinO
      +                          rMinInHr )
  5786  001560  0E12               	movlw	low _c_NoSecInMinOrMinInHr
  5787  001562  6EF6               	movwf	tblptrl,c
  5788  001564  0E0D               	movlw	high _c_NoSecInMinOrMinInHr
  5789  001566  6EF7               	movwf	tblptrh,c
  5790  001568  0008               	tblrd		*
  5791  00156A  50F5               	movf	tablat,w,c
  5792  00156C  6E25               	movwf	??_CalculateFutureTime& (0+255),c
  5793  00156E  6A26               	clrf	(??_CalculateFutureTime+1)& (0+255),c
  5794  001570  5033               	movf	_m_CurrentTime+1,w,c	;volatile
  5795  001572  C023  F027         	movff	CalculateFutureTime@theSeconds,??_CalculateFutureTime+2
  5796  001576  6A28               	clrf	(??_CalculateFutureTime+3)& (0+255),c
  5797  001578  2627               	addwf	??_CalculateFutureTime+2,f,c
  5798  00157A  0E00               	movlw	0
  5799  00157C  2228               	addwfc	??_CalculateFutureTime+3,f,c
  5800  00157E  502A               	movf	CalculateFutureTime@CarryOver,w,c	;volatile
  5801  001580  2627               	addwf	??_CalculateFutureTime+2,f,c
  5802  001582  0E00               	movlw	0
  5803  001584  2228               	addwfc	??_CalculateFutureTime+3,f,c
  5804  001586  5028               	movf	??_CalculateFutureTime+3,w,c
  5805  001588  0A80               	xorlw	128
  5806  00158A  6E29               	movwf	(??_CalculateFutureTime+4)& (0+255),c
  5807  00158C  5025               	movf	??_CalculateFutureTime,w,c
  5808  00158E  5C27               	subwf	??_CalculateFutureTime+2,w,c
  5809  001590  5026               	movf	??_CalculateFutureTime+1,w,c
  5810  001592  0A80               	xorlw	128
  5811  001594  5829               	subwfb	(??_CalculateFutureTime+4)& (0+255),w,c
  5812  001596  B0D8               	btfsc	status,0,c
  5813  001598  D00C               	goto	l4012
  5814                           
  5815                           ;TimerTask.c: 120: {
  5816                           ;TimerTask.c: 121: theTimer->Second = theSeconds + m_CurrentTime.Second + CarryOver;
  5817  00159A  EE20 F001          	lfsr	2,1
  5818  00159E  5020               	movf	CalculateFutureTime@theTimer,w,c
  5819  0015A0  26D9               	addwf	fsr2l,f,c
  5820  0015A2  5021               	movf	CalculateFutureTime@theTimer+1,w,c
  5821  0015A4  22DA               	addwfc	fsr2h,f,c
  5822  0015A6  5033               	movf	_m_CurrentTime+1,w,c	;volatile
  5823  0015A8  2423               	addwf	CalculateFutureTime@theSeconds,w,c
  5824  0015AA  242A               	addwf	CalculateFutureTime@CarryOver,w,c	;volatile
  5825  0015AC  6EDF               	movwf	indf2,c
  5826                           
  5827                           ;TimerTask.c: 122: CarryOver = 0;
  5828  0015AE  0E00               	movlw	0
  5829  0015B0  D012               	goto	L19
  5830  0015B2                     l4012:
  5831                           
  5832                           ;TimerTask.c: 124: else
  5833                           ;TimerTask.c: 125: {
  5834                           ;TimerTask.c: 126: theTimer->Second = ( theSeconds + m_CurrentTime.Second + CarryOver ) 
      +                          - c_NoSecInMinOrMinInHr;
  5835  0015B2  EE20 F001          	lfsr	2,1
  5836  0015B6  5020               	movf	CalculateFutureTime@theTimer,w,c
  5837  0015B8  26D9               	addwf	fsr2l,f,c
  5838  0015BA  5021               	movf	CalculateFutureTime@theTimer+1,w,c
  5839  0015BC  22DA               	addwfc	fsr2h,f,c
  5840  0015BE  0E12               	movlw	low _c_NoSecInMinOrMinInHr
  5841  0015C0  6EF6               	movwf	tblptrl,c
  5842  0015C2  0E0D               	movlw	high _c_NoSecInMinOrMinInHr
  5843  0015C4  6EF7               	movwf	tblptrh,c
  5844  0015C6  0008               	tblrd		*
  5845  0015C8  50F5               	movf	tablat,w,c
  5846  0015CA  0800               	sublw	0
  5847  0015CC  2433               	addwf	_m_CurrentTime+1,w,c	;volatile
  5848  0015CE  2423               	addwf	CalculateFutureTime@theSeconds,w,c
  5849  0015D0  242A               	addwf	CalculateFutureTime@CarryOver,w,c	;volatile
  5850  0015D2  6EDF               	movwf	indf2,c
  5851                           
  5852                           ;TimerTask.c: 127: CarryOver = 1;
  5853  0015D4  0E01               	movlw	1
  5854  0015D6                     L19:
  5855  0015D6  6E2A               	movwf	CalculateFutureTime@CarryOver,c	;volatile
  5856                           
  5857                           ;TimerTask.c: 128: }
  5858                           ;TimerTask.c: 130: if( ( theMinutes + m_CurrentTime.Minute + CarryOver ) < c_NoSecInMinO
      +                          rMinInHr )
  5859  0015D8  0E12               	movlw	low _c_NoSecInMinOrMinInHr
  5860  0015DA  6EF6               	movwf	tblptrl,c
  5861  0015DC  0E0D               	movlw	high _c_NoSecInMinOrMinInHr
  5862  0015DE  6EF7               	movwf	tblptrh,c
  5863  0015E0  0008               	tblrd		*
  5864  0015E2  50F5               	movf	tablat,w,c
  5865  0015E4  6E25               	movwf	??_CalculateFutureTime& (0+255),c
  5866  0015E6  6A26               	clrf	(??_CalculateFutureTime+1)& (0+255),c
  5867  0015E8  5034               	movf	_m_CurrentTime+2,w,c	;volatile
  5868  0015EA  C022  F027         	movff	CalculateFutureTime@theMinutes,??_CalculateFutureTime+2
  5869  0015EE  6A28               	clrf	(??_CalculateFutureTime+3)& (0+255),c
  5870  0015F0  2627               	addwf	??_CalculateFutureTime+2,f,c
  5871  0015F2  0E00               	movlw	0
  5872  0015F4  2228               	addwfc	??_CalculateFutureTime+3,f,c
  5873  0015F6  502A               	movf	CalculateFutureTime@CarryOver,w,c	;volatile
  5874  0015F8  2627               	addwf	??_CalculateFutureTime+2,f,c
  5875  0015FA  0E00               	movlw	0
  5876  0015FC  2228               	addwfc	??_CalculateFutureTime+3,f,c
  5877  0015FE  5028               	movf	??_CalculateFutureTime+3,w,c
  5878  001600  0A80               	xorlw	128
  5879  001602  6E29               	movwf	(??_CalculateFutureTime+4)& (0+255),c
  5880  001604  5025               	movf	??_CalculateFutureTime,w,c
  5881  001606  5C27               	subwf	??_CalculateFutureTime+2,w,c
  5882  001608  5026               	movf	??_CalculateFutureTime+1,w,c
  5883  00160A  0A80               	xorlw	128
  5884  00160C  5829               	subwfb	(??_CalculateFutureTime+4)& (0+255),w,c
  5885  00160E  B0D8               	btfsc	status,0,c
  5886  001610  D00C               	goto	l4022
  5887                           
  5888                           ;TimerTask.c: 131: {
  5889                           ;TimerTask.c: 132: theTimer->Minute = theMinutes + m_CurrentTime.Minute + CarryOver;
  5890  001612  EE20 F002          	lfsr	2,2
  5891  001616  5020               	movf	CalculateFutureTime@theTimer,w,c
  5892  001618  26D9               	addwf	fsr2l,f,c
  5893  00161A  5021               	movf	CalculateFutureTime@theTimer+1,w,c
  5894  00161C  22DA               	addwfc	fsr2h,f,c
  5895  00161E  5034               	movf	_m_CurrentTime+2,w,c	;volatile
  5896  001620  2422               	addwf	CalculateFutureTime@theMinutes,w,c
  5897  001622  242A               	addwf	CalculateFutureTime@CarryOver,w,c	;volatile
  5898  001624  6EDF               	movwf	indf2,c
  5899                           
  5900                           ;TimerTask.c: 133: CarryOver = 0;
  5901  001626  0E00               	movlw	0
  5902  001628  D012               	goto	L20
  5903  00162A                     l4022:
  5904                           
  5905                           ;TimerTask.c: 135: else
  5906                           ;TimerTask.c: 136: {
  5907                           ;TimerTask.c: 137: theTimer->Minute = ( theMinutes + m_CurrentTime.Minute + CarryOver ) 
      +                          - c_NoSecInMinOrMinInHr;
  5908  00162A  EE20 F002          	lfsr	2,2
  5909  00162E  5020               	movf	CalculateFutureTime@theTimer,w,c
  5910  001630  26D9               	addwf	fsr2l,f,c
  5911  001632  5021               	movf	CalculateFutureTime@theTimer+1,w,c
  5912  001634  22DA               	addwfc	fsr2h,f,c
  5913  001636  0E12               	movlw	low _c_NoSecInMinOrMinInHr
  5914  001638  6EF6               	movwf	tblptrl,c
  5915  00163A  0E0D               	movlw	high _c_NoSecInMinOrMinInHr
  5916  00163C  6EF7               	movwf	tblptrh,c
  5917  00163E  0008               	tblrd		*
  5918  001640  50F5               	movf	tablat,w,c
  5919  001642  0800               	sublw	0
  5920  001644  2434               	addwf	_m_CurrentTime+2,w,c	;volatile
  5921  001646  2422               	addwf	CalculateFutureTime@theMinutes,w,c
  5922  001648  242A               	addwf	CalculateFutureTime@CarryOver,w,c	;volatile
  5923  00164A  6EDF               	movwf	indf2,c
  5924                           
  5925                           ;TimerTask.c: 138: CarryOver = 1;
  5926  00164C  0E01               	movlw	1
  5927  00164E                     L20:
  5928  00164E  6E2A               	movwf	CalculateFutureTime@CarryOver,c	;volatile
  5929                           
  5930                           ;TimerTask.c: 139: }
  5931                           ;TimerTask.c: 141: if( ( m_CurrentTime.Hour + CarryOver ) < c_NoHrInDay )
  5932  001650  0E10               	movlw	low _c_NoHrInDay
  5933  001652  6EF6               	movwf	tblptrl,c
  5934  001654  0E0D               	movlw	high _c_NoHrInDay
  5935  001656  6EF7               	movwf	tblptrh,c
  5936  001658  0008               	tblrd		*
  5937  00165A  50F5               	movf	tablat,w,c
  5938  00165C  6E25               	movwf	??_CalculateFutureTime& (0+255),c
  5939  00165E  6A26               	clrf	(??_CalculateFutureTime+1)& (0+255),c
  5940  001660  502A               	movf	CalculateFutureTime@CarryOver,w,c	;volatile
  5941  001662  C035  F027         	movff	_m_CurrentTime+3,??_CalculateFutureTime+2	;volatile
  5942  001666  6A28               	clrf	(??_CalculateFutureTime+3)& (0+255),c
  5943  001668  2627               	addwf	??_CalculateFutureTime+2,f,c
  5944  00166A  0E00               	movlw	0
  5945  00166C  2228               	addwfc	??_CalculateFutureTime+3,f,c
  5946  00166E  5028               	movf	??_CalculateFutureTime+3,w,c
  5947  001670  0A80               	xorlw	128
  5948  001672  6E29               	movwf	(??_CalculateFutureTime+4)& (0+255),c
  5949  001674  5025               	movf	??_CalculateFutureTime,w,c
  5950  001676  5C27               	subwf	??_CalculateFutureTime+2,w,c
  5951  001678  5026               	movf	??_CalculateFutureTime+1,w,c
  5952  00167A  0A80               	xorlw	128
  5953  00167C  5829               	subwfb	(??_CalculateFutureTime+4)& (0+255),w,c
  5954  00167E  B0D8               	btfsc	status,0,c
  5955  001680  D00C               	goto	l4032
  5956                           
  5957                           ;TimerTask.c: 142: {
  5958                           ;TimerTask.c: 143: theTimer->Hour = m_CurrentTime.Hour + CarryOver;
  5959  001682  EE20 F003          	lfsr	2,3
  5960  001686  5020               	movf	CalculateFutureTime@theTimer,w,c
  5961  001688  26D9               	addwf	fsr2l,f,c
  5962  00168A  5021               	movf	CalculateFutureTime@theTimer+1,w,c
  5963  00168C  22DA               	addwfc	fsr2h,f,c
  5964  00168E  5035               	movf	_m_CurrentTime+3,w,c	;volatile
  5965  001690  242A               	addwf	CalculateFutureTime@CarryOver,w,c	;volatile
  5966  001692  6EDF               	movwf	indf2,c
  5967                           
  5968                           ;TimerTask.c: 144: CarryOver = 0;
  5969  001694  0E00               	movlw	0
  5970  001696  6E2A               	movwf	CalculateFutureTime@CarryOver,c	;volatile
  5971                           
  5972                           ;TimerTask.c: 145: }
  5973  001698  D016               	goto	l201
  5974  00169A                     l4032:
  5975                           
  5976                           ;TimerTask.c: 146: else
  5977                           ;TimerTask.c: 147: {
  5978                           ;TimerTask.c: 148: if( ( m_CurrentTime.Day + 1 ) < (255) )
  5979  00169A  5036               	movf	_m_CurrentTime+4,w,c	;volatile
  5980  00169C  6E25               	movwf	??_CalculateFutureTime& (0+255),c
  5981  00169E  6A26               	clrf	(??_CalculateFutureTime+1)& (0+255),c
  5982  0016A0  0E01               	movlw	1
  5983  0016A2  2625               	addwf	??_CalculateFutureTime,f,c
  5984  0016A4  0E00               	movlw	0
  5985  0016A6  2226               	addwfc	??_CalculateFutureTime+1,f,c
  5986  0016A8  5026               	movf	??_CalculateFutureTime+1,w,c
  5987  0016AA  0A80               	xorlw	128
  5988  0016AC  0F80               	addlw	-128
  5989  0016AE  0EFF               	movlw	255
  5990  0016B0  B4D8               	btfsc	status,2,c
  5991  0016B2  5C25               	subwf	??_CalculateFutureTime,w,c
  5992  0016B4  B0D8               	btfsc	status,0,c
  5993  0016B6  D007               	goto	l201
  5994                           
  5995                           ;TimerTask.c: 149: {
  5996                           ;TimerTask.c: 150: theTimer->Day++;
  5997  0016B8  EE20 F004          	lfsr	2,4
  5998  0016BC  5020               	movf	CalculateFutureTime@theTimer,w,c
  5999  0016BE  26D9               	addwf	fsr2l,f,c
  6000  0016C0  5021               	movf	CalculateFutureTime@theTimer+1,w,c
  6001  0016C2  22DA               	addwfc	fsr2h,f,c
  6002  0016C4  2ADF               	incf	indf2,f,c
  6003  0016C6                     l201:
  6004  0016C6  0012               	return	
  6005  0016C8                     __end_of_CalculateFutureTime:
  6006                           	opt stack 0
  6007                           tblptru	equ	0xFF8
  6008                           tblptrh	equ	0xFF7
  6009                           tblptrl	equ	0xFF6
  6010                           tablat	equ	0xFF5
  6011                           prodh	equ	0xFF4
  6012                           prodl	equ	0xFF3
  6013                           intcon	equ	0xFF2
  6014                           postinc0	equ	0xFEE
  6015                           wreg	equ	0xFE8
  6016                           postdec1	equ	0xFE5
  6017                           fsr1l	equ	0xFE1
  6018                           indf2	equ	0xFDF
  6019                           fsr2h	equ	0xFDA
  6020                           fsr2l	equ	0xFD9
  6021                           status	equ	0xFD8
  6022                           
  6023 ;; *************** function _ECANSendMessage *****************
  6024 ;; Defined at:
  6025 ;;		line 617 in file "source/ECAN.c"
  6026 ;; Parameters:    Size  Location     Type
  6027 ;;  id              4    0[BANK0 ] unsigned long 
  6028 ;;  data            2    4[BANK0 ] PTR unsigned char 
  6029 ;;		 -> data(4), 
  6030 ;;  dataLen         1    6[BANK0 ] unsigned char 
  6031 ;;  msgFlags        1    7[BANK0 ] enum E16214
  6032 ;; Auto vars:     Size  Location     Type
  6033 ;;  pb             18    8[BANK0 ] PTR unsigned char [9]
  6034 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), 
  6035 ;;  ptr             2   31[BANK0 ] PTR unsigned char 
  6036 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), 
  6037 ;;  tempPtr         2   27[BANK0 ] PTR unsigned char 
  6038 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), 
  6039 ;;  i               1   30[BANK0 ] unsigned char 
  6040 ;;  temp            1   29[BANK0 ] unsigned char 
  6041 ;;  j               1   26[BANK0 ] unsigned char 
  6042 ;; Return value:  Size  Location     Type
  6043 ;;                  1    wreg      unsigned char 
  6044 ;; Registers used:
  6045 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6046 ;; Tracked objects:
  6047 ;;		On entry : 0/0
  6048 ;;		On exit  : 0/0
  6049 ;;		Unchanged: 0/0
  6050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6051 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6052 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6053 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6054 ;;      Totals:         1      33       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6055 ;;Total ram usage:       34 bytes
  6056 ;; Hardware stack levels used:    1
  6057 ;; Hardware stack levels required when called:    3
  6058 ;; This function calls:
  6059 ;;		__CANIDToRegs
  6060 ;; This function is called by:
  6061 ;;		_CanCommsTask
  6062 ;; This function uses a non-reentrant model
  6063 ;;
  6064                           
  6065                           	psect	text33
  6066  001AAC                     __ptext33:
  6067                           	opt stack 0
  6068  001AAC                     _ECANSendMessage:
  6069                           	opt stack 24
  6070                           
  6071                           ;ECAN.c: 628: BYTE i,j;
  6072                           ;ECAN.c: 629: BYTE *ptr, *tempPtr;
  6073                           ;ECAN.c: 630: BYTE* pb[9];
  6074                           ;ECAN.c: 631: BYTE temp;
  6075                           ;ECAN.c: 641: pb[0]=(BYTE*)&TXB0CON;
  6076                           
  6077                           ;incstack = 0
  6078                           ;incstack = 0
  6079  001AAC  010F               	movlb	15	; () banked
  6080  001AAE  0E0F               	movlw	15	;volatile
  6081  001AB0  0100               	movlb	0	; () banked
  6082  001AB2  0100               	movlb	0	; () banked
  6083  001AB4  6FD0               	movwf	(ECANSendMessage@pb+1)& (0+255),b
  6084  001AB6  010F               	movlb	15	; () banked
  6085  001AB8  0E40               	movlw	64	;volatile
  6086  001ABA  0100               	movlb	0	; () banked
  6087  001ABC  6FCF               	movwf	ECANSendMessage@pb& (0+255),b
  6088                           
  6089                           ;ECAN.c: 642: pb[1]=(BYTE*)&TXB1CON;
  6090  001ABE  010F               	movlb	15	; () banked
  6091  001AC0  0E0F               	movlw	15	;volatile
  6092  001AC2  0100               	movlb	0	; () banked
  6093  001AC4  0100               	movlb	0	; () banked
  6094  001AC6  6FD2               	movwf	(ECANSendMessage@pb+3)& (0+255),b
  6095  001AC8  010F               	movlb	15	; () banked
  6096  001ACA  0E30               	movlw	48	;volatile
  6097  001ACC  0100               	movlb	0	; () banked
  6098  001ACE  6FD1               	movwf	(ECANSendMessage@pb+2)& (0+255),b
  6099                           
  6100                           ;ECAN.c: 643: pb[2]=(BYTE*)&TXB2CON;
  6101  001AD0  010F               	movlb	15	; () banked
  6102  001AD2  0E0F               	movlw	15	;volatile
  6103  001AD4  0100               	movlb	0	; () banked
  6104  001AD6  0100               	movlb	0	; () banked
  6105  001AD8  6FD4               	movwf	(ECANSendMessage@pb+5)& (0+255),b
  6106  001ADA  010F               	movlb	15	; () banked
  6107  001ADC  0E20               	movlw	32	;volatile
  6108  001ADE  0100               	movlb	0	; () banked
  6109  001AE0  6FD3               	movwf	(ECANSendMessage@pb+4)& (0+255),b
  6110                           
  6111                           ; BSR set to: 0
  6112                           ;ECAN.c: 673: for ( i = 0; i < 2; i++ )
  6113  001AE2  6E2B               	movwf	??_ECANSendMessage& (0+255),c
  6114  001AE4  0E00               	movlw	0
  6115  001AE6  0100               	movlb	0	; () banked
  6116  001AE8  0100               	movlb	0	; () banked
  6117  001AEA  6FE5               	movwf	ECANSendMessage@i& (0+255),b
  6118  001AEC  502B               	movf	??_ECANSendMessage& (0+255),w,c
  6119  001AEE  D0A8               	goto	L22
  6120  001AF0                     l3938:
  6121                           
  6122                           ; BSR set to: 0
  6123                           ;ECAN.c: 688: {
  6124                           ;ECAN.c: 693: ptr = pb[i];
  6125  001AF0  0100               	movlb	0	; () banked
  6126  001AF2  0100               	movlb	0	; () banked
  6127  001AF4  51E5               	movf	ECANSendMessage@i& (0+255),w,b
  6128  001AF6  0D02               	mullw	2
  6129  001AF8  0100               	movlb	0	; () banked
  6130  001AFA  0ECF               	movlw	low ECANSendMessage@pb
  6131  001AFC  24F3               	addwf	prodl,w,c
  6132  001AFE  6ED9               	movwf	fsr2l,c
  6133  001B00  0100               	movlb	0	; () banked
  6134  001B02  0E00               	movlw	high ECANSendMessage@pb
  6135  001B04  20F4               	addwfc	prodh,w,c
  6136  001B06  6EDA               	movwf	fsr2h,c
  6137  001B08  0100               	movlb	0	; () banked
  6138  001B0A  CFDE F0E6          	movff	postinc2,ECANSendMessage@ptr
  6139  001B0E  0100               	movlb	0	; () banked
  6140  001B10  CFDD F0E7          	movff	postdec2,ECANSendMessage@ptr+1
  6141                           
  6142                           ; BSR set to: 0
  6143                           ;ECAN.c: 694: tempPtr = ptr;
  6144  001B14  C0E6  F0E2         	movff	ECANSendMessage@ptr,ECANSendMessage@tempPtr
  6145  001B18  C0E7  F0E3         	movff	ECANSendMessage@ptr+1,ECANSendMessage@tempPtr+1
  6146                           
  6147                           ; BSR set to: 0
  6148                           ;ECAN.c: 720: if ( !(*ptr & 0x08) )
  6149  001B1C  C0E6  FFD9         	movff	ECANSendMessage@ptr,fsr2l
  6150  001B20  C0E7  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
  6151  001B24  50DF               	movf	indf2,w,c
  6152  001B26  6E2B               	movwf	??_ECANSendMessage& (0+255),c
  6153  001B28  B62B               	btfsc	??_ECANSendMessage,3,c
  6154  001B2A  D087               	goto	l3982
  6155                           
  6156                           ; BSR set to: 0
  6157                           ;ECAN.c: 721: {
  6158                           ;ECAN.c: 723: *ptr &= ~ECAN_TX_PRIORITY_BITS;
  6159  001B2C  C0E6  FFD9         	movff	ECANSendMessage@ptr,fsr2l
  6160  001B30  C0E7  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
  6161  001B34  0EFC               	movlw	252
  6162  001B36  16DF               	andwf	indf2,f,c
  6163                           
  6164                           ; BSR set to: 0
  6165                           ;ECAN.c: 724: *ptr |= msgFlags & ECAN_TX_PRIORITY_BITS;
  6166  001B38  C0CE  F02B         	movff	ECANSendMessage@msgFlags,??_ECANSendMessage
  6167  001B3C  0E03               	movlw	3
  6168  001B3E  162B               	andwf	??_ECANSendMessage,f,c
  6169  001B40  C0E6  FFD9         	movff	ECANSendMessage@ptr,fsr2l
  6170  001B44  C0E7  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
  6171  001B48  502B               	movf	??_ECANSendMessage,w,c
  6172  001B4A  12DF               	iorwf	indf2,f,c
  6173                           
  6174                           ; BSR set to: 0
  6175                           ;ECAN.c: 727: if ( msgFlags & ECAN_TX_RTR_BIT )
  6176  001B4C  0100               	movlb	0	; () banked
  6177  001B4E  0100               	movlb	0	; () banked
  6178  001B50  ADCE               	btfss	ECANSendMessage@msgFlags& (0+255),6,b
  6179  001B52  D008               	goto	l589
  6180                           
  6181                           ; BSR set to: 0
  6182                           ;ECAN.c: 728: temp = 0x40 | dataLen;
  6183  001B54  0100               	movlb	0	; () banked
  6184  001B56  0100               	movlb	0	; () banked
  6185  001B58  51CD               	movf	ECANSendMessage@dataLen& (0+255),w,b
  6186  001B5A  0940               	iorlw	64
  6187  001B5C  0100               	movlb	0	; () banked
  6188  001B5E  0100               	movlb	0	; () banked
  6189  001B60  6FE4               	movwf	ECANSendMessage@temp& (0+255),b
  6190  001B62  D002               	goto	l3952
  6191  001B64                     l589:
  6192                           
  6193                           ; BSR set to: 0
  6194                           ;ECAN.c: 729: else
  6195                           ;ECAN.c: 730: temp = dataLen;
  6196  001B64  C0CD  F0E4         	movff	ECANSendMessage@dataLen,ECANSendMessage@temp
  6197  001B68                     l3952:
  6198                           
  6199                           ; BSR set to: 0
  6200                           ;ECAN.c: 732: *(ptr+5) = temp;
  6201  001B68  0100               	movlb	0	; () banked
  6202  001B6A  EE20 F005          	lfsr	2,5
  6203  001B6E  0100               	movlb	0	; () banked
  6204  001B70  51E6               	movf	ECANSendMessage@ptr& (0+255),w,b
  6205  001B72  26D9               	addwf	fsr2l,f,c
  6206  001B74  0100               	movlb	0	; () banked
  6207  001B76  51E7               	movf	(ECANSendMessage@ptr+1)& (0+255),w,b
  6208  001B78  22DA               	addwfc	fsr2h,f,c
  6209  001B7A  0100               	movlb	0	; () banked
  6210  001B7C  C0E4  FFDF         	movff	ECANSendMessage@temp,indf2
  6211                           
  6212                           ; BSR set to: 0
  6213                           ;ECAN.c: 735: if ( msgFlags & ECAN_TX_FRAME_BIT )
  6214  001B80  0100               	movlb	0	; () banked
  6215  001B82  0100               	movlb	0	; () banked
  6216  001B84  ABCE               	btfss	ECANSendMessage@msgFlags& (0+255),5,b
  6217  001B86  D003               	goto	l3958
  6218                           
  6219                           ; BSR set to: 0
  6220                           ;ECAN.c: 736: temp = 1;
  6221  001B88  6E2B               	movwf	??_ECANSendMessage& (0+255),c
  6222  001B8A  0E01               	movlw	1
  6223  001B8C  D002               	goto	L21
  6224  001B8E                     l3958:
  6225                           
  6226                           ; BSR set to: 0
  6227                           ;ECAN.c: 738: else
  6228                           ;ECAN.c: 739: temp = 0;
  6229  001B8E  6E2B               	movwf	??_ECANSendMessage& (0+255),c
  6230  001B90  0E00               	movlw	0
  6231  001B92                     L21:
  6232  001B92  0100               	movlb	0	; () banked
  6233  001B94  0100               	movlb	0	; () banked
  6234  001B96  6FE4               	movwf	ECANSendMessage@temp& (0+255),b
  6235  001B98  502B               	movf	??_ECANSendMessage& (0+255),w,c
  6236                           
  6237                           ; BSR set to: 0
  6238                           ;ECAN.c: 742: _CANIDToRegs((BYTE*)(ptr+1), id, temp);
  6239                           
  6240                           ; BSR set to: 0
  6241  001B9A  0E01               	movlw	1
  6242  001B9C  0100               	movlb	0	; () banked
  6243  001B9E  0100               	movlb	0	; () banked
  6244  001BA0  25E6               	addwf	ECANSendMessage@ptr& (0+255),w,b
  6245  001BA2  6E20               	movwf	?__CANIDToRegs,c
  6246  001BA4  0E00               	movlw	0
  6247  001BA6  0100               	movlb	0	; () banked
  6248  001BA8  0100               	movlb	0	; () banked
  6249  001BAA  21E7               	addwfc	(ECANSendMessage@ptr+1)& (0+255),w,b
  6250  001BAC  6E21               	movwf	?__CANIDToRegs+1,c
  6251  001BAE  C0C7  F022         	movff	ECANSendMessage@id,?__CANIDToRegs+2
  6252  001BB2  C0C8  F023         	movff	ECANSendMessage@id+1,?__CANIDToRegs+3
  6253  001BB6  C0C9  F024         	movff	ECANSendMessage@id+2,?__CANIDToRegs+4
  6254  001BBA  C0CA  F025         	movff	ECANSendMessage@id+3,?__CANIDToRegs+5
  6255  001BBE  C0E4  F026         	movff	ECANSendMessage@temp,?__CANIDToRegs+6
  6256  001BC2  EC8F  F00F         	call	__CANIDToRegs	;wreg free
  6257                           
  6258                           ;ECAN.c: 745: ptr += 6;
  6259  001BC6  0E06               	movlw	6
  6260  001BC8  0100               	movlb	0	; () banked
  6261  001BCA  0100               	movlb	0	; () banked
  6262  001BCC  27E6               	addwf	ECANSendMessage@ptr& (0+255),f,b
  6263  001BCE  0E00               	movlw	0
  6264  001BD0  0100               	movlb	0	; () banked
  6265  001BD2  23E7               	addwfc	(ECANSendMessage@ptr+1)& (0+255),f,b
  6266                           
  6267                           ; BSR set to: 0
  6268                           ;ECAN.c: 747: for ( j = 0 ; j < dataLen; j++ )
  6269  001BD4  6E2B               	movwf	??_ECANSendMessage& (0+255),c
  6270  001BD6  0E00               	movlw	0
  6271  001BD8  0100               	movlb	0	; () banked
  6272  001BDA  0100               	movlb	0	; () banked
  6273  001BDC  6FE1               	movwf	ECANSendMessage@j& (0+255),b
  6274  001BDE  502B               	movf	??_ECANSendMessage& (0+255),w,c
  6275  001BE0  D015               	goto	l3974
  6276  001BE2                     l3966:
  6277                           
  6278                           ; BSR set to: 0
  6279                           ;ECAN.c: 748: *ptr++ = *data++;
  6280  001BE2  C0CB  FFD9         	movff	ECANSendMessage@data,fsr2l
  6281  001BE6  C0CC  FFDA         	movff	ECANSendMessage@data+1,fsr2h
  6282  001BEA  C0E6  FFE1         	movff	ECANSendMessage@ptr,fsr1l
  6283  001BEE  C0E7  FFE2         	movff	ECANSendMessage@ptr+1,fsr1h
  6284  001BF2  CFDF FFE7          	movff	indf2,indf1
  6285                           
  6286                           ; BSR set to: 0
  6287  001BF6  0100               	movlb	0	; () banked
  6288  001BF8  0100               	movlb	0	; () banked
  6289  001BFA  4BCB               	infsnz	ECANSendMessage@data& (0+255),f,b
  6290  001BFC  2BCC               	incf	(ECANSendMessage@data+1)& (0+255),f,b
  6291                           
  6292                           ; BSR set to: 0
  6293  001BFE  0100               	movlb	0	; () banked
  6294  001C00  0100               	movlb	0	; () banked
  6295  001C02  4BE6               	infsnz	ECANSendMessage@ptr& (0+255),f,b
  6296  001C04  2BE7               	incf	(ECANSendMessage@ptr+1)& (0+255),f,b
  6297                           
  6298                           ; BSR set to: 0
  6299  001C06  0100               	movlb	0	; () banked
  6300  001C08  0100               	movlb	0	; () banked
  6301  001C0A  2BE1               	incf	ECANSendMessage@j& (0+255),f,b
  6302  001C0C                     l3974:
  6303                           
  6304                           ; BSR set to: 0
  6305  001C0C  0100               	movlb	0	; () banked
  6306  001C0E  0100               	movlb	0	; () banked
  6307  001C10  51CD               	movf	ECANSendMessage@dataLen& (0+255),w,b
  6308  001C12  0100               	movlb	0	; () banked
  6309  001C14  0100               	movlb	0	; () banked
  6310  001C16  5DE1               	subwf	ECANSendMessage@j& (0+255),w,b
  6311  001C18  A0D8               	btfss	status,0,c
  6312  001C1A  D7E3               	goto	l3966
  6313                           
  6314                           ; BSR set to: 0
  6315                           ;ECAN.c: 752: if ( !(*tempPtr & 0x04) )
  6316                           
  6317                           ; BSR set to: 0
  6318  001C1C  C0E2  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
  6319  001C20  C0E3  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
  6320  001C24  50DF               	movf	indf2,w,c
  6321  001C26  6E2B               	movwf	??_ECANSendMessage& (0+255),c
  6322  001C28  B42B               	btfsc	??_ECANSendMessage,2,c
  6323  001C2A  D00F               	goto	l597
  6324                           
  6325                           ; BSR set to: 0
  6326                           ;ECAN.c: 753: *tempPtr |= 0x08;
  6327  001C2C  C0E2  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
  6328  001C30  C0E3  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
  6329  001C34  0E00               	movlw	0
  6330  001C36  86DB               	bsf	plusw2,3,c
  6331  001C38  D008               	goto	l597
  6332  001C3A                     l3982:
  6333                           
  6334                           ; BSR set to: 0
  6335  001C3A  0100               	movlb	0	; () banked
  6336  001C3C  0100               	movlb	0	; () banked
  6337  001C3E  2BE5               	incf	ECANSendMessage@i& (0+255),f,b
  6338  001C40                     L22:
  6339                           
  6340                           ; BSR set to: 0
  6341  001C40  0E01               	movlw	1
  6342  001C42  0100               	movlb	0	; () banked
  6343  001C44  0100               	movlb	0	; () banked
  6344  001C46  65E5               	cpfsgt	ECANSendMessage@i& (0+255),b
  6345  001C48  D753               	goto	l3938
  6346  001C4A                     l597:
  6347                           
  6348                           ; BSR set to: 0
  6349  001C4A  0012               	return	
  6350  001C4C                     __end_of_ECANSendMessage:
  6351                           	opt stack 0
  6352                           tblptru	equ	0xFF8
  6353                           tblptrh	equ	0xFF7
  6354                           tblptrl	equ	0xFF6
  6355                           tablat	equ	0xFF5
  6356                           prodh	equ	0xFF4
  6357                           prodl	equ	0xFF3
  6358                           intcon	equ	0xFF2
  6359                           postinc0	equ	0xFEE
  6360                           wreg	equ	0xFE8
  6361                           indf1	equ	0xFE7
  6362                           postdec1	equ	0xFE5
  6363                           fsr1h	equ	0xFE2
  6364                           fsr1l	equ	0xFE1
  6365                           indf2	equ	0xFDF
  6366                           postinc2	equ	0xFDE
  6367                           postdec2	equ	0xFDD
  6368                           plusw2	equ	0xFDB
  6369                           fsr2h	equ	0xFDA
  6370                           fsr2l	equ	0xFD9
  6371                           status	equ	0xFD8
  6372                           
  6373 ;; *************** function __CANIDToRegs *****************
  6374 ;; Defined at:
  6375 ;;		line 1158 in file "source/ECAN.c"
  6376 ;; Parameters:    Size  Location     Type
  6377 ;;  ptr             2   31[COMRAM] PTR unsigned char 
  6378 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), 
  6379 ;;  val             4   33[COMRAM] unsigned long 
  6380 ;;  type            1   37[COMRAM] unsigned char 
  6381 ;; Auto vars:     Size  Location     Type
  6382 ;;  Value           2   40[COMRAM] PTR struct _CAN_MESSAGE_
  6383 ;;		 -> _CANIDToRegs@val(4), 
  6384 ;; Return value:  Size  Location     Type
  6385 ;;		None               void
  6386 ;; Registers used:
  6387 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  6388 ;; Tracked objects:
  6389 ;;		On entry : 0/0
  6390 ;;		On exit  : 0/0
  6391 ;;		Unchanged: 0/0
  6392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6393 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6394 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6395 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6396 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6397 ;;Total ram usage:       11 bytes
  6398 ;; Hardware stack levels used:    1
  6399 ;; Hardware stack levels required when called:    2
  6400 ;; This function calls:
  6401 ;;		Nothing
  6402 ;; This function is called by:
  6403 ;;		_ECANSendMessage
  6404 ;; This function uses a non-reentrant model
  6405 ;;
  6406                           
  6407                           	psect	text34
  6408  001F1E                     __ptext34:
  6409                           	opt stack 0
  6410  001F1E                     __CANIDToRegs:
  6411                           	opt stack 24
  6412                           
  6413                           ;ECAN.c: 1159: CAN_MESSAGE_ID *Value;
  6414                           ;ECAN.c: 1161: Value = (CAN_MESSAGE_ID*)&val;
  6415                           
  6416                           ; BSR set to: 0
  6417                           ;incstack = 0
  6418                           ;incstack = 0
  6419  001F1E  0E00               	movlw	high __CANIDToRegs@val
  6420  001F20  6E2A               	movwf	__CANIDToRegs@Value+1,c
  6421  001F22  0E22               	movlw	low __CANIDToRegs@val
  6422  001F24  6E29               	movwf	__CANIDToRegs@Value,c
  6423                           
  6424                           ;ECAN.c: 1163: if ( type == 0 )
  6425  001F26  6626               	tstfsz	__CANIDToRegs@type,c
  6426  001F28  D03A               	goto	l3444
  6427                           
  6428                           ;ECAN.c: 1164: {
  6429                           ;ECAN.c: 1166: *ptr = Value->BYTES.BYTE_1 >> 3;
  6430  001F2A  C029  FFD9         	movff	__CANIDToRegs@Value,fsr2l
  6431  001F2E  C02A  FFDA         	movff	__CANIDToRegs@Value+1,fsr2h
  6432  001F32  50DF               	movf	indf2,w,c
  6433  001F34  6E27               	movwf	??__CANIDToRegs& (0+255),c
  6434  001F36  90D8               	bcf	status,0,c
  6435  001F38  3227               	rrcf	??__CANIDToRegs,f,c
  6436  001F3A  90D8               	bcf	status,0,c
  6437  001F3C  3227               	rrcf	??__CANIDToRegs,f,c
  6438  001F3E  90D8               	bcf	status,0,c
  6439  001F40  3027               	rrcf	??__CANIDToRegs,w,c
  6440  001F42  C020  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
  6441  001F46  C021  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
  6442  001F4A  6EDF               	movwf	indf2,c
  6443                           
  6444                           ;ECAN.c: 1167: *ptr |= (Value->BYTES.BYTE_2 << 5);
  6445  001F4C  EE20 F001          	lfsr	2,1
  6446  001F50  5029               	movf	__CANIDToRegs@Value,w,c
  6447  001F52  26D9               	addwf	fsr2l,f,c
  6448  001F54  502A               	movf	__CANIDToRegs@Value+1,w,c
  6449  001F56  22DA               	addwfc	fsr2h,f,c
  6450  001F58  50DF               	movf	indf2,w,c
  6451  001F5A  6E27               	movwf	??__CANIDToRegs& (0+255),c
  6452  001F5C  0E05               	movlw	5
  6453  001F5E  6E28               	movwf	(??__CANIDToRegs+1)& (0+255),c
  6454  001F60                     u2175:
  6455  001F60  90D8               	bcf	status,0,c
  6456  001F62  3627               	rlcf	??__CANIDToRegs,f,c
  6457  001F64  2E28               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
  6458  001F66  D7FC               	goto	u2175
  6459  001F68  C020  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
  6460  001F6C  C021  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
  6461  001F70  5027               	movf	??__CANIDToRegs,w,c
  6462  001F72  12DF               	iorwf	indf2,f,c
  6463                           
  6464                           ;ECAN.c: 1168: ptr++;
  6465  001F74  4A20               	infsnz	__CANIDToRegs@ptr,f,c
  6466  001F76  2A21               	incf	__CANIDToRegs@ptr+1,f,c
  6467                           
  6468                           ;ECAN.c: 1169: *ptr = Value->BYTES.BYTE_1 << 5;
  6469  001F78  C029  FFD9         	movff	__CANIDToRegs@Value,fsr2l
  6470  001F7C  C02A  FFDA         	movff	__CANIDToRegs@Value+1,fsr2h
  6471  001F80  50DF               	movf	indf2,w,c
  6472  001F82  6E27               	movwf	??__CANIDToRegs& (0+255),c
  6473  001F84  0E05               	movlw	5
  6474  001F86  6E28               	movwf	(??__CANIDToRegs+1)& (0+255),c
  6475  001F88                     u2185:
  6476  001F88  90D8               	bcf	status,0,c
  6477  001F8A  3627               	rlcf	??__CANIDToRegs,f,c
  6478  001F8C  2E28               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
  6479  001F8E  D7FC               	goto	u2185
  6480  001F90  5027               	movf	??__CANIDToRegs,w,c
  6481  001F92  C020  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
  6482  001F96  C021  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
  6483  001F9A  6EDF               	movwf	indf2,c
  6484                           
  6485                           ;ECAN.c: 1170: }
  6486  001F9C  D06E               	goto	l626
  6487  001F9E                     l3444:
  6488                           
  6489                           ;ECAN.c: 1171: else
  6490                           ;ECAN.c: 1172: {
  6491                           ;ECAN.c: 1174: *ptr = Value->BYTES.BYTE_3 >> 5;
  6492  001F9E  EE20 F002          	lfsr	2,2
  6493  001FA2  5029               	movf	__CANIDToRegs@Value,w,c
  6494  001FA4  26D9               	addwf	fsr2l,f,c
  6495  001FA6  502A               	movf	__CANIDToRegs@Value+1,w,c
  6496  001FA8  22DA               	addwfc	fsr2h,f,c
  6497  001FAA  50DF               	movf	indf2,w,c
  6498  001FAC  6E27               	movwf	??__CANIDToRegs& (0+255),c
  6499  001FAE  0E05               	movlw	5
  6500  001FB0  6E28               	movwf	(??__CANIDToRegs+1)& (0+255),c
  6501  001FB2                     u2195:
  6502  001FB2  90D8               	bcf	status,0,c
  6503  001FB4  3227               	rrcf	??__CANIDToRegs,f,c
  6504  001FB6  2E28               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
  6505  001FB8  D7FC               	goto	u2195
  6506  001FBA  5027               	movf	??__CANIDToRegs,w,c
  6507  001FBC  C020  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
  6508  001FC0  C021  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
  6509  001FC4  6EDF               	movwf	indf2,c
  6510                           
  6511                           ;ECAN.c: 1175: *ptr |= Value->BYTES.BYTE_4 << 3;
  6512  001FC6  EE20 F003          	lfsr	2,3
  6513  001FCA  5029               	movf	__CANIDToRegs@Value,w,c
  6514  001FCC  26D9               	addwf	fsr2l,f,c
  6515  001FCE  502A               	movf	__CANIDToRegs@Value+1,w,c
  6516  001FD0  22DA               	addwfc	fsr2h,f,c
  6517  001FD2  50DF               	movf	indf2,w,c
  6518  001FD4  6E27               	movwf	??__CANIDToRegs& (0+255),c
  6519  001FD6  90D8               	bcf	status,0,c
  6520  001FD8  3627               	rlcf	??__CANIDToRegs,f,c
  6521  001FDA  90D8               	bcf	status,0,c
  6522  001FDC  3627               	rlcf	??__CANIDToRegs,f,c
  6523  001FDE  90D8               	bcf	status,0,c
  6524  001FE0  3627               	rlcf	??__CANIDToRegs,f,c
  6525  001FE2  C020  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
  6526  001FE6  C021  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
  6527  001FEA  5027               	movf	??__CANIDToRegs,w,c
  6528  001FEC  12DF               	iorwf	indf2,f,c
  6529                           
  6530                           ;ECAN.c: 1176: ptr++;
  6531  001FEE  4A20               	infsnz	__CANIDToRegs@ptr,f,c
  6532  001FF0  2A21               	incf	__CANIDToRegs@ptr+1,f,c
  6533                           
  6534                           ;ECAN.c: 1177: *ptr = (Value->BYTES.BYTE_3 << 3) & 0xE0;
  6535  001FF2  EE20 F002          	lfsr	2,2
  6536  001FF6  5029               	movf	__CANIDToRegs@Value,w,c
  6537  001FF8  26D9               	addwf	fsr2l,f,c
  6538  001FFA  502A               	movf	__CANIDToRegs@Value+1,w,c
  6539  001FFC  22DA               	addwfc	fsr2h,f,c
  6540  001FFE  50DF               	movf	indf2,w,c
  6541  002000  6E27               	movwf	??__CANIDToRegs& (0+255),c
  6542  002002  90D8               	bcf	status,0,c
  6543  002004  3627               	rlcf	??__CANIDToRegs,f,c
  6544  002006  90D8               	bcf	status,0,c
  6545  002008  3627               	rlcf	??__CANIDToRegs,f,c
  6546  00200A  90D8               	bcf	status,0,c
  6547  00200C  3427               	rlcf	??__CANIDToRegs,w,c
  6548  00200E  0BE0               	andlw	224
  6549  002010  C020  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
  6550  002014  C021  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
  6551  002018  6EDF               	movwf	indf2,c
  6552                           
  6553                           ;ECAN.c: 1179: *ptr |= 0b00001000;
  6554  00201A  C020  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
  6555  00201E  C021  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
  6556  002022  0E00               	movlw	0
  6557  002024  86DB               	bsf	plusw2,3,c
  6558                           
  6559                           ;ECAN.c: 1180: *ptr |= Value->BYTES.BYTE_3 & 0x03;
  6560  002026  EE20 F002          	lfsr	2,2
  6561  00202A  5029               	movf	__CANIDToRegs@Value,w,c
  6562  00202C  26D9               	addwf	fsr2l,f,c
  6563  00202E  502A               	movf	__CANIDToRegs@Value+1,w,c
  6564  002030  22DA               	addwfc	fsr2h,f,c
  6565  002032  50DF               	movf	indf2,w,c
  6566  002034  6E27               	movwf	??__CANIDToRegs& (0+255),c
  6567  002036  0E03               	movlw	3
  6568  002038  1627               	andwf	??__CANIDToRegs,f,c
  6569  00203A  C020  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
  6570  00203E  C021  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
  6571  002042  5027               	movf	??__CANIDToRegs,w,c
  6572  002044  12DF               	iorwf	indf2,f,c
  6573                           
  6574                           ;ECAN.c: 1181: ptr++;
  6575  002046  4A20               	infsnz	__CANIDToRegs@ptr,f,c
  6576  002048  2A21               	incf	__CANIDToRegs@ptr+1,f,c
  6577                           
  6578                           ;ECAN.c: 1182: *ptr = Value->BYTES.BYTE_2;
  6579  00204A  EE20 F001          	lfsr	2,1
  6580  00204E  5029               	movf	__CANIDToRegs@Value,w,c
  6581  002050  26D9               	addwf	fsr2l,f,c
  6582  002052  502A               	movf	__CANIDToRegs@Value+1,w,c
  6583  002054  22DA               	addwfc	fsr2h,f,c
  6584  002056  C020  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
  6585  00205A  C021  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
  6586  00205E  CFDF FFE7          	movff	indf2,indf1
  6587                           
  6588                           ;ECAN.c: 1183: ptr++;
  6589  002062  4A20               	infsnz	__CANIDToRegs@ptr,f,c
  6590  002064  2A21               	incf	__CANIDToRegs@ptr+1,f,c
  6591                           
  6592                           ;ECAN.c: 1184: *ptr = Value->BYTES.BYTE_1;
  6593  002066  C029  FFD9         	movff	__CANIDToRegs@Value,fsr2l
  6594  00206A  C02A  FFDA         	movff	__CANIDToRegs@Value+1,fsr2h
  6595  00206E  C020  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
  6596  002072  C021  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
  6597  002076  CFDF FFE7          	movff	indf2,indf1
  6598  00207A                     l626:
  6599  00207A  0012               	return	
  6600  00207C                     __end_of__CANIDToRegs:
  6601                           	opt stack 0
  6602                           tblptru	equ	0xFF8
  6603                           tblptrh	equ	0xFF7
  6604                           tblptrl	equ	0xFF6
  6605                           tablat	equ	0xFF5
  6606                           prodh	equ	0xFF4
  6607                           prodl	equ	0xFF3
  6608                           intcon	equ	0xFF2
  6609                           postinc0	equ	0xFEE
  6610                           wreg	equ	0xFE8
  6611                           indf1	equ	0xFE7
  6612                           postdec1	equ	0xFE5
  6613                           fsr1h	equ	0xFE2
  6614                           fsr1l	equ	0xFE1
  6615                           indf2	equ	0xFDF
  6616                           postinc2	equ	0xFDE
  6617                           postdec2	equ	0xFDD
  6618                           plusw2	equ	0xFDB
  6619                           fsr2h	equ	0xFDA
  6620                           fsr2l	equ	0xFD9
  6621                           status	equ	0xFD8
  6622                           
  6623 ;; *************** function _MaturedTimer *****************
  6624 ;; Defined at:
  6625 ;;		line 156 in file "source/TimerTask.c"
  6626 ;; Parameters:    Size  Location     Type
  6627 ;;  theTimer        2   31[COMRAM] PTR volatile struct ATim
  6628 ;;		 -> m_Keys(85), m_DataWriteTimer(5), 
  6629 ;; Auto vars:     Size  Location     Type
  6630 ;;  ToReturn        1   34[COMRAM] volatile unsigned char 
  6631 ;; Return value:  Size  Location     Type
  6632 ;;                  1    wreg      unsigned char 
  6633 ;; Registers used:
  6634 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6635 ;; Tracked objects:
  6636 ;;		On entry : 0/0
  6637 ;;		On exit  : 0/0
  6638 ;;		Unchanged: 0/0
  6639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6640 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6641 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6642 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6643 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6644 ;;Total ram usage:        4 bytes
  6645 ;; Hardware stack levels used:    1
  6646 ;; Hardware stack levels required when called:    2
  6647 ;; This function calls:
  6648 ;;		Nothing
  6649 ;; This function is called by:
  6650 ;;		_CanCommsTask
  6651 ;;		_MonitorButton
  6652 ;;		_IlluminateButton
  6653 ;; This function uses a non-reentrant model
  6654 ;;
  6655                           
  6656                           	psect	text35
  6657  0022C2                     __ptext35:
  6658                           	opt stack 0
  6659  0022C2                     _MaturedTimer:
  6660                           	opt stack 25
  6661                           
  6662                           ;TimerTask.c: 157: volatile bool ToReturn = 0;
  6663                           
  6664                           ;incstack = 0
  6665                           ;incstack = 0
  6666  0022C2  0E00               	movlw	0
  6667  0022C4  6E23               	movwf	MaturedTimer@ToReturn,c	;volatile
  6668                           
  6669                           ;TimerTask.c: 159: if( m_CurrentTime.Day > theTimer->Day )
  6670  0022C6  EE20 F004          	lfsr	2,4
  6671  0022CA  5020               	movf	MaturedTimer@theTimer,w,c
  6672  0022CC  26D9               	addwf	fsr2l,f,c
  6673  0022CE  5021               	movf	MaturedTimer@theTimer+1,w,c
  6674  0022D0  22DA               	addwfc	fsr2h,f,c
  6675  0022D2  50DF               	movf	indf2,w,c
  6676  0022D4  6E22               	movwf	??_MaturedTimer& (0+255),c
  6677  0022D6  5036               	movf	_m_CurrentTime+4,w,c	;volatile
  6678  0022D8  5C22               	subwf	??_MaturedTimer,w,c
  6679  0022DA  A0D8               	btfss	status,0,c
  6680  0022DC  D058               	goto	u2720
  6681                           
  6682                           ;TimerTask.c: 163: else if( m_CurrentTime.Day == theTimer->Day )
  6683                           
  6684                           ;TimerTask.c: 162: }
  6685                           
  6686                           ;TimerTask.c: 160: {
  6687                           ;TimerTask.c: 161: ToReturn = 1;
  6688  0022DE  EE20 F004          	lfsr	2,4
  6689  0022E2  5020               	movf	MaturedTimer@theTimer,w,c
  6690  0022E4  26D9               	addwf	fsr2l,f,c
  6691  0022E6  5021               	movf	MaturedTimer@theTimer+1,w,c
  6692  0022E8  22DA               	addwfc	fsr2h,f,c
  6693  0022EA  50DF               	movf	indf2,w,c
  6694  0022EC  EE20  F036         	lfsr	2,_m_CurrentTime+4	;volatile
  6695  0022F0  62DF               	cpfseq	indf2,c
  6696  0022F2  D04F               	goto	l205
  6697                           
  6698                           ;TimerTask.c: 164: {
  6699                           ;TimerTask.c: 165: if( m_CurrentTime.Hour > theTimer->Hour )
  6700  0022F4  EE20 F003          	lfsr	2,3
  6701  0022F8  5020               	movf	MaturedTimer@theTimer,w,c
  6702  0022FA  26D9               	addwf	fsr2l,f,c
  6703  0022FC  5021               	movf	MaturedTimer@theTimer+1,w,c
  6704  0022FE  22DA               	addwfc	fsr2h,f,c
  6705  002300  50DF               	movf	indf2,w,c
  6706  002302  6E22               	movwf	??_MaturedTimer& (0+255),c
  6707  002304  5035               	movf	_m_CurrentTime+3,w,c	;volatile
  6708  002306  5C22               	subwf	??_MaturedTimer,w,c
  6709  002308  A0D8               	btfss	status,0,c
  6710  00230A  D041               	goto	u2720
  6711                           
  6712                           ;TimerTask.c: 169: else if( m_CurrentTime.Hour == theTimer->Hour )
  6713                           
  6714                           ;TimerTask.c: 168: }
  6715                           
  6716                           ;TimerTask.c: 166: {
  6717                           ;TimerTask.c: 167: ToReturn = 1;
  6718  00230C  EE20 F003          	lfsr	2,3
  6719  002310  5020               	movf	MaturedTimer@theTimer,w,c
  6720  002312  26D9               	addwf	fsr2l,f,c
  6721  002314  5021               	movf	MaturedTimer@theTimer+1,w,c
  6722  002316  22DA               	addwfc	fsr2h,f,c
  6723  002318  50DF               	movf	indf2,w,c
  6724  00231A  EE20  F035         	lfsr	2,_m_CurrentTime+3	;volatile
  6725  00231E  62DF               	cpfseq	indf2,c
  6726  002320  D038               	goto	l205
  6727                           
  6728                           ;TimerTask.c: 170: {
  6729                           ;TimerTask.c: 171: if( m_CurrentTime.Minute > theTimer->Minute )
  6730  002322  EE20 F002          	lfsr	2,2
  6731  002326  5020               	movf	MaturedTimer@theTimer,w,c
  6732  002328  26D9               	addwf	fsr2l,f,c
  6733  00232A  5021               	movf	MaturedTimer@theTimer+1,w,c
  6734  00232C  22DA               	addwfc	fsr2h,f,c
  6735  00232E  50DF               	movf	indf2,w,c
  6736  002330  6E22               	movwf	??_MaturedTimer& (0+255),c
  6737  002332  5034               	movf	_m_CurrentTime+2,w,c	;volatile
  6738  002334  5C22               	subwf	??_MaturedTimer,w,c
  6739  002336  A0D8               	btfss	status,0,c
  6740  002338  D02A               	goto	u2720
  6741                           
  6742                           ;TimerTask.c: 175: else if( m_CurrentTime.Minute == theTimer->Minute )
  6743                           
  6744                           ;TimerTask.c: 174: }
  6745                           
  6746                           ;TimerTask.c: 172: {
  6747                           ;TimerTask.c: 173: ToReturn = 1;
  6748  00233A  EE20 F002          	lfsr	2,2
  6749  00233E  5020               	movf	MaturedTimer@theTimer,w,c
  6750  002340  26D9               	addwf	fsr2l,f,c
  6751  002342  5021               	movf	MaturedTimer@theTimer+1,w,c
  6752  002344  22DA               	addwfc	fsr2h,f,c
  6753  002346  50DF               	movf	indf2,w,c
  6754  002348  EE20  F034         	lfsr	2,_m_CurrentTime+2	;volatile
  6755  00234C  62DF               	cpfseq	indf2,c
  6756  00234E  D021               	goto	l205
  6757                           
  6758                           ;TimerTask.c: 176: {
  6759                           ;TimerTask.c: 177: if( m_CurrentTime.Second > theTimer->Second )
  6760  002350  EE20 F001          	lfsr	2,1
  6761  002354  5020               	movf	MaturedTimer@theTimer,w,c
  6762  002356  26D9               	addwf	fsr2l,f,c
  6763  002358  5021               	movf	MaturedTimer@theTimer+1,w,c
  6764  00235A  22DA               	addwfc	fsr2h,f,c
  6765  00235C  50DF               	movf	indf2,w,c
  6766  00235E  6E22               	movwf	??_MaturedTimer& (0+255),c
  6767  002360  5033               	movf	_m_CurrentTime+1,w,c	;volatile
  6768  002362  5C22               	subwf	??_MaturedTimer,w,c
  6769  002364  A0D8               	btfss	status,0,c
  6770  002366  D013               	goto	u2720
  6771                           
  6772                           ;TimerTask.c: 181: else if( m_CurrentTime.Second == theTimer->Second )
  6773                           
  6774                           ;TimerTask.c: 180: }
  6775                           
  6776                           ;TimerTask.c: 178: {
  6777                           ;TimerTask.c: 179: ToReturn = 1;
  6778  002368  EE20 F001          	lfsr	2,1
  6779  00236C  5020               	movf	MaturedTimer@theTimer,w,c
  6780  00236E  26D9               	addwf	fsr2l,f,c
  6781  002370  5021               	movf	MaturedTimer@theTimer+1,w,c
  6782  002372  22DA               	addwfc	fsr2h,f,c
  6783  002374  50DF               	movf	indf2,w,c
  6784  002376  EE20  F033         	lfsr	2,_m_CurrentTime+1	;volatile
  6785  00237A  62DF               	cpfseq	indf2,c
  6786  00237C  D00A               	goto	l205
  6787                           
  6788                           ;TimerTask.c: 182: {
  6789                           ;TimerTask.c: 183: if( m_CurrentTime.Millisecond >= theTimer->Millisecond )
  6790  00237E  C020  FFD9         	movff	MaturedTimer@theTimer,fsr2l
  6791  002382  C021  FFDA         	movff	MaturedTimer@theTimer+1,fsr2h
  6792  002386  50DF               	movf	indf2,w,c
  6793  002388  5C32               	subwf	_m_CurrentTime,w,c	;volatile
  6794  00238A  A0D8               	btfss	status,0,c
  6795  00238C  D002               	goto	l205
  6796  00238E                     u2720:
  6797                           
  6798                           ;TimerTask.c: 184: {
  6799                           ;TimerTask.c: 185: ToReturn = 1;
  6800  00238E  0E01               	movlw	1
  6801  002390  6E23               	movwf	MaturedTimer@ToReturn,c	;volatile
  6802  002392                     l205:
  6803                           
  6804                           ;TimerTask.c: 186: }
  6805                           ;TimerTask.c: 187: }
  6806                           ;TimerTask.c: 188: }
  6807                           ;TimerTask.c: 189: }
  6808                           ;TimerTask.c: 190: }
  6809                           ;TimerTask.c: 192: return ToReturn;
  6810  002392  5023               	movf	MaturedTimer@ToReturn,w,c	;volatile
  6811  002394  0012               	return	
  6812  002396                     __end_of_MaturedTimer:
  6813                           	opt stack 0
  6814                           tblptru	equ	0xFF8
  6815                           tblptrh	equ	0xFF7
  6816                           tblptrl	equ	0xFF6
  6817                           tablat	equ	0xFF5
  6818                           prodh	equ	0xFF4
  6819                           prodl	equ	0xFF3
  6820                           intcon	equ	0xFF2
  6821                           postinc0	equ	0xFEE
  6822                           wreg	equ	0xFE8
  6823                           indf1	equ	0xFE7
  6824                           postdec1	equ	0xFE5
  6825                           fsr1h	equ	0xFE2
  6826                           fsr1l	equ	0xFE1
  6827                           indf2	equ	0xFDF
  6828                           postinc2	equ	0xFDE
  6829                           postdec2	equ	0xFDD
  6830                           plusw2	equ	0xFDB
  6831                           fsr2h	equ	0xFDA
  6832                           fsr2l	equ	0xFD9
  6833                           status	equ	0xFD8
  6834                           
  6835 ;; *************** function _ECANReceiveMessage *****************
  6836 ;; Defined at:
  6837 ;;		line 803 in file "source/ECAN.c"
  6838 ;; Parameters:    Size  Location     Type
  6839 ;;  id              2   16[BANK0 ] PTR unsigned long 
  6840 ;;		 -> id(4), 
  6841 ;;  data            2   18[BANK0 ] PTR unsigned char 
  6842 ;;		 -> data(4), 
  6843 ;;  dataLen         2   20[BANK0 ] PTR unsigned char 
  6844 ;;		 -> dataLen(1), 
  6845 ;;  msgFlags        2   22[BANK0 ] PTR enum E16232
  6846 ;;		 -> flags(1), 
  6847 ;; Auto vars:     Size  Location     Type
  6848 ;;  str             5   24[BANK0 ] unsigned char [5]
  6849 ;;  str             5   29[BANK0 ] unsigned char [5]
  6850 ;;  ptr             2   37[BANK0 ] PTR unsigned char 
  6851 ;;		 -> RXB1CON(1), RXB0CON(1), 
  6852 ;;  savedPtr        2   34[BANK0 ] PTR unsigned char 
  6853 ;;		 -> RXB1CON(1), RXB0CON(1), 
  6854 ;;  temp            1   39[BANK0 ] struct .
  6855 ;;  i               1   36[BANK0 ] unsigned char 
  6856 ;; Return value:  Size  Location     Type
  6857 ;;                  1    wreg      unsigned char 
  6858 ;; Registers used:
  6859 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6860 ;; Tracked objects:
  6861 ;;		On entry : 0/0
  6862 ;;		On exit  : 0/0
  6863 ;;		Unchanged: 0/0
  6864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6865 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6866 ;;      Locals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6867 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6868 ;;      Totals:         1      24       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6869 ;;Total ram usage:       25 bytes
  6870 ;; Hardware stack levels used:    1
  6871 ;; Hardware stack levels required when called:    4
  6872 ;; This function calls:
  6873 ;;		_putsUSART
  6874 ;;		_sprintf
  6875 ;;		__RegsToCANID
  6876 ;; This function is called by:
  6877 ;;		_CanCommsTask
  6878 ;; This function uses a non-reentrant model
  6879 ;;
  6880                           
  6881                           	psect	text36
  6882  000D4E                     __ptext36:
  6883                           	opt stack 0
  6884  000D4E                     _ECANReceiveMessage:
  6885                           	opt stack 23
  6886                           
  6887                           ;ECAN.c: 808: BYTE *ptr, *savedPtr;
  6888                           ;ECAN.c: 809: char i;
  6889                           ;ECAN.c: 810: BYTE_VAL temp;
  6890                           ;ECAN.c: 812: _ECANRxFilterHitInfo.Val = 0;
  6891                           
  6892                           ;incstack = 0
  6893                           ;incstack = 0
  6894  000D4E  6E30               	movwf	??_ECANReceiveMessage& (0+255),c
  6895  000D50  0E00               	movlw	0
  6896  000D52  0100               	movlb	0	; () banked
  6897  000D54  0100               	movlb	0	; () banked
  6898  000D56  6F61               	movwf	__ECANRxFilterHitInfo& (0+255),b
  6899  000D58  5030               	movf	??_ECANReceiveMessage& (0+255),w,c
  6900                           
  6901                           ; BSR set to: 0
  6902                           ;ECAN.c: 822: {
  6903                           ;ECAN.c: 824: if ( RXB0CONbits.RXFUL )
  6904  000D5A  AE60               	btfss	3936,7,c	;volatile
  6905  000D5C  D037               	goto	l600
  6906                           
  6907                           ; BSR set to: 0
  6908                           ;ECAN.c: 825: {
  6909                           ;ECAN.c: 827: putsUSART( "Line: " );
  6910  000D5E  0E0D               	movlw	high STR_1
  6911  000D60  6E22               	movwf	?_putsUSART+1,c
  6912  000D62  0E40               	movlw	low STR_1
  6913  000D64  6E21               	movwf	?_putsUSART,c
  6914  000D66  ECB3  F015         	call	_putsUSART	;wreg free
  6915                           
  6916                           ;ECAN.c: 828: putsUSART( 828 );
  6917  000D6A  0E03               	movlw	3
  6918  000D6C  6E22               	movwf	?_putsUSART+1,c
  6919  000D6E  0E3C               	movlw	60
  6920  000D70  6E21               	movwf	?_putsUSART,c
  6921  000D72  ECB3  F015         	call	_putsUSART	;wreg free
  6922                           
  6923                           ;ECAN.c: 829: putsUSART( " File: " );
  6924  000D76  0E0D               	movlw	high STR_2
  6925  000D78  6E22               	movwf	?_putsUSART+1,c
  6926  000D7A  0E38               	movlw	low STR_2
  6927  000D7C  6E21               	movwf	?_putsUSART,c
  6928  000D7E  ECB3  F015         	call	_putsUSART	;wreg free
  6929                           
  6930                           ;ECAN.c: 830: putsUSART( "source/ECAN.c" );
  6931  000D82  0E0D               	movlw	high STR_26
  6932  000D84  6E22               	movwf	?_putsUSART+1,c
  6933  000D86  0E2A               	movlw	low STR_26
  6934  000D88  6E21               	movwf	?_putsUSART,c
  6935  000D8A  ECB3  F015         	call	_putsUSART	;wreg free
  6936                           
  6937                           ;ECAN.c: 831: putsUSART( "\r\n" );
  6938  000D8E  0E0D               	movlw	high STR_4
  6939  000D90  6E22               	movwf	?_putsUSART+1,c
  6940  000D92  0E47               	movlw	low STR_4
  6941  000D94  6E21               	movwf	?_putsUSART,c
  6942  000D96  ECB3  F015         	call	_putsUSART	;wreg free
  6943                           
  6944                           ;ECAN.c: 835: PIR3bits.RXB0IF = 0;
  6945  000D9A  90A4               	bcf	4004,0,c	;volatile
  6946                           
  6947                           ;ECAN.c: 838: if ( COMSTATbits.RXB0OVFL )
  6948  000D9C  AE74               	btfss	3956,7,c	;volatile
  6949  000D9E  D007               	goto	l3738
  6950                           
  6951                           ;ECAN.c: 839: {
  6952                           ;ECAN.c: 840: *msgFlags |= ECAN_RX_OVERFLOW;
  6953  000DA0  C0DD  FFD9         	movff	ECANReceiveMessage@msgFlags,fsr2l
  6954  000DA4  C0DE  FFDA         	movff	ECANReceiveMessage@msgFlags+1,fsr2h
  6955  000DA8  0E00               	movlw	0
  6956  000DAA  86DB               	bsf	plusw2,3,c
  6957                           
  6958                           ;ECAN.c: 841: COMSTATbits.RXB0OVFL = 0;
  6959  000DAC  9E74               	bcf	3956,7,c	;volatile
  6960  000DAE                     l3738:
  6961                           
  6962                           ;ECAN.c: 842: }
  6963                           ;ECAN.c: 844: _ECANRxFilterHitInfo.bits.b0 = RXB0CONbits.FILHIT0;
  6964  000DAE  A060               	btfss	3936,0,c	;volatile
  6965  000DB0  D004               	bra	u2485
  6966  000DB2  0100               	movlb	0	; () banked
  6967  000DB4  0100               	movlb	0	; () banked
  6968  000DB6  8161               	bsf	__ECANRxFilterHitInfo& (0+255),0,b
  6969  000DB8  D003               	bra	u2487
  6970  000DBA                     u2485:
  6971  000DBA  0100               	movlb	0	; () banked
  6972  000DBC  0100               	movlb	0	; () banked
  6973  000DBE  9161               	bcf	__ECANRxFilterHitInfo& (0+255),0,b
  6974  000DC0                     u2487:
  6975                           
  6976                           ; BSR set to: 0
  6977                           ;ECAN.c: 846: ptr = (BYTE*)&RXB0CON;
  6978  000DC0  0E0F               	movlw	15	;volatile
  6979  000DC2  0100               	movlb	0	; () banked
  6980  000DC4  0100               	movlb	0	; () banked
  6981  000DC6  6FED               	movwf	(ECANReceiveMessage@ptr+1)& (0+255),b
  6982  000DC8  0E60               	movlw	96	;volatile
  6983  000DCA  D063               	goto	L23
  6984  000DCC                     l600:
  6985                           
  6986                           ; BSR set to: 0
  6987                           ;ECAN.c: 849: else if ( RXB1CONbits.RXFUL )
  6988  000DCC  010F               	movlb	15	; () banked
  6989  000DCE  010F               	movlb	15	; () banked
  6990  000DD0  AF50               	btfss	80,7,b	;volatile
  6991  000DD2  D062               	goto	l3762
  6992                           
  6993                           ; BSR set to: 15
  6994                           ;ECAN.c: 850: {
  6995                           ;ECAN.c: 852: putsUSART( "Line: " );
  6996  000DD4  0E0D               	movlw	high STR_1
  6997  000DD6  6E22               	movwf	?_putsUSART+1,c
  6998  000DD8  0E40               	movlw	low STR_1
  6999  000DDA  6E21               	movwf	?_putsUSART,c
  7000  000DDC  ECB3  F015         	call	_putsUSART	;wreg free
  7001                           
  7002                           ;ECAN.c: 853: putsUSART( 853 );
  7003  000DE0  0E03               	movlw	3
  7004  000DE2  6E22               	movwf	?_putsUSART+1,c
  7005  000DE4  0E55               	movlw	85
  7006  000DE6  6E21               	movwf	?_putsUSART,c
  7007  000DE8  ECB3  F015         	call	_putsUSART	;wreg free
  7008                           
  7009                           ;ECAN.c: 854: putsUSART( " File: " );
  7010  000DEC  0E0D               	movlw	high STR_2
  7011  000DEE  6E22               	movwf	?_putsUSART+1,c
  7012  000DF0  0E38               	movlw	low STR_2
  7013  000DF2  6E21               	movwf	?_putsUSART,c
  7014  000DF4  ECB3  F015         	call	_putsUSART	;wreg free
  7015                           
  7016                           ;ECAN.c: 855: putsUSART( "source/ECAN.c" );
  7017  000DF8  0E0D               	movlw	high STR_26
  7018  000DFA  6E22               	movwf	?_putsUSART+1,c
  7019  000DFC  0E2A               	movlw	low STR_26
  7020  000DFE  6E21               	movwf	?_putsUSART,c
  7021  000E00  ECB3  F015         	call	_putsUSART	;wreg free
  7022                           
  7023                           ;ECAN.c: 856: putsUSART( "\r\n" );
  7024  000E04  0E0D               	movlw	high STR_4
  7025  000E06  6E22               	movwf	?_putsUSART+1,c
  7026  000E08  0E47               	movlw	low STR_4
  7027  000E0A  6E21               	movwf	?_putsUSART,c
  7028  000E0C  ECB3  F015         	call	_putsUSART	;wreg free
  7029                           
  7030                           ;ECAN.c: 860: PIR3bits.RXB1IF = 0;
  7031  000E10  92A4               	bcf	4004,1,c	;volatile
  7032                           
  7033                           ;ECAN.c: 863: if ( COMSTATbits.RXB1OVFL )
  7034  000E12  AC74               	btfss	3956,6,c	;volatile
  7035  000E14  D007               	goto	l3752
  7036                           
  7037                           ;ECAN.c: 864: {
  7038                           ;ECAN.c: 865: *msgFlags |= ECAN_RX_OVERFLOW;
  7039  000E16  C0DD  FFD9         	movff	ECANReceiveMessage@msgFlags,fsr2l
  7040  000E1A  C0DE  FFDA         	movff	ECANReceiveMessage@msgFlags+1,fsr2h
  7041  000E1E  0E00               	movlw	0
  7042  000E20  86DB               	bsf	plusw2,3,c
  7043                           
  7044                           ;ECAN.c: 866: COMSTATbits.RXB1OVFL = 0;
  7045  000E22  9C74               	bcf	3956,6,c	;volatile
  7046  000E24                     l3752:
  7047                           
  7048                           ;ECAN.c: 867: }
  7049                           ;ECAN.c: 869: _ECANRxFilterHitInfo.Val = RXB1CON & 0x07;
  7050  000E24  010F               	movlb	15	; () banked
  7051  000E26  010F               	movlb	15	; () banked
  7052  000E28  5150               	movf	80,w,b	;volatile
  7053  000E2A  0B07               	andlw	7
  7054  000E2C  0100               	movlb	0	; () banked
  7055  000E2E  0100               	movlb	0	; () banked
  7056  000E30  6F61               	movwf	__ECANRxFilterHitInfo& (0+255),b
  7057                           
  7058                           ; BSR set to: 0
  7059                           ;ECAN.c: 871: if ( _ECANRxFilterHitInfo.Val < 0x02 )
  7060  000E32  0E02               	movlw	2
  7061  000E34  0100               	movlb	0	; () banked
  7062  000E36  0100               	movlb	0	; () banked
  7063  000E38  6161               	cpfslt	__ECANRxFilterHitInfo& (0+255),b
  7064  000E3A  D024               	goto	l3760
  7065                           
  7066                           ; BSR set to: 0
  7067                           ;ECAN.c: 872: {
  7068                           ;ECAN.c: 874: putsUSART( "Line: " );
  7069  000E3C  0E0D               	movlw	high STR_1
  7070  000E3E  6E22               	movwf	?_putsUSART+1,c
  7071  000E40  0E40               	movlw	low STR_1
  7072  000E42  6E21               	movwf	?_putsUSART,c
  7073  000E44  ECB3  F015         	call	_putsUSART	;wreg free
  7074                           
  7075                           ;ECAN.c: 875: putsUSART( 875 );
  7076  000E48  0E03               	movlw	3
  7077  000E4A  6E22               	movwf	?_putsUSART+1,c
  7078  000E4C  0E6B               	movlw	107
  7079  000E4E  6E21               	movwf	?_putsUSART,c
  7080  000E50  ECB3  F015         	call	_putsUSART	;wreg free
  7081                           
  7082                           ;ECAN.c: 876: putsUSART( " File: " );
  7083  000E54  0E0D               	movlw	high STR_2
  7084  000E56  6E22               	movwf	?_putsUSART+1,c
  7085  000E58  0E38               	movlw	low STR_2
  7086  000E5A  6E21               	movwf	?_putsUSART,c
  7087  000E5C  ECB3  F015         	call	_putsUSART	;wreg free
  7088                           
  7089                           ;ECAN.c: 877: putsUSART( "source/ECAN.c" );
  7090  000E60  0E0D               	movlw	high STR_26
  7091  000E62  6E22               	movwf	?_putsUSART+1,c
  7092  000E64  0E2A               	movlw	low STR_26
  7093  000E66  6E21               	movwf	?_putsUSART,c
  7094  000E68  ECB3  F015         	call	_putsUSART	;wreg free
  7095                           
  7096                           ;ECAN.c: 878: putsUSART( "\r\n" );
  7097  000E6C  0E0D               	movlw	high STR_4
  7098  000E6E  6E22               	movwf	?_putsUSART+1,c
  7099  000E70  0E47               	movlw	low STR_4
  7100  000E72  6E21               	movwf	?_putsUSART,c
  7101  000E74  ECB3  F015         	call	_putsUSART	;wreg free
  7102                           
  7103                           ;ECAN.c: 881: *msgFlags |= ECAN_RX_DBL_BUFFERED;
  7104  000E78  C0DD  FFD9         	movff	ECANReceiveMessage@msgFlags,fsr2l
  7105  000E7C  C0DE  FFDA         	movff	ECANReceiveMessage@msgFlags+1,fsr2h
  7106  000E80  0E00               	movlw	0
  7107  000E82  8EDB               	bsf	plusw2,7,c
  7108  000E84                     l3760:
  7109                           
  7110                           ;ECAN.c: 882: }
  7111                           ;ECAN.c: 885: ptr = (BYTE*)&RXB1CON;
  7112  000E84  010F               	movlb	15	; () banked
  7113  000E86  0E0F               	movlw	15	;volatile
  7114  000E88  0100               	movlb	0	; () banked
  7115  000E8A  0100               	movlb	0	; () banked
  7116  000E8C  6FED               	movwf	(ECANReceiveMessage@ptr+1)& (0+255),b
  7117  000E8E  010F               	movlb	15	; () banked
  7118  000E90  0E50               	movlw	80	;volatile
  7119  000E92                     L23:
  7120  000E92  0100               	movlb	0	; () banked
  7121  000E94  6FEC               	movwf	ECANReceiveMessage@ptr& (0+255),b
  7122                           
  7123                           ;ECAN.c: 886: }
  7124  000E96  D040               	goto	l3778
  7125  000E98                     l3762:
  7126                           
  7127                           ;ECAN.c: 887: else
  7128                           ;ECAN.c: 888: {
  7129                           ;ECAN.c: 890: putsUSART( "Line: " );
  7130  000E98  0E0D               	movlw	high STR_1
  7131  000E9A  6E22               	movwf	?_putsUSART+1,c
  7132  000E9C  0E40               	movlw	low STR_1
  7133  000E9E  6E21               	movwf	?_putsUSART,c
  7134  000EA0  ECB3  F015         	call	_putsUSART	;wreg free
  7135                           
  7136                           ;ECAN.c: 891: char str[5];
  7137                           ;ECAN.c: 892: str[0] = 0;
  7138  000EA4  6E30               	movwf	??_ECANReceiveMessage& (0+255),c
  7139  000EA6  0E00               	movlw	0
  7140  000EA8  0100               	movlb	0	; () banked
  7141  000EAA  0100               	movlb	0	; () banked
  7142  000EAC  6FDF               	movwf	ECANReceiveMessage@str& (0+255),b
  7143  000EAE  5030               	movf	??_ECANReceiveMessage& (0+255),w,c
  7144                           
  7145                           ; BSR set to: 0
  7146                           ;ECAN.c: 893: sprintf(str, "%d", 893);
  7147  000EB0  0100               	movlb	0	; () banked
  7148  000EB2  0E00               	movlw	high ECANReceiveMessage@str
  7149  000EB4  0100               	movlb	0	; () banked
  7150  000EB6  0100               	movlb	0	; () banked
  7151  000EB8  6FC8               	movwf	(?_sprintf+1)& (0+255),b
  7152  000EBA  0100               	movlb	0	; () banked
  7153  000EBC  0EDF               	movlw	low ECANReceiveMessage@str
  7154  000EBE  0100               	movlb	0	; () banked
  7155  000EC0  6FC7               	movwf	?_sprintf& (0+255),b
  7156  000EC2  0E0D               	movlw	high STR_10
  7157  000EC4  0100               	movlb	0	; () banked
  7158  000EC6  0100               	movlb	0	; () banked
  7159  000EC8  6FCA               	movwf	(?_sprintf+3)& (0+255),b
  7160  000ECA  0E4A               	movlw	low STR_10
  7161  000ECC  0100               	movlb	0	; () banked
  7162  000ECE  6FC9               	movwf	(?_sprintf+2)& (0+255),b
  7163  000ED0  0E03               	movlw	3
  7164  000ED2  0100               	movlb	0	; () banked
  7165  000ED4  0100               	movlb	0	; () banked
  7166  000ED6  6FCC               	movwf	(?_sprintf+5)& (0+255),b
  7167  000ED8  0E7D               	movlw	125
  7168  000EDA  0100               	movlb	0	; () banked
  7169  000EDC  6FCB               	movwf	(?_sprintf+4)& (0+255),b
  7170  000EDE  EC70  F00C         	call	_sprintf	;wreg free
  7171                           
  7172                           ;ECAN.c: 894: putsUSART( str );
  7173  000EE2  0100               	movlb	0	; () banked
  7174  000EE4  0E00               	movlw	high ECANReceiveMessage@str
  7175  000EE6  6E22               	movwf	?_putsUSART+1,c
  7176  000EE8  0100               	movlb	0	; () banked
  7177  000EEA  0EDF               	movlw	low ECANReceiveMessage@str
  7178  000EEC  6E21               	movwf	?_putsUSART,c
  7179  000EEE  ECB3  F015         	call	_putsUSART	;wreg free
  7180                           
  7181                           ;ECAN.c: 895: putsUSART( " File: " );
  7182  000EF2  0E0D               	movlw	high STR_2
  7183  000EF4  6E22               	movwf	?_putsUSART+1,c
  7184  000EF6  0E38               	movlw	low STR_2
  7185  000EF8  6E21               	movwf	?_putsUSART,c
  7186  000EFA  ECB3  F015         	call	_putsUSART	;wreg free
  7187                           
  7188                           ;ECAN.c: 896: putsUSART( "source/ECAN.c" );
  7189  000EFE  0E0D               	movlw	high STR_26
  7190  000F00  6E22               	movwf	?_putsUSART+1,c
  7191  000F02  0E2A               	movlw	low STR_26
  7192  000F04  6E21               	movwf	?_putsUSART,c
  7193  000F06  ECB3  F015         	call	_putsUSART	;wreg free
  7194                           
  7195                           ;ECAN.c: 897: putsUSART( "\r\n" );
  7196  000F0A  0E0D               	movlw	high STR_4
  7197  000F0C  6E22               	movwf	?_putsUSART+1,c
  7198  000F0E  0E47               	movlw	low STR_4
  7199  000F10  6E21               	movwf	?_putsUSART,c
  7200  000F12  ECB3  F015         	call	_putsUSART	;wreg free
  7201  000F16  D0FB               	goto	l607
  7202  000F18                     l3778:
  7203                           
  7204                           ;ECAN.c: 983: putsUSART( "Line: " );
  7205  000F18  0E0D               	movlw	high STR_1
  7206  000F1A  6E22               	movwf	?_putsUSART+1,c
  7207  000F1C  0E40               	movlw	low STR_1
  7208  000F1E  6E21               	movwf	?_putsUSART,c
  7209  000F20  ECB3  F015         	call	_putsUSART	;wreg free
  7210                           
  7211                           ;ECAN.c: 984: putsUSART( 984 );
  7212  000F24  0E03               	movlw	3
  7213  000F26  6E22               	movwf	?_putsUSART+1,c
  7214  000F28  0ED8               	movlw	216
  7215  000F2A  6E21               	movwf	?_putsUSART,c
  7216  000F2C  ECB3  F015         	call	_putsUSART	;wreg free
  7217                           
  7218                           ;ECAN.c: 985: putsUSART( " File: " );
  7219  000F30  0E0D               	movlw	high STR_2
  7220  000F32  6E22               	movwf	?_putsUSART+1,c
  7221  000F34  0E38               	movlw	low STR_2
  7222  000F36  6E21               	movwf	?_putsUSART,c
  7223  000F38  ECB3  F015         	call	_putsUSART	;wreg free
  7224                           
  7225                           ;ECAN.c: 986: putsUSART( "source/ECAN.c" );
  7226  000F3C  0E0D               	movlw	high STR_26
  7227  000F3E  6E22               	movwf	?_putsUSART+1,c
  7228  000F40  0E2A               	movlw	low STR_26
  7229  000F42  6E21               	movwf	?_putsUSART,c
  7230  000F44  ECB3  F015         	call	_putsUSART	;wreg free
  7231                           
  7232                           ;ECAN.c: 987: putsUSART( "\r\n" );
  7233  000F48  0E0D               	movlw	high STR_4
  7234  000F4A  6E22               	movwf	?_putsUSART+1,c
  7235  000F4C  0E47               	movlw	low STR_4
  7236  000F4E  6E21               	movwf	?_putsUSART,c
  7237  000F50  ECB3  F015         	call	_putsUSART	;wreg free
  7238                           
  7239                           ;ECAN.c: 990: savedPtr = ptr;
  7240  000F54  C0EC  F0E9         	movff	ECANReceiveMessage@ptr,ECANReceiveMessage@savedPtr
  7241  000F58  C0ED  F0EA         	movff	ECANReceiveMessage@ptr+1,ECANReceiveMessage@savedPtr+1
  7242                           
  7243                           ;ECAN.c: 991: *msgFlags = 0;
  7244  000F5C  C0DD  FFD9         	movff	ECANReceiveMessage@msgFlags,fsr2l
  7245  000F60  C0DE  FFDA         	movff	ECANReceiveMessage@msgFlags+1,fsr2h
  7246  000F64  0E00               	movlw	0
  7247  000F66  6EDF               	movwf	indf2,c
  7248                           
  7249                           ;ECAN.c: 994: temp.Val = *(ptr+5);
  7250  000F68  0100               	movlb	0	; () banked
  7251  000F6A  EE20 F005          	lfsr	2,5
  7252  000F6E  0100               	movlb	0	; () banked
  7253  000F70  51EC               	movf	ECANReceiveMessage@ptr& (0+255),w,b
  7254  000F72  26D9               	addwf	fsr2l,f,c
  7255  000F74  0100               	movlb	0	; () banked
  7256  000F76  51ED               	movf	(ECANReceiveMessage@ptr+1)& (0+255),w,b
  7257  000F78  22DA               	addwfc	fsr2h,f,c
  7258  000F7A  50DF               	movf	indf2,w,c
  7259  000F7C  0100               	movlb	0	; () banked
  7260  000F7E  0100               	movlb	0	; () banked
  7261  000F80  6FEE               	movwf	ECANReceiveMessage@temp& (0+255),b
  7262                           
  7263                           ; BSR set to: 0
  7264                           ;ECAN.c: 995: *dataLen = temp.Val & 0b00001111;
  7265  000F82  0100               	movlb	0	; () banked
  7266  000F84  0100               	movlb	0	; () banked
  7267  000F86  51EE               	movf	ECANReceiveMessage@temp& (0+255),w,b
  7268  000F88  0B0F               	andlw	15
  7269  000F8A  C0DB  FFD9         	movff	ECANReceiveMessage@dataLen,fsr2l
  7270  000F8E  C0DC  FFDA         	movff	ECANReceiveMessage@dataLen+1,fsr2h
  7271  000F92  6EDF               	movwf	indf2,c
  7272                           
  7273                           ; BSR set to: 0
  7274                           ;ECAN.c: 998: if ( temp.bits.b6 )
  7275  000F94  0100               	movlb	0	; () banked
  7276  000F96  0100               	movlb	0	; () banked
  7277  000F98  ADEE               	btfss	ECANReceiveMessage@temp& (0+255),6,b
  7278  000F9A  D006               	goto	l609
  7279                           
  7280                           ; BSR set to: 0
  7281                           ;ECAN.c: 999: *msgFlags |= ECAN_RX_RTR_FRAME;
  7282  000F9C  C0DD  FFD9         	movff	ECANReceiveMessage@msgFlags,fsr2l
  7283  000FA0  C0DE  FFDA         	movff	ECANReceiveMessage@msgFlags+1,fsr2h
  7284  000FA4  0E00               	movlw	0
  7285  000FA6  8CDB               	bsf	plusw2,6,c
  7286  000FA8                     l609:
  7287                           
  7288                           ; BSR set to: 0
  7289                           ;ECAN.c: 1002: temp.Val = *(ptr+2);
  7290  000FA8  0100               	movlb	0	; () banked
  7291  000FAA  EE20 F002          	lfsr	2,2
  7292  000FAE  0100               	movlb	0	; () banked
  7293  000FB0  51EC               	movf	ECANReceiveMessage@ptr& (0+255),w,b
  7294  000FB2  26D9               	addwf	fsr2l,f,c
  7295  000FB4  0100               	movlb	0	; () banked
  7296  000FB6  51ED               	movf	(ECANReceiveMessage@ptr+1)& (0+255),w,b
  7297  000FB8  22DA               	addwfc	fsr2h,f,c
  7298  000FBA  50DF               	movf	indf2,w,c
  7299  000FBC  0100               	movlb	0	; () banked
  7300  000FBE  0100               	movlb	0	; () banked
  7301  000FC0  6FEE               	movwf	ECANReceiveMessage@temp& (0+255),b
  7302                           
  7303                           ; BSR set to: 0
  7304                           ;ECAN.c: 1003: if ( temp.bits.b3 )
  7305  000FC2  0100               	movlb	0	; () banked
  7306  000FC4  0100               	movlb	0	; () banked
  7307  000FC6  A7EE               	btfss	ECANReceiveMessage@temp& (0+255),3,b
  7308  000FC8  D009               	goto	l3798
  7309                           
  7310                           ; BSR set to: 0
  7311                           ;ECAN.c: 1004: {
  7312                           ;ECAN.c: 1005: *msgFlags |= ECAN_RX_XTD_FRAME;
  7313  000FCA  C0DD  FFD9         	movff	ECANReceiveMessage@msgFlags,fsr2l
  7314  000FCE  C0DE  FFDA         	movff	ECANReceiveMessage@msgFlags+1,fsr2h
  7315  000FD2  0E00               	movlw	0
  7316  000FD4  8ADB               	bsf	plusw2,5,c
  7317                           
  7318                           ; BSR set to: 0
  7319                           ;ECAN.c: 1006: temp.Val = 1;
  7320  000FD6  6E30               	movwf	??_ECANReceiveMessage& (0+255),c
  7321  000FD8  0E01               	movlw	1
  7322  000FDA  D002               	goto	L24
  7323  000FDC                     l3798:
  7324                           
  7325                           ; BSR set to: 0
  7326                           ;ECAN.c: 1008: else
  7327                           ;ECAN.c: 1009: temp.Val = 0;
  7328  000FDC  6E30               	movwf	??_ECANReceiveMessage& (0+255),c
  7329  000FDE  0E00               	movlw	0
  7330  000FE0                     L24:
  7331  000FE0  0100               	movlb	0	; () banked
  7332  000FE2  0100               	movlb	0	; () banked
  7333  000FE4  6FEE               	movwf	ECANReceiveMessage@temp& (0+255),b
  7334  000FE6  5030               	movf	??_ECANReceiveMessage& (0+255),w,c
  7335                           
  7336                           ; BSR set to: 0
  7337                           ;ECAN.c: 1011: _RegsToCANID(ptr+1, id, temp.Val);
  7338                           
  7339                           ; BSR set to: 0
  7340  000FE8  0E01               	movlw	1
  7341  000FEA  0100               	movlb	0	; () banked
  7342  000FEC  0100               	movlb	0	; () banked
  7343  000FEE  25EC               	addwf	ECANReceiveMessage@ptr& (0+255),w,b
  7344  000FF0  6E20               	movwf	?__RegsToCANID,c
  7345  000FF2  0E00               	movlw	0
  7346  000FF4  0100               	movlb	0	; () banked
  7347  000FF6  0100               	movlb	0	; () banked
  7348  000FF8  21ED               	addwfc	(ECANReceiveMessage@ptr+1)& (0+255),w,b
  7349  000FFA  6E21               	movwf	?__RegsToCANID+1,c
  7350  000FFC  C0D7  F022         	movff	ECANReceiveMessage@id,?__RegsToCANID+2
  7351  001000  C0D8  F023         	movff	ECANReceiveMessage@id+1,?__RegsToCANID+3
  7352  001004  C0EE  F024         	movff	ECANReceiveMessage@temp,?__RegsToCANID+4
  7353  001008  EC26  F00E         	call	__RegsToCANID	;wreg free
  7354                           
  7355                           ;ECAN.c: 1014: ptr += 6;
  7356  00100C  0E06               	movlw	6
  7357  00100E  0100               	movlb	0	; () banked
  7358  001010  0100               	movlb	0	; () banked
  7359  001012  27EC               	addwf	ECANReceiveMessage@ptr& (0+255),f,b
  7360  001014  0E00               	movlw	0
  7361  001016  0100               	movlb	0	; () banked
  7362  001018  23ED               	addwfc	(ECANReceiveMessage@ptr+1)& (0+255),f,b
  7363                           
  7364                           ; BSR set to: 0
  7365                           ;ECAN.c: 1015: temp.Val = *dataLen;
  7366  00101A  C0DB  FFD9         	movff	ECANReceiveMessage@dataLen,fsr2l
  7367  00101E  C0DC  FFDA         	movff	ECANReceiveMessage@dataLen+1,fsr2h
  7368  001022  50DF               	movf	indf2,w,c
  7369  001024  0100               	movlb	0	; () banked
  7370  001026  0100               	movlb	0	; () banked
  7371  001028  6FEE               	movwf	ECANReceiveMessage@temp& (0+255),b
  7372                           
  7373                           ; BSR set to: 0
  7374                           ;ECAN.c: 1016: for ( i = 0; i < temp.Val; i++ )
  7375  00102A  6E30               	movwf	??_ECANReceiveMessage& (0+255),c
  7376  00102C  0E00               	movlw	0
  7377  00102E  0100               	movlb	0	; () banked
  7378  001030  0100               	movlb	0	; () banked
  7379  001032  6FEB               	movwf	ECANReceiveMessage@i& (0+255),b
  7380  001034  5030               	movf	??_ECANReceiveMessage& (0+255),w,c
  7381  001036  D015               	goto	l3816
  7382  001038                     l3808:
  7383                           
  7384                           ; BSR set to: 0
  7385                           ;ECAN.c: 1017: *data++ = *ptr++;
  7386  001038  C0EC  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
  7387  00103C  C0ED  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
  7388  001040  C0D9  FFE1         	movff	ECANReceiveMessage@data,fsr1l
  7389  001044  C0DA  FFE2         	movff	ECANReceiveMessage@data+1,fsr1h
  7390  001048  CFDF FFE7          	movff	indf2,indf1
  7391                           
  7392                           ; BSR set to: 0
  7393  00104C  0100               	movlb	0	; () banked
  7394  00104E  0100               	movlb	0	; () banked
  7395  001050  4BEC               	infsnz	ECANReceiveMessage@ptr& (0+255),f,b
  7396  001052  2BED               	incf	(ECANReceiveMessage@ptr+1)& (0+255),f,b
  7397                           
  7398                           ; BSR set to: 0
  7399  001054  0100               	movlb	0	; () banked
  7400  001056  0100               	movlb	0	; () banked
  7401  001058  4BD9               	infsnz	ECANReceiveMessage@data& (0+255),f,b
  7402  00105A  2BDA               	incf	(ECANReceiveMessage@data+1)& (0+255),f,b
  7403                           
  7404                           ; BSR set to: 0
  7405  00105C  0100               	movlb	0	; () banked
  7406  00105E  0100               	movlb	0	; () banked
  7407  001060  2BEB               	incf	ECANReceiveMessage@i& (0+255),f,b
  7408  001062                     l3816:
  7409                           
  7410                           ; BSR set to: 0
  7411  001062  0100               	movlb	0	; () banked
  7412  001064  0100               	movlb	0	; () banked
  7413  001066  51EE               	movf	ECANReceiveMessage@temp& (0+255),w,b
  7414  001068  0100               	movlb	0	; () banked
  7415  00106A  0100               	movlb	0	; () banked
  7416  00106C  5DEB               	subwf	ECANReceiveMessage@i& (0+255),w,b
  7417  00106E  A0D8               	btfss	status,0,c
  7418  001070  D7E3               	goto	l3808
  7419                           
  7420                           ; BSR set to: 0
  7421                           ;ECAN.c: 1020: if ( PIR3bits.IRXIF )
  7422  001072  AEA4               	btfss	4004,7,c	;volatile
  7423  001074  D007               	goto	l3822
  7424                           
  7425                           ; BSR set to: 0
  7426                           ;ECAN.c: 1021: {
  7427                           ;ECAN.c: 1022: *msgFlags |= ECAN_RX_INVALID_MSG;
  7428  001076  C0DD  FFD9         	movff	ECANReceiveMessage@msgFlags,fsr2l
  7429  00107A  C0DE  FFDA         	movff	ECANReceiveMessage@msgFlags+1,fsr2h
  7430  00107E  0E00               	movlw	0
  7431  001080  88DB               	bsf	plusw2,4,c
  7432                           
  7433                           ; BSR set to: 0
  7434                           ;ECAN.c: 1023: PIR3bits.IRXIF = 0;
  7435  001082  9EA4               	bcf	4004,7,c	;volatile
  7436  001084                     l3822:
  7437                           
  7438                           ; BSR set to: 0
  7439                           ;ECAN.c: 1024: }
  7440                           ;ECAN.c: 1027: *savedPtr &= 0x7f;
  7441  001084  C0E9  FFD9         	movff	ECANReceiveMessage@savedPtr,fsr2l
  7442  001088  C0EA  FFDA         	movff	ECANReceiveMessage@savedPtr+1,fsr2h
  7443  00108C  0E7F               	movlw	127
  7444  00108E  16DF               	andwf	indf2,f,c
  7445                           
  7446                           ; BSR set to: 0
  7447                           ;ECAN.c: 1039: putsUSART( "Line: " );
  7448  001090  0E0D               	movlw	high STR_1
  7449  001092  6E22               	movwf	?_putsUSART+1,c
  7450  001094  0E40               	movlw	low STR_1
  7451  001096  6E21               	movwf	?_putsUSART,c
  7452  001098  ECB3  F015         	call	_putsUSART	;wreg free
  7453                           
  7454                           ;ECAN.c: 1040: char str[5];
  7455                           ;ECAN.c: 1041: str[0] = 0;
  7456  00109C  6E30               	movwf	??_ECANReceiveMessage& (0+255),c
  7457  00109E  0E00               	movlw	0
  7458  0010A0  0100               	movlb	0	; () banked
  7459  0010A2  0100               	movlb	0	; () banked
  7460  0010A4  6FE4               	movwf	ECANReceiveMessage@str_1913& (0+255),b
  7461  0010A6  5030               	movf	??_ECANReceiveMessage& (0+255),w,c
  7462                           
  7463                           ; BSR set to: 0
  7464                           ;ECAN.c: 1042: sprintf(str, "%d", 1042);
  7465  0010A8  0100               	movlb	0	; () banked
  7466  0010AA  0E00               	movlw	high ECANReceiveMessage@str_1913
  7467  0010AC  0100               	movlb	0	; () banked
  7468  0010AE  0100               	movlb	0	; () banked
  7469  0010B0  6FC8               	movwf	(?_sprintf+1)& (0+255),b
  7470  0010B2  0100               	movlb	0	; () banked
  7471  0010B4  0EE4               	movlw	low ECANReceiveMessage@str_1913
  7472  0010B6  0100               	movlb	0	; () banked
  7473  0010B8  6FC7               	movwf	?_sprintf& (0+255),b
  7474  0010BA  0E0D               	movlw	high STR_10
  7475  0010BC  0100               	movlb	0	; () banked
  7476  0010BE  0100               	movlb	0	; () banked
  7477  0010C0  6FCA               	movwf	(?_sprintf+3)& (0+255),b
  7478  0010C2  0E4A               	movlw	low STR_10
  7479  0010C4  0100               	movlb	0	; () banked
  7480  0010C6  6FC9               	movwf	(?_sprintf+2)& (0+255),b
  7481  0010C8  0E04               	movlw	4
  7482  0010CA  0100               	movlb	0	; () banked
  7483  0010CC  0100               	movlb	0	; () banked
  7484  0010CE  6FCC               	movwf	(?_sprintf+5)& (0+255),b
  7485  0010D0  0E12               	movlw	18
  7486  0010D2  0100               	movlb	0	; () banked
  7487  0010D4  6FCB               	movwf	(?_sprintf+4)& (0+255),b
  7488  0010D6  EC70  F00C         	call	_sprintf	;wreg free
  7489                           
  7490                           ;ECAN.c: 1043: putsUSART( str );
  7491  0010DA  0100               	movlb	0	; () banked
  7492  0010DC  0E00               	movlw	high ECANReceiveMessage@str_1913
  7493  0010DE  6E22               	movwf	?_putsUSART+1,c
  7494  0010E0  0100               	movlb	0	; () banked
  7495  0010E2  0EE4               	movlw	low ECANReceiveMessage@str_1913
  7496  0010E4  6E21               	movwf	?_putsUSART,c
  7497  0010E6  ECB3  F015         	call	_putsUSART	;wreg free
  7498                           
  7499                           ;ECAN.c: 1044: putsUSART( " File: " );
  7500  0010EA  0E0D               	movlw	high STR_2
  7501  0010EC  6E22               	movwf	?_putsUSART+1,c
  7502  0010EE  0E38               	movlw	low STR_2
  7503  0010F0  6E21               	movwf	?_putsUSART,c
  7504  0010F2  ECB3  F015         	call	_putsUSART	;wreg free
  7505                           
  7506                           ;ECAN.c: 1045: putsUSART( "source/ECAN.c" );
  7507  0010F6  0E0D               	movlw	high STR_26
  7508  0010F8  6E22               	movwf	?_putsUSART+1,c
  7509  0010FA  0E2A               	movlw	low STR_26
  7510  0010FC  6E21               	movwf	?_putsUSART,c
  7511  0010FE  ECB3  F015         	call	_putsUSART	;wreg free
  7512                           
  7513                           ;ECAN.c: 1046: putsUSART( "\r\n" );
  7514  001102  0E0D               	movlw	high STR_4
  7515  001104  6E22               	movwf	?_putsUSART+1,c
  7516  001106  0E47               	movlw	low STR_4
  7517  001108  6E21               	movwf	?_putsUSART,c
  7518  00110A  ECB3  F015         	call	_putsUSART	;wreg free
  7519  00110E                     l607:
  7520  00110E  0012               	return	
  7521  001110                     __end_of_ECANReceiveMessage:
  7522                           	opt stack 0
  7523                           tblptru	equ	0xFF8
  7524                           tblptrh	equ	0xFF7
  7525                           tblptrl	equ	0xFF6
  7526                           tablat	equ	0xFF5
  7527                           prodh	equ	0xFF4
  7528                           prodl	equ	0xFF3
  7529                           intcon	equ	0xFF2
  7530                           postinc0	equ	0xFEE
  7531                           wreg	equ	0xFE8
  7532                           indf1	equ	0xFE7
  7533                           postdec1	equ	0xFE5
  7534                           fsr1h	equ	0xFE2
  7535                           fsr1l	equ	0xFE1
  7536                           indf2	equ	0xFDF
  7537                           postinc2	equ	0xFDE
  7538                           postdec2	equ	0xFDD
  7539                           plusw2	equ	0xFDB
  7540                           fsr2h	equ	0xFDA
  7541                           fsr2l	equ	0xFD9
  7542                           status	equ	0xFD8
  7543                           
  7544 ;; *************** function __RegsToCANID *****************
  7545 ;; Defined at:
  7546 ;;		line 1215 in file "source/ECAN.c"
  7547 ;; Parameters:    Size  Location     Type
  7548 ;;  ptr             2   31[COMRAM] PTR unsigned char 
  7549 ;;		 -> RXB1CON(1), RXB0CON(1), 
  7550 ;;  val             2   33[COMRAM] PTR unsigned long 
  7551 ;;		 -> id(4), 
  7552 ;;  type            1   35[COMRAM] unsigned char 
  7553 ;; Auto vars:     Size  Location     Type
  7554 ;;  Value           2   38[COMRAM] PTR struct _CAN_MESSAGE_
  7555 ;;		 -> id(4), 
  7556 ;; Return value:  Size  Location     Type
  7557 ;;		None               void
  7558 ;; Registers used:
  7559 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  7560 ;; Tracked objects:
  7561 ;;		On entry : 0/0
  7562 ;;		On exit  : 0/0
  7563 ;;		Unchanged: 0/0
  7564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7565 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7566 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7567 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7568 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7569 ;;Total ram usage:        9 bytes
  7570 ;; Hardware stack levels used:    1
  7571 ;; Hardware stack levels required when called:    2
  7572 ;; This function calls:
  7573 ;;		Nothing
  7574 ;; This function is called by:
  7575 ;;		_ECANReceiveMessage
  7576 ;; This function uses a non-reentrant model
  7577 ;;
  7578                           
  7579                           	psect	text37
  7580  001C4C                     __ptext37:
  7581                           	opt stack 0
  7582  001C4C                     __RegsToCANID:
  7583                           	opt stack 24
  7584                           
  7585                           ;ECAN.c: 1216: CAN_MESSAGE_ID *Value;
  7586                           ;ECAN.c: 1218: Value = (CAN_MESSAGE_ID*)val;
  7587                           
  7588                           ;incstack = 0
  7589                           ;incstack = 0
  7590  001C4C  C022  F027         	movff	__RegsToCANID@val,__RegsToCANID@Value
  7591  001C50  C023  F028         	movff	__RegsToCANID@val+1,__RegsToCANID@Value+1
  7592                           
  7593                           ;ECAN.c: 1220: if ( type == 0 )
  7594  001C54  6624               	tstfsz	__RegsToCANID@type,c
  7595  001C56  D04A               	goto	l3474
  7596                           
  7597                           ;ECAN.c: 1221: {
  7598                           ;ECAN.c: 1223: Value->BYTES.BYTE_1 = (*ptr << 3);
  7599  001C58  C020  FFD9         	movff	__RegsToCANID@ptr,fsr2l
  7600  001C5C  C021  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
  7601  001C60  50DF               	movf	indf2,w,c
  7602  001C62  6E25               	movwf	??__RegsToCANID& (0+255),c
  7603  001C64  90D8               	bcf	status,0,c
  7604  001C66  3625               	rlcf	??__RegsToCANID,f,c
  7605  001C68  90D8               	bcf	status,0,c
  7606  001C6A  3625               	rlcf	??__RegsToCANID,f,c
  7607  001C6C  90D8               	bcf	status,0,c
  7608  001C6E  3425               	rlcf	??__RegsToCANID,w,c
  7609  001C70  C027  FFD9         	movff	__RegsToCANID@Value,fsr2l
  7610  001C74  C028  FFDA         	movff	__RegsToCANID@Value+1,fsr2h
  7611  001C78  6EDF               	movwf	indf2,c
  7612                           
  7613                           ;ECAN.c: 1224: Value->BYTES.BYTE_2 = *ptr >> 5;
  7614  001C7A  EE20 F001          	lfsr	2,1
  7615  001C7E  5027               	movf	__RegsToCANID@Value,w,c
  7616  001C80  26D9               	addwf	fsr2l,f,c
  7617  001C82  5028               	movf	__RegsToCANID@Value+1,w,c
  7618  001C84  22DA               	addwfc	fsr2h,f,c
  7619  001C86  C020  FFE1         	movff	__RegsToCANID@ptr,fsr1l
  7620  001C8A  C021  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
  7621  001C8E  50E7               	movf	indf1,w,c
  7622  001C90  6E25               	movwf	??__RegsToCANID& (0+255),c
  7623  001C92  0E05               	movlw	5
  7624  001C94  6E26               	movwf	(??__RegsToCANID+1)& (0+255),c
  7625  001C96                     u2215:
  7626  001C96  90D8               	bcf	status,0,c
  7627  001C98  3225               	rrcf	??__RegsToCANID,f,c
  7628  001C9A  2E26               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
  7629  001C9C  D7FC               	goto	u2215
  7630  001C9E  5025               	movf	??__RegsToCANID,w,c
  7631  001CA0  6EDF               	movwf	indf2,c
  7632                           
  7633                           ;ECAN.c: 1225: ptr++;
  7634  001CA2  4A20               	infsnz	__RegsToCANID@ptr,f,c
  7635  001CA4  2A21               	incf	__RegsToCANID@ptr+1,f,c
  7636                           
  7637                           ;ECAN.c: 1226: Value->BYTES.BYTE_1 |= (*ptr >> 5);
  7638  001CA6  C020  FFD9         	movff	__RegsToCANID@ptr,fsr2l
  7639  001CAA  C021  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
  7640  001CAE  50DF               	movf	indf2,w,c
  7641  001CB0  6E25               	movwf	??__RegsToCANID& (0+255),c
  7642  001CB2  0E05               	movlw	5
  7643  001CB4  6E26               	movwf	(??__RegsToCANID+1)& (0+255),c
  7644  001CB6                     u2225:
  7645  001CB6  90D8               	bcf	status,0,c
  7646  001CB8  3225               	rrcf	??__RegsToCANID,f,c
  7647  001CBA  2E26               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
  7648  001CBC  D7FC               	goto	u2225
  7649  001CBE  C027  FFD9         	movff	__RegsToCANID@Value,fsr2l
  7650  001CC2  C028  FFDA         	movff	__RegsToCANID@Value+1,fsr2h
  7651  001CC6  5025               	movf	??__RegsToCANID,w,c
  7652  001CC8  12DF               	iorwf	indf2,f,c
  7653                           
  7654                           ;ECAN.c: 1227: Value->BYTES.BYTE_3 = 0x00;
  7655  001CCA  EE20 F002          	lfsr	2,2
  7656  001CCE  5027               	movf	__RegsToCANID@Value,w,c
  7657  001CD0  26D9               	addwf	fsr2l,f,c
  7658  001CD2  5028               	movf	__RegsToCANID@Value+1,w,c
  7659  001CD4  22DA               	addwfc	fsr2h,f,c
  7660  001CD6  0E00               	movlw	0
  7661  001CD8  6EDF               	movwf	indf2,c
  7662                           
  7663                           ;ECAN.c: 1228: Value->BYTES.BYTE_4 = 0x00;
  7664  001CDA  EE20 F003          	lfsr	2,3
  7665  001CDE  5027               	movf	__RegsToCANID@Value,w,c
  7666  001CE0  26D9               	addwf	fsr2l,f,c
  7667  001CE2  5028               	movf	__RegsToCANID@Value+1,w,c
  7668  001CE4  22DA               	addwfc	fsr2h,f,c
  7669  001CE6  0E00               	movlw	0
  7670  001CE8  6EDF               	movwf	indf2,c
  7671                           
  7672                           ;ECAN.c: 1229: }
  7673  001CEA  D069               	goto	l631
  7674  001CEC                     l3474:
  7675                           
  7676                           ;ECAN.c: 1230: else
  7677                           ;ECAN.c: 1231: {
  7678                           ;ECAN.c: 1233: Value->BYTES.BYTE_3 = (*ptr << 5);
  7679  001CEC  EE20 F002          	lfsr	2,2
  7680  001CF0  5027               	movf	__RegsToCANID@Value,w,c
  7681  001CF2  26D9               	addwf	fsr2l,f,c
  7682  001CF4  5028               	movf	__RegsToCANID@Value+1,w,c
  7683  001CF6  22DA               	addwfc	fsr2h,f,c
  7684  001CF8  C020  FFE1         	movff	__RegsToCANID@ptr,fsr1l
  7685  001CFC  C021  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
  7686  001D00  50E7               	movf	indf1,w,c
  7687  001D02  6E25               	movwf	??__RegsToCANID& (0+255),c
  7688  001D04  0E05               	movlw	5
  7689  001D06  6E26               	movwf	(??__RegsToCANID+1)& (0+255),c
  7690  001D08                     u2235:
  7691  001D08  90D8               	bcf	status,0,c
  7692  001D0A  3625               	rlcf	??__RegsToCANID,f,c
  7693  001D0C  2E26               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
  7694  001D0E  D7FC               	goto	u2235
  7695  001D10  5025               	movf	??__RegsToCANID,w,c
  7696  001D12  6EDF               	movwf	indf2,c
  7697                           
  7698                           ;ECAN.c: 1234: Value->BYTES.BYTE_4 = (*ptr >> 3);
  7699  001D14  EE20 F003          	lfsr	2,3
  7700  001D18  5027               	movf	__RegsToCANID@Value,w,c
  7701  001D1A  26D9               	addwf	fsr2l,f,c
  7702  001D1C  5028               	movf	__RegsToCANID@Value+1,w,c
  7703  001D1E  22DA               	addwfc	fsr2h,f,c
  7704  001D20  C020  FFE1         	movff	__RegsToCANID@ptr,fsr1l
  7705  001D24  C021  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
  7706  001D28  50E7               	movf	indf1,w,c
  7707  001D2A  6E25               	movwf	??__RegsToCANID& (0+255),c
  7708  001D2C  90D8               	bcf	status,0,c
  7709  001D2E  3225               	rrcf	??__RegsToCANID,f,c
  7710  001D30  90D8               	bcf	status,0,c
  7711  001D32  3225               	rrcf	??__RegsToCANID,f,c
  7712  001D34  90D8               	bcf	status,0,c
  7713  001D36  3025               	rrcf	??__RegsToCANID,w,c
  7714  001D38  6EDF               	movwf	indf2,c
  7715                           
  7716                           ;ECAN.c: 1235: ptr++;
  7717  001D3A  4A20               	infsnz	__RegsToCANID@ptr,f,c
  7718  001D3C  2A21               	incf	__RegsToCANID@ptr+1,f,c
  7719                           
  7720                           ;ECAN.c: 1236: Value->BYTES.BYTE_3 |= (*ptr & 0x03);
  7721  001D3E  C020  FFD9         	movff	__RegsToCANID@ptr,fsr2l
  7722  001D42  C021  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
  7723  001D46  50DF               	movf	indf2,w,c
  7724  001D48  6E25               	movwf	??__RegsToCANID& (0+255),c
  7725  001D4A  0E03               	movlw	3
  7726  001D4C  1625               	andwf	??__RegsToCANID,f,c
  7727  001D4E  EE20 F002          	lfsr	2,2
  7728  001D52  5027               	movf	__RegsToCANID@Value,w,c
  7729  001D54  26D9               	addwf	fsr2l,f,c
  7730  001D56  5028               	movf	__RegsToCANID@Value+1,w,c
  7731  001D58  22DA               	addwfc	fsr2h,f,c
  7732  001D5A  5025               	movf	??__RegsToCANID,w,c
  7733  001D5C  12DF               	iorwf	indf2,f,c
  7734                           
  7735                           ;ECAN.c: 1238: Value->BYTES.BYTE_3 |= ((*ptr & 0xe0) >> 3);
  7736  001D5E  C020  FFD9         	movff	__RegsToCANID@ptr,fsr2l
  7737  001D62  C021  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
  7738  001D66  50DF               	movf	indf2,w,c
  7739  001D68  6E25               	movwf	??__RegsToCANID& (0+255),c
  7740  001D6A  90D8               	bcf	status,0,c
  7741  001D6C  3225               	rrcf	??__RegsToCANID,f,c
  7742  001D6E  90D8               	bcf	status,0,c
  7743  001D70  3225               	rrcf	??__RegsToCANID,f,c
  7744  001D72  90D8               	bcf	status,0,c
  7745  001D74  3225               	rrcf	??__RegsToCANID,f,c
  7746  001D76  0E1C               	movlw	28
  7747  001D78  1625               	andwf	??__RegsToCANID,f,c
  7748  001D7A  EE20 F002          	lfsr	2,2
  7749  001D7E  5027               	movf	__RegsToCANID@Value,w,c
  7750  001D80  26D9               	addwf	fsr2l,f,c
  7751  001D82  5028               	movf	__RegsToCANID@Value+1,w,c
  7752  001D84  22DA               	addwfc	fsr2h,f,c
  7753  001D86  5025               	movf	??__RegsToCANID,w,c
  7754  001D88  12DF               	iorwf	indf2,f,c
  7755                           
  7756                           ;ECAN.c: 1239: ptr++;
  7757  001D8A  4A20               	infsnz	__RegsToCANID@ptr,f,c
  7758  001D8C  2A21               	incf	__RegsToCANID@ptr+1,f,c
  7759                           
  7760                           ;ECAN.c: 1240: Value->BYTES.BYTE_2 = *ptr;
  7761  001D8E  C020  FFD9         	movff	__RegsToCANID@ptr,fsr2l
  7762  001D92  C021  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
  7763  001D96  EE10 F001          	lfsr	1,1
  7764  001D9A  5027               	movf	__RegsToCANID@Value,w,c
  7765  001D9C  26E1               	addwf	fsr1l,f,c
  7766  001D9E  5028               	movf	__RegsToCANID@Value+1,w,c
  7767  001DA0  22E2               	addwfc	fsr1h,f,c
  7768  001DA2  CFDF FFE7          	movff	indf2,indf1
  7769                           
  7770                           ;ECAN.c: 1241: ptr++;
  7771  001DA6  4A20               	infsnz	__RegsToCANID@ptr,f,c
  7772  001DA8  2A21               	incf	__RegsToCANID@ptr+1,f,c
  7773                           
  7774                           ;ECAN.c: 1242: Value->BYTES.BYTE_1 = *ptr;
  7775  001DAA  C020  FFD9         	movff	__RegsToCANID@ptr,fsr2l
  7776  001DAE  C021  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
  7777  001DB2  C027  FFE1         	movff	__RegsToCANID@Value,fsr1l
  7778  001DB6  C028  FFE2         	movff	__RegsToCANID@Value+1,fsr1h
  7779  001DBA  CFDF FFE7          	movff	indf2,indf1
  7780  001DBE                     l631:
  7781  001DBE  0012               	return	
  7782  001DC0                     __end_of__RegsToCANID:
  7783                           	opt stack 0
  7784                           tblptru	equ	0xFF8
  7785                           tblptrh	equ	0xFF7
  7786                           tblptrl	equ	0xFF6
  7787                           tablat	equ	0xFF5
  7788                           prodh	equ	0xFF4
  7789                           prodl	equ	0xFF3
  7790                           intcon	equ	0xFF2
  7791                           postinc0	equ	0xFEE
  7792                           wreg	equ	0xFE8
  7793                           indf1	equ	0xFE7
  7794                           postdec1	equ	0xFE5
  7795                           fsr1h	equ	0xFE2
  7796                           fsr1l	equ	0xFE1
  7797                           indf2	equ	0xFDF
  7798                           postinc2	equ	0xFDE
  7799                           postdec2	equ	0xFDD
  7800                           plusw2	equ	0xFDB
  7801                           fsr2h	equ	0xFDA
  7802                           fsr2l	equ	0xFD9
  7803                           status	equ	0xFD8
  7804                           
  7805 ;; *************** function _sprintf *****************
  7806 ;; Defined at:
  7807 ;;		line 493 in file "C:\Program Files\Microchip\xc8\v1.20\sources\common\doprnt.c"
  7808 ;; Parameters:    Size  Location     Type
  7809 ;;  sp              2    0[BANK0 ] PTR unsigned char 
  7810 ;;		 -> ECANReceiveMessage@str_1913(5), ECANReceiveMessage@str(5), CanCommsTask@str_333(5), CanCommsTask@str(5), 
  7811 ;;  f               2    2[BANK0 ] PTR const unsigned char 
  7812 ;;		 -> STR_46(3), STR_37(3), STR_20(3), STR_15(3), 
  7813 ;;		 -> STR_10(3), 
  7814 ;; Auto vars:     Size  Location     Type
  7815 ;;  _val            5   10[BANK0 ] struct .
  7816 ;;  ap              2    6[BANK0 ] PTR void [1]
  7817 ;;		 -> ?_sprintf(2), 
  7818 ;;  c               1   15[BANK0 ] char 
  7819 ;;  prec            1    9[BANK0 ] char 
  7820 ;;  flag            1    8[BANK0 ] unsigned char 
  7821 ;; Return value:  Size  Location     Type
  7822 ;;                  2    0[BANK0 ] int 
  7823 ;; Registers used:
  7824 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7825 ;; Tracked objects:
  7826 ;;		On entry : 0/0
  7827 ;;		On exit  : 0/0
  7828 ;;		Unchanged: 0/0
  7829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7830 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7831 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7832 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7833 ;;      Totals:         2      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7834 ;;Total ram usage:       18 bytes
  7835 ;; Hardware stack levels used:    1
  7836 ;; Hardware stack levels required when called:    3
  7837 ;; This function calls:
  7838 ;;		___lwdiv
  7839 ;;		___lwmod
  7840 ;; This function is called by:
  7841 ;;		_CanCommsTask
  7842 ;;		_ECANReceiveMessage
  7843 ;; This function uses a non-reentrant model
  7844 ;;
  7845                           
  7846                           	psect	text38
  7847  0018E0                     __ptext38:
  7848                           	opt stack 0
  7849  0018E0                     _sprintf:
  7850                           	opt stack 24
  7851                           
  7852                           ;doprnt.c: 494: va_list ap;
  7853                           ;doprnt.c: 499: signed char c;
  7854                           ;doprnt.c: 506: signed char prec;
  7855                           ;doprnt.c: 508: unsigned char flag;
  7856                           ;doprnt.c: 527: union {
  7857                           ;doprnt.c: 528: unsigned int _val;
  7858                           ;doprnt.c: 529: struct {
  7859                           ;doprnt.c: 530: const char * _cp;
  7860                           ;doprnt.c: 531: unsigned _len;
  7861                           ;doprnt.c: 532: } _str;
  7862                           ;doprnt.c: 533: } _val;
  7863                           ;doprnt.c: 542: *ap = __va_start();
  7864                           
  7865                           ;incstack = 0
  7866                           ;incstack = 0
  7867  0018E0  0100               	movlb	0	; () banked
  7868  0018E2  0E00               	movlw	high (?_sprintf+4)
  7869  0018E4  0100               	movlb	0	; () banked
  7870  0018E6  0100               	movlb	0	; () banked
  7871  0018E8  6FCE               	movwf	(sprintf@ap+1)& (0+255),b
  7872  0018EA  0100               	movlb	0	; () banked
  7873  0018EC  0ECB               	movlw	low (?_sprintf+4)
  7874  0018EE  0100               	movlb	0	; () banked
  7875  0018F0  6FCD               	movwf	sprintf@ap& (0+255),b
  7876                           
  7877                           ;doprnt.c: 545: while(c = *f++) {
  7878  0018F2  D0C4               	goto	l3894
  7879  0018F4                     l3842:
  7880                           
  7881                           ; BSR set to: 0
  7882                           ;doprnt.c: 547: if(c != '%')
  7883  0018F4  0100               	movlb	0	; () banked
  7884  0018F6  0100               	movlb	0	; () banked
  7885  0018F8  51D6               	movf	sprintf@c& (0+255),w,b
  7886  0018FA  0A25               	xorlw	37
  7887  0018FC  B4D8               	btfsc	status,2,c
  7888  0018FE  D00C               	goto	l3848
  7889                           
  7890                           ; BSR set to: 0
  7891                           ;doprnt.c: 549: {
  7892                           ;doprnt.c: 550: ((*sp++ = (c)));
  7893  001900  C0C7  FFD9         	movff	sprintf@sp,fsr2l
  7894  001904  C0C8  FFDA         	movff	sprintf@sp+1,fsr2h
  7895  001908  0100               	movlb	0	; () banked
  7896  00190A  C0D6  FFDF         	movff	sprintf@c,indf2
  7897                           
  7898                           ; BSR set to: 0
  7899  00190E  0100               	movlb	0	; () banked
  7900  001910  0100               	movlb	0	; () banked
  7901  001912  4BC7               	infsnz	sprintf@sp& (0+255),f,b
  7902  001914  2BC8               	incf	(sprintf@sp+1)& (0+255),f,b
  7903                           
  7904                           ;doprnt.c: 551: continue;
  7905  001916  D0B2               	goto	l3894
  7906  001918                     l3848:
  7907                           
  7908                           ; BSR set to: 0
  7909                           ;doprnt.c: 552: }
  7910                           ;doprnt.c: 557: flag = 0;
  7911  001918  6E2E               	movwf	??_sprintf& (0+255),c
  7912  00191A  0E00               	movlw	0
  7913  00191C  0100               	movlb	0	; () banked
  7914  00191E  0100               	movlb	0	; () banked
  7915  001920  6FCF               	movwf	sprintf@flag& (0+255),b
  7916  001922  502E               	movf	??_sprintf& (0+255),w,c
  7917                           
  7918                           ; BSR set to: 0
  7919                           
  7920                           ; BSR set to: 0
  7921                           
  7922                           ; BSR set to: 0
  7923                           ;doprnt.c: 831: }
  7924                           
  7925                           ; BSR set to: 0
  7926                           ;doprnt.c: 822: continue;
  7927                           
  7928                           ;doprnt.c: 811: default:
  7929                           
  7930                           ; BSR set to: 0
  7931                           ;doprnt.c: 707: case 'i':
  7932                           ;doprnt.c: 708: break;
  7933                           
  7934                           ; BSR set to: 0
  7935                           
  7936                           ;doprnt.c: 706: case 'd':
  7937                           
  7938                           ; BSR set to: 0
  7939                           ;doprnt.c: 647: goto alldone;
  7940                           
  7941                           ;doprnt.c: 646: case 0:
  7942                           
  7943                           ;doprnt.c: 644: switch(c = *f++) {
  7944  001924  0100               	movlb	0	; () banked
  7945  001926  C0C9  FFF6         	movff	sprintf@f,tblptrl
  7946  00192A  0100               	movlb	0	; () banked
  7947  00192C  C0CA  FFF7         	movff	sprintf@f+1,tblptrh
  7948  001930  0100               	movlb	0	; () banked
  7949  001932  0100               	movlb	0	; () banked
  7950  001934  4BC9               	infsnz	sprintf@f& (0+255),f,b
  7951  001936  2BCA               	incf	(sprintf@f+1)& (0+255),f,b
  7952  001938  0008               	tblrd		*
  7953  00193A  0100               	movlb	0	; () banked
  7954  00193C  CFF5 F0D6          	movff	tablat,sprintf@c
  7955  001940  0100               	movlb	0	; () banked
  7956  001942  51D6               	movf	sprintf@c& (0+255),w,b
  7957                           
  7958                           ; Switch size 1, requested type "space"
  7959                           ; Number of cases is 3, Range of values is 0 to 105
  7960                           ; switch strategies available:
  7961                           ; Name         Instructions Cycles
  7962                           ; simple_byte           10     6 (average)
  7963                           ;	Chosen strategy is simple_byte
  7964  001944  0A00               	xorlw	0	; case 0
  7965  001946  B4D8               	btfsc	status,2,c
  7966  001948  D0AA               	goto	l3896
  7967  00194A  0A64               	xorlw	100	; case 100
  7968  00194C  A4D8               	btfss	status,2,c
  7969  00194E  0A0D               	xorlw	13	; case 105
  7970  001950  A4D8               	btfss	status,2,c
  7971  001952  D094               	goto	l3894
  7972                           
  7973                           ; BSR set to: 0
  7974                           ;doprnt.c: 1260: {
  7975                           ;doprnt.c: 1266: _val._val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  7976                           
  7977                           ; BSR set to: 0
  7978  001954  C0CD  FFD9         	movff	sprintf@ap,fsr2l
  7979  001958  C0CE  FFDA         	movff	sprintf@ap+1,fsr2h
  7980  00195C  0100               	movlb	0	; () banked
  7981  00195E  CFDE F0D1          	movff	postinc2,sprintf@_val
  7982  001962  0100               	movlb	0	; () banked
  7983  001964  CFDD F0D2          	movff	postdec2,sprintf@_val+1
  7984                           
  7985                           ; BSR set to: 0
  7986  001968  0E02               	movlw	2
  7987  00196A  0100               	movlb	0	; () banked
  7988  00196C  0100               	movlb	0	; () banked
  7989  00196E  27CD               	addwf	sprintf@ap& (0+255),f,b
  7990  001970  0E00               	movlw	0
  7991  001972  0100               	movlb	0	; () banked
  7992  001974  23CE               	addwfc	(sprintf@ap+1)& (0+255),f,b
  7993                           
  7994                           ; BSR set to: 0
  7995                           ;doprnt.c: 1268: if((int)_val._val < 0) {
  7996  001976  0100               	movlb	0	; () banked
  7997  001978  0100               	movlb	0	; () banked
  7998  00197A  AFD2               	btfss	(sprintf@_val+1)& (0+255),7,b
  7999  00197C  D00B               	goto	l3864
  8000                           
  8001                           ; BSR set to: 0
  8002                           ;doprnt.c: 1269: flag |= 0x03;
  8003  00197E  0E03               	movlw	3
  8004  001980  0100               	movlb	0	; () banked
  8005  001982  0100               	movlb	0	; () banked
  8006  001984  13CF               	iorwf	sprintf@flag& (0+255),f,b
  8007                           
  8008                           ; BSR set to: 0
  8009                           ;doprnt.c: 1270: _val._val = -_val._val;
  8010  001986  0100               	movlb	0	; () banked
  8011  001988  0100               	movlb	0	; () banked
  8012  00198A  6DD1               	negf	sprintf@_val& (0+255),b
  8013  00198C  0100               	movlb	0	; () banked
  8014  00198E  1FD2               	comf	(sprintf@_val+1)& (0+255),f,b
  8015  001990  B0D8               	btfsc	status,0,c
  8016  001992  2BD2               	incf	(sprintf@_val+1)& (0+255),f,b
  8017  001994                     l3864:
  8018                           
  8019                           ; BSR set to: 0
  8020                           ;doprnt.c: 1271: }
  8021                           ;doprnt.c: 1273: }
  8022                           ;doprnt.c: 1312: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  8023  001994  6E2E               	movwf	??_sprintf& (0+255),c
  8024  001996  0E01               	movlw	1
  8025  001998  0100               	movlb	0	; () banked
  8026  00199A  0100               	movlb	0	; () banked
  8027  00199C  6FD6               	movwf	sprintf@c& (0+255),b
  8028  00199E  502E               	movf	??_sprintf& (0+255),w,c
  8029  0019A0                     
  8030                           ; BSR set to: 0
  8031  0019A0  0100               	movlb	0	; () banked
  8032  0019A2  0100               	movlb	0	; () banked
  8033  0019A4  51D6               	movf	sprintf@c& (0+255),w,b
  8034  0019A6  0A05               	xorlw	5
  8035  0019A8  B4D8               	btfsc	status,2,c
  8036  0019AA  D01E               	goto	l3878
  8037                           
  8038                           ; BSR set to: 0
  8039                           ;doprnt.c: 1313: if(_val._val < dpowers[c])
  8040                           
  8041                           ; BSR set to: 0
  8042                           
  8043                           ; BSR set to: 0
  8044  0019AC  0100               	movlb	0	; () banked
  8045  0019AE  0100               	movlb	0	; () banked
  8046  0019B0  51D6               	movf	sprintf@c& (0+255),w,b
  8047  0019B2  0D02               	mullw	2
  8048  0019B4  0E00               	movlw	low _dpowers
  8049  0019B6  24F3               	addwf	prodl,w,c
  8050  0019B8  6EF6               	movwf	tblptrl,c
  8051  0019BA  0E0D               	movlw	high _dpowers
  8052  0019BC  20F4               	addwfc	prodh,w,c
  8053  0019BE  6EF7               	movwf	tblptrh,c
  8054  0019C0  0009               	tblrd		*+
  8055  0019C2  CFF5 F02E          	movff	tablat,??_sprintf
  8056  0019C6  0009               	tblrd		*+
  8057  0019C8  CFF5 F02F          	movff	tablat,??_sprintf+1
  8058  0019CC  502E               	movf	??_sprintf,w,c
  8059  0019CE  0100               	movlb	0	; () banked
  8060  0019D0  0100               	movlb	0	; () banked
  8061  0019D2  5DD1               	subwf	sprintf@_val& (0+255),w,b
  8062  0019D4  502F               	movf	??_sprintf+1,w,c
  8063  0019D6  0100               	movlb	0	; () banked
  8064  0019D8  0100               	movlb	0	; () banked
  8065  0019DA  59D2               	subwfb	(sprintf@_val+1)& (0+255),w,b
  8066  0019DC  A0D8               	btfss	status,0,c
  8067  0019DE  D004               	goto	l3878
  8068                           
  8069                           ; BSR set to: 0
  8070                           
  8071                           ; BSR set to: 0
  8072                           
  8073                           ; BSR set to: 0
  8074                           ;doprnt.c: 1314: break;
  8075  0019E0  0100               	movlb	0	; () banked
  8076  0019E2  0100               	movlb	0	; () banked
  8077  0019E4  2BD6               	incf	sprintf@c& (0+255),f,b
  8078  0019E6  D7DC               	goto	L25
  8079  0019E8                     l3878:
  8080                           
  8081                           ; BSR set to: 0
  8082                           ;doprnt.c: 1429: {
  8083                           ;doprnt.c: 1445: if(flag & 0x03)
  8084  0019E8  0100               	movlb	0	; () banked
  8085  0019EA  0100               	movlb	0	; () banked
  8086  0019EC  51CF               	movf	sprintf@flag& (0+255),w,b
  8087  0019EE  0B03               	andlw	3
  8088  0019F0  B4D8               	btfsc	status,2,c
  8089  0019F2  D00A               	goto	l3884
  8090                           
  8091                           ; BSR set to: 0
  8092                           ;doprnt.c: 1446: ((*sp++ = ('-')));
  8093  0019F4  C0C7  FFD9         	movff	sprintf@sp,fsr2l
  8094  0019F8  C0C8  FFDA         	movff	sprintf@sp+1,fsr2h
  8095  0019FC  0E2D               	movlw	45
  8096  0019FE  6EDF               	movwf	indf2,c
  8097                           
  8098                           ; BSR set to: 0
  8099  001A00  0100               	movlb	0	; () banked
  8100  001A02  0100               	movlb	0	; () banked
  8101  001A04  4BC7               	infsnz	sprintf@sp& (0+255),f,b
  8102  001A06  2BC8               	incf	(sprintf@sp+1)& (0+255),f,b
  8103  001A08                     l3884:
  8104                           
  8105                           ; BSR set to: 0
  8106                           ;doprnt.c: 1476: }
  8107                           ;doprnt.c: 1479: prec = c;
  8108  001A08  C0D6  F0D0         	movff	sprintf@c,sprintf@prec
  8109                           
  8110                           ;doprnt.c: 1481: while(prec--) {
  8111  001A0C  D030               	goto	l3892
  8112  001A0E                     l3886:
  8113                           
  8114                           ; BSR set to: 0
  8115                           ;doprnt.c: 1485: {
  8116                           ;doprnt.c: 1496: c = (_val._val / dpowers[prec]) % 10 + '0';
  8117  001A0E  0100               	movlb	0	; () banked
  8118  001A10  0100               	movlb	0	; () banked
  8119  001A12  51D0               	movf	sprintf@prec& (0+255),w,b
  8120  001A14  0D02               	mullw	2
  8121  001A16  0E00               	movlw	low _dpowers
  8122  001A18  24F3               	addwf	prodl,w,c
  8123  001A1A  6EF6               	movwf	tblptrl,c
  8124  001A1C  0E0D               	movlw	high _dpowers
  8125  001A1E  20F4               	addwfc	prodh,w,c
  8126  001A20  6EF7               	movwf	tblptrh,c
  8127  001A22  0009               	tblrd		*+
  8128  001A24  CFF5 F022          	movff	tablat,?___lwdiv+2
  8129  001A28  000A               	tblrd		*-
  8130  001A2A  CFF5 F023          	movff	tablat,?___lwdiv+3
  8131  001A2E  C0D1  F020         	movff	sprintf@_val,?___lwdiv
  8132  001A32  C0D2  F021         	movff	sprintf@_val+1,?___lwdiv+1
  8133  001A36  EC88  F015         	call	___lwdiv	;wreg free
  8134  001A3A  C020  F028         	movff	?___lwdiv,?___lwmod
  8135  001A3E  C021  F029         	movff	?___lwdiv+1,?___lwmod+1
  8136  001A42  0E00               	movlw	0
  8137  001A44  6E2B               	movwf	?___lwmod+3,c
  8138  001A46  0E0A               	movlw	10
  8139  001A48  6E2A               	movwf	?___lwmod+2,c
  8140  001A4A  EC28  F016         	call	___lwmod	;wreg free
  8141  001A4E  5028               	movf	?___lwmod,w,c
  8142  001A50  0F30               	addlw	48
  8143  001A52  0100               	movlb	0	; () banked
  8144  001A54  0100               	movlb	0	; () banked
  8145  001A56  6FD6               	movwf	sprintf@c& (0+255),b
  8146                           
  8147                           ; BSR set to: 0
  8148                           ;doprnt.c: 1530: }
  8149                           ;doprnt.c: 1531: ((*sp++ = (c)));
  8150  001A58  C0C7  FFD9         	movff	sprintf@sp,fsr2l
  8151  001A5C  C0C8  FFDA         	movff	sprintf@sp+1,fsr2h
  8152  001A60  0100               	movlb	0	; () banked
  8153  001A62  C0D6  FFDF         	movff	sprintf@c,indf2
  8154                           
  8155                           ; BSR set to: 0
  8156  001A66  0100               	movlb	0	; () banked
  8157  001A68  0100               	movlb	0	; () banked
  8158  001A6A  4BC7               	infsnz	sprintf@sp& (0+255),f,b
  8159  001A6C  2BC8               	incf	(sprintf@sp+1)& (0+255),f,b
  8160  001A6E                     l3892:
  8161                           
  8162                           ; BSR set to: 0
  8163  001A6E  0100               	movlb	0	; () banked
  8164  001A70  0100               	movlb	0	; () banked
  8165  001A72  07D0               	decf	sprintf@prec& (0+255),f,b
  8166  001A74  0100               	movlb	0	; () banked
  8167  001A76  29D0               	incf	sprintf@prec& (0+255),w,b
  8168  001A78  A4D8               	btfss	status,2,c
  8169  001A7A  D7C9               	goto	l3886
  8170  001A7C                     l3894:
  8171                           
  8172                           ; BSR set to: 0
  8173  001A7C  0100               	movlb	0	; () banked
  8174  001A7E  C0C9  FFF6         	movff	sprintf@f,tblptrl
  8175  001A82  0100               	movlb	0	; () banked
  8176  001A84  C0CA  FFF7         	movff	sprintf@f+1,tblptrh
  8177  001A88  0100               	movlb	0	; () banked
  8178  001A8A  0100               	movlb	0	; () banked
  8179  001A8C  4BC9               	infsnz	sprintf@f& (0+255),f,b
  8180  001A8E  2BCA               	incf	(sprintf@f+1)& (0+255),f,b
  8181  001A90  0008               	tblrd		*
  8182  001A92  0100               	movlb	0	; () banked
  8183  001A94  CFF5 F0D6          	movff	tablat,sprintf@c
  8184  001A98  0100               	movlb	0	; () banked
  8185  001A9A  67D6               	tstfsz	sprintf@c& (0+255),b
  8186  001A9C  D72B               	goto	l3842
  8187  001A9E                     l3896:
  8188                           
  8189                           ; BSR set to: 0
  8190                           ;doprnt.c: 1545: *sp = 0;
  8191  001A9E  C0C7  FFD9         	movff	sprintf@sp,fsr2l
  8192  001AA2  C0C8  FFDA         	movff	sprintf@sp+1,fsr2h
  8193  001AA6  0E00               	movlw	0
  8194  001AA8  6EDF               	movwf	indf2,c
  8195                           
  8196                           ; BSR set to: 0
  8197                           
  8198                           ; BSR set to: 0
  8199                           ;doprnt.c: 1547: return 0;
  8200                           ;	Return value of _sprintf is never used
  8201  001AAA  0012               	return	
  8202  001AAC                     __end_of_sprintf:
  8203                           	opt stack 0
  8204                           tblptru	equ	0xFF8
  8205                           tblptrh	equ	0xFF7
  8206                           tblptrl	equ	0xFF6
  8207                           tablat	equ	0xFF5
  8208                           prodh	equ	0xFF4
  8209                           prodl	equ	0xFF3
  8210                           intcon	equ	0xFF2
  8211                           postinc0	equ	0xFEE
  8212                           wreg	equ	0xFE8
  8213                           indf1	equ	0xFE7
  8214                           postdec1	equ	0xFE5
  8215                           fsr1h	equ	0xFE2
  8216                           fsr1l	equ	0xFE1
  8217                           indf2	equ	0xFDF
  8218                           postinc2	equ	0xFDE
  8219                           postdec2	equ	0xFDD
  8220                           plusw2	equ	0xFDB
  8221                           fsr2h	equ	0xFDA
  8222                           fsr2l	equ	0xFD9
  8223                           status	equ	0xFD8
  8224                           
  8225 ;; *************** function ___lwmod *****************
  8226 ;; Defined at:
  8227 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v1.20\sources\common\lwmod.c"
  8228 ;; Parameters:    Size  Location     Type
  8229 ;;  dividend        2   39[COMRAM] unsigned int 
  8230 ;;  divisor         2   41[COMRAM] unsigned int 
  8231 ;; Auto vars:     Size  Location     Type
  8232 ;;  counter         1   44[COMRAM] unsigned char 
  8233 ;; Return value:  Size  Location     Type
  8234 ;;                  2   39[COMRAM] unsigned int 
  8235 ;; Registers used:
  8236 ;;		wreg, status,2, status,0
  8237 ;; Tracked objects:
  8238 ;;		On entry : 0/0
  8239 ;;		On exit  : 0/0
  8240 ;;		Unchanged: 0/0
  8241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8242 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8243 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8244 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8245 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8246 ;;Total ram usage:        6 bytes
  8247 ;; Hardware stack levels used:    1
  8248 ;; Hardware stack levels required when called:    2
  8249 ;; This function calls:
  8250 ;;		Nothing
  8251 ;; This function is called by:
  8252 ;;		_sprintf
  8253 ;; This function uses a non-reentrant model
  8254 ;;
  8255                           
  8256                           	psect	text39
  8257  002C50                     __ptext39:
  8258                           	opt stack 0
  8259  002C50                     ___lwmod:
  8260                           	opt stack 24
  8261                           
  8262                           ; BSR set to: 0
  8263                           ;incstack = 0
  8264                           ;incstack = 0
  8265  002C50  502B               	movf	___lwmod@divisor+1,w,c
  8266  002C52  102A               	iorwf	___lwmod@divisor,w,c
  8267  002C54  B4D8               	btfsc	status,2,c
  8268  002C56  D01A               	goto	l1266
  8269  002C58  6E2C               	movwf	??___lwmod& (0+255),c
  8270  002C5A  0E01               	movlw	1
  8271  002C5C  6E2D               	movwf	___lwmod@counter,c
  8272  002C5E  502C               	movf	??___lwmod& (0+255),w,c
  8273  002C60  D004               	goto	l4360
  8274  002C62                     l4358:
  8275  002C62  90D8               	bcf	status,0,c
  8276  002C64  362A               	rlcf	___lwmod@divisor,f,c
  8277  002C66  362B               	rlcf	___lwmod@divisor+1,f,c
  8278  002C68  2A2D               	incf	___lwmod@counter,f,c
  8279  002C6A                     l4360:
  8280  002C6A  AE2B               	btfss	___lwmod@divisor+1,7,c
  8281  002C6C  D7FA               	goto	l4358
  8282  002C6E                     l4362:
  8283  002C6E  502A               	movf	___lwmod@divisor,w,c
  8284  002C70  5C28               	subwf	___lwmod@dividend,w,c
  8285  002C72  502B               	movf	___lwmod@divisor+1,w,c
  8286  002C74  5829               	subwfb	___lwmod@dividend+1,w,c
  8287  002C76  A0D8               	btfss	status,0,c
  8288  002C78  D004               	goto	l4366
  8289  002C7A  502A               	movf	___lwmod@divisor,w,c
  8290  002C7C  5E28               	subwf	___lwmod@dividend,f,c
  8291  002C7E  502B               	movf	___lwmod@divisor+1,w,c
  8292  002C80  5A29               	subwfb	___lwmod@dividend+1,f,c
  8293  002C82                     l4366:
  8294  002C82  90D8               	bcf	status,0,c
  8295  002C84  322B               	rrcf	___lwmod@divisor+1,f,c
  8296  002C86  322A               	rrcf	___lwmod@divisor,f,c
  8297  002C88  2E2D               	decfsz	___lwmod@counter,f,c
  8298  002C8A  D7F1               	goto	l4362
  8299  002C8C                     l1266:
  8300  002C8C  C028  F028         	movff	___lwmod@dividend,?___lwmod
  8301  002C90  C029  F029         	movff	___lwmod@dividend+1,?___lwmod+1
  8302  002C94  0012               	return	
  8303  002C96                     __end_of___lwmod:
  8304                           	opt stack 0
  8305                           tblptru	equ	0xFF8
  8306                           tblptrh	equ	0xFF7
  8307                           tblptrl	equ	0xFF6
  8308                           tablat	equ	0xFF5
  8309                           prodh	equ	0xFF4
  8310                           prodl	equ	0xFF3
  8311                           intcon	equ	0xFF2
  8312                           postinc0	equ	0xFEE
  8313                           wreg	equ	0xFE8
  8314                           indf1	equ	0xFE7
  8315                           postdec1	equ	0xFE5
  8316                           fsr1h	equ	0xFE2
  8317                           fsr1l	equ	0xFE1
  8318                           indf2	equ	0xFDF
  8319                           postinc2	equ	0xFDE
  8320                           postdec2	equ	0xFDD
  8321                           plusw2	equ	0xFDB
  8322                           fsr2h	equ	0xFDA
  8323                           fsr2l	equ	0xFD9
  8324                           status	equ	0xFD8
  8325                           
  8326 ;; *************** function ___lwdiv *****************
  8327 ;; Defined at:
  8328 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v1.20\sources\common\lwdiv.c"
  8329 ;; Parameters:    Size  Location     Type
  8330 ;;  dividend        2   31[COMRAM] unsigned int 
  8331 ;;  divisor         2   33[COMRAM] unsigned int 
  8332 ;; Auto vars:     Size  Location     Type
  8333 ;;  quotient        2   37[COMRAM] unsigned int 
  8334 ;;  counter         1   36[COMRAM] unsigned char 
  8335 ;; Return value:  Size  Location     Type
  8336 ;;                  2   31[COMRAM] unsigned int 
  8337 ;; Registers used:
  8338 ;;		wreg, status,2, status,0
  8339 ;; Tracked objects:
  8340 ;;		On entry : 0/0
  8341 ;;		On exit  : 0/0
  8342 ;;		Unchanged: 0/0
  8343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8344 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8345 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8346 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8347 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8348 ;;Total ram usage:        8 bytes
  8349 ;; Hardware stack levels used:    1
  8350 ;; Hardware stack levels required when called:    2
  8351 ;; This function calls:
  8352 ;;		Nothing
  8353 ;; This function is called by:
  8354 ;;		_sprintf
  8355 ;; This function uses a non-reentrant model
  8356 ;;
  8357                           
  8358                           	psect	text40
  8359  002B10                     __ptext40:
  8360                           	opt stack 0
  8361  002B10                     ___lwdiv:
  8362                           	opt stack 24
  8363                           
  8364                           ;incstack = 0
  8365                           ;incstack = 0
  8366  002B10  0E00               	movlw	0
  8367  002B12  6E27               	movwf	___lwdiv@quotient+1,c
  8368  002B14  0E00               	movlw	0
  8369  002B16  6E26               	movwf	___lwdiv@quotient,c
  8370  002B18  5023               	movf	___lwdiv@divisor+1,w,c
  8371  002B1A  1022               	iorwf	___lwdiv@divisor,w,c
  8372  002B1C  B4D8               	btfsc	status,2,c
  8373  002B1E  D01E               	goto	l1256
  8374  002B20  6E24               	movwf	??___lwdiv& (0+255),c
  8375  002B22  0E01               	movlw	1
  8376  002B24  6E25               	movwf	___lwdiv@counter,c
  8377  002B26  5024               	movf	??___lwdiv& (0+255),w,c
  8378  002B28  D004               	goto	l4340
  8379  002B2A                     l4338:
  8380  002B2A  90D8               	bcf	status,0,c
  8381  002B2C  3622               	rlcf	___lwdiv@divisor,f,c
  8382  002B2E  3623               	rlcf	___lwdiv@divisor+1,f,c
  8383  002B30  2A25               	incf	___lwdiv@counter,f,c
  8384  002B32                     l4340:
  8385  002B32  AE23               	btfss	___lwdiv@divisor+1,7,c
  8386  002B34  D7FA               	goto	l4338
  8387  002B36                     l4342:
  8388  002B36  90D8               	bcf	status,0,c
  8389  002B38  3626               	rlcf	___lwdiv@quotient,f,c
  8390  002B3A  3627               	rlcf	___lwdiv@quotient+1,f,c
  8391  002B3C  5022               	movf	___lwdiv@divisor,w,c
  8392  002B3E  5C20               	subwf	___lwdiv@dividend,w,c
  8393  002B40  5023               	movf	___lwdiv@divisor+1,w,c
  8394  002B42  5821               	subwfb	___lwdiv@dividend+1,w,c
  8395  002B44  A0D8               	btfss	status,0,c
  8396  002B46  D005               	goto	l4350
  8397  002B48  5022               	movf	___lwdiv@divisor,w,c
  8398  002B4A  5E20               	subwf	___lwdiv@dividend,f,c
  8399  002B4C  5023               	movf	___lwdiv@divisor+1,w,c
  8400  002B4E  5A21               	subwfb	___lwdiv@dividend+1,f,c
  8401  002B50  8026               	bsf	___lwdiv@quotient,0,c
  8402  002B52                     l4350:
  8403  002B52  90D8               	bcf	status,0,c
  8404  002B54  3223               	rrcf	___lwdiv@divisor+1,f,c
  8405  002B56  3222               	rrcf	___lwdiv@divisor,f,c
  8406  002B58  2E25               	decfsz	___lwdiv@counter,f,c
  8407  002B5A  D7ED               	goto	l4342
  8408  002B5C                     l1256:
  8409  002B5C  C026  F020         	movff	___lwdiv@quotient,?___lwdiv
  8410  002B60  C027  F021         	movff	___lwdiv@quotient+1,?___lwdiv+1
  8411  002B64  0012               	return	
  8412  002B66                     __end_of___lwdiv:
  8413                           	opt stack 0
  8414                           tblptru	equ	0xFF8
  8415                           tblptrh	equ	0xFF7
  8416                           tblptrl	equ	0xFF6
  8417                           tablat	equ	0xFF5
  8418                           prodh	equ	0xFF4
  8419                           prodl	equ	0xFF3
  8420                           intcon	equ	0xFF2
  8421                           postinc0	equ	0xFEE
  8422                           wreg	equ	0xFE8
  8423                           indf1	equ	0xFE7
  8424                           postdec1	equ	0xFE5
  8425                           fsr1h	equ	0xFE2
  8426                           fsr1l	equ	0xFE1
  8427                           indf2	equ	0xFDF
  8428                           postinc2	equ	0xFDE
  8429                           postdec2	equ	0xFDD
  8430                           plusw2	equ	0xFDB
  8431                           fsr2h	equ	0xFDA
  8432                           fsr2l	equ	0xFD9
  8433                           status	equ	0xFD8
  8434                           
  8435 ;; *************** function _putsUSART *****************
  8436 ;; Defined at:
  8437 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.20\sources\pic18\plib\USART\uputs.c"
  8438 ;; Parameters:    Size  Location     Type
  8439 ;;  data            2   32[COMRAM] PTR unsigned char 
  8440 ;;		 -> STR_49(3), STR_48(14), STR_47(8), ECANReceiveMessage@str_1913(5), 
  8441 ;;		 -> STR_45(7), STR_44(3), STR_43(14), STR_42(8), 
  8442 ;;		 -> STR_41(7), STR_40(3), STR_39(14), STR_38(8), 
  8443 ;;		 -> ECANReceiveMessage@str(5), STR_36(7), STR_35(3), STR_34(14), 
  8444 ;;		 -> STR_33(8), STR_32(7), STR_31(3), STR_30(14), 
  8445 ;;		 -> STR_29(8), STR_28(7), STR_27(3), STR_26(14), 
  8446 ;;		 -> STR_25(8), STR_24(7), c_CustomerBeingServed(26), c_CustomerWating(20), 
  8447 ;;		 -> InitText(39), STR_23(3), STR_22(23), STR_21(8), 
  8448 ;;		 -> STR_19(7), STR_18(3), STR_17(23), STR_16(8), 
  8449 ;;		 -> CanCommsTask@str_333(5), STR_14(7), STR_13(3), STR_12(23), 
  8450 ;;		 -> STR_11(8), CanCommsTask@str(5), STR_9(7), STR_8(3), 
  8451 ;;		 -> STR_7(23), STR_6(8), STR_5(7), STR_4(3), 
  8452 ;;		 -> STR_3(23), STR_2(8), RAM(3327), STR_1(7), 
  8453 ;; Auto vars:     Size  Location     Type
  8454 ;;		None
  8455 ;; Return value:  Size  Location     Type
  8456 ;;		None               void
  8457 ;; Registers used:
  8458 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8459 ;; Tracked objects:
  8460 ;;		On entry : 0/0
  8461 ;;		On exit  : 0/0
  8462 ;;		Unchanged: 0/0
  8463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8464 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8465 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8466 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8467 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8468 ;;Total ram usage:        4 bytes
  8469 ;; Hardware stack levels used:    1
  8470 ;; Hardware stack levels required when called:    3
  8471 ;; This function calls:
  8472 ;;		_WriteUSART
  8473 ;; This function is called by:
  8474 ;;		_CanCommsTask
  8475 ;;		_UartCommsTask
  8476 ;;		_CustomerWating
  8477 ;;		_CustomerBeingServed
  8478 ;;		_ECANReceiveMessage
  8479 ;; This function uses a non-reentrant model
  8480 ;;
  8481                           
  8482                           	psect	text41
  8483  002B66                     __ptext41:
  8484                           	opt stack 0
  8485  002B66                     _putsUSART:
  8486                           	opt stack 22
  8487  002B66                     l722:
  8488  002B66  A2AC               	btfss	4012,1,c	;volatile
  8489  002B68  D7FE               	goto	l722
  8490  002B6A  5021               	movf	putsUSART@data,w,c
  8491  002B6C  6EF6               	movwf	tblptrl,c
  8492  002B6E  6EE9               	movwf	fsr0l,c
  8493  002B70  0E0C               	movlw	(high __ramtop+-1)
  8494  002B72  6EEA               	movwf	fsr0h,c
  8495  002B74  5022               	movf	putsUSART@data+1,w,c
  8496  002B76  64EA               	cpfsgt	fsr0h,c
  8497  002B78  D003               	bra	u2437
  8498  002B7A  6EEA               	movwf	fsr0h,c
  8499  002B7C  50EF               	movf	indf0,w,c
  8500  002B7E  D003               	bra	u2430
  8501  002B80                     u2437:
  8502  002B80  6EF7               	movwf	tblptrh,c
  8503  002B82  0008               	tblrd		*
  8504  002B84  50F5               	movf	tablat,w,c
  8505  002B86                     u2430:
  8506  002B86  6E20               	movwf	?_WriteUSART,c
  8507  002B88  EC99  F017         	call	_WriteUSART	;wreg free
  8508  002B8C  5021               	movf	putsUSART@data,w,c
  8509  002B8E  6E23               	movwf	??_putsUSART& (0+255),c
  8510  002B90  5022               	movf	putsUSART@data+1,w,c
  8511  002B92  6E24               	movwf	(??_putsUSART+1)& (0+255),c
  8512  002B94  4A21               	infsnz	putsUSART@data,f,c
  8513  002B96  2A22               	incf	putsUSART@data+1,f,c
  8514  002B98  5023               	movf	??_putsUSART,w,c
  8515  002B9A  6EF6               	movwf	tblptrl,c
  8516  002B9C  6EE9               	movwf	fsr0l,c
  8517  002B9E  0E0C               	movlw	(high __ramtop+-1)
  8518  002BA0  6EEA               	movwf	fsr0h,c
  8519  002BA2  5024               	movf	??_putsUSART+1,w,c
  8520  002BA4  64EA               	cpfsgt	fsr0h,c
  8521  002BA6  D003               	bra	u2447
  8522  002BA8  6EEA               	movwf	fsr0h,c
  8523  002BAA  50EF               	movf	indf0,w,c
  8524  002BAC  D003               	bra	u2440
  8525  002BAE                     u2447:
  8526  002BAE  6EF7               	movwf	tblptrh,c
  8527  002BB0  0008               	tblrd		*
  8528  002BB2  50F5               	movf	tablat,w,c
  8529  002BB4                     u2440:
  8530  002BB4  0900               	iorlw	0
  8531  002BB6  B4D8               	btfsc	status,2,c
  8532  002BB8  0012               	return	
  8533  002BBA  D7D5               	goto	l722
  8534  002BBC                     __end_of_putsUSART:
  8535                           	opt stack 0
  8536                           tblptru	equ	0xFF8
  8537                           tblptrh	equ	0xFF7
  8538                           tblptrl	equ	0xFF6
  8539                           tablat	equ	0xFF5
  8540                           prodh	equ	0xFF4
  8541                           prodl	equ	0xFF3
  8542                           intcon	equ	0xFF2
  8543                           indf0	equ	0xFEF
  8544                           postinc0	equ	0xFEE
  8545                           fsr0h	equ	0xFEA
  8546                           fsr0l	equ	0xFE9
  8547                           wreg	equ	0xFE8
  8548                           indf1	equ	0xFE7
  8549                           postdec1	equ	0xFE5
  8550                           fsr1h	equ	0xFE2
  8551                           fsr1l	equ	0xFE1
  8552                           indf2	equ	0xFDF
  8553                           postinc2	equ	0xFDE
  8554                           postdec2	equ	0xFDD
  8555                           plusw2	equ	0xFDB
  8556                           fsr2h	equ	0xFDA
  8557                           fsr2l	equ	0xFD9
  8558                           status	equ	0xFD8
  8559                           
  8560 ;; *************** function _WriteUSART *****************
  8561 ;; Defined at:
  8562 ;;		line 14 in file "C:\Program Files\Microchip\xc8\v1.20\sources\pic18\plib\USART\uwrite.c"
  8563 ;; Parameters:    Size  Location     Type
  8564 ;;  data            1   31[COMRAM] unsigned char 
  8565 ;; Auto vars:     Size  Location     Type
  8566 ;;		None
  8567 ;; Return value:  Size  Location     Type
  8568 ;;		None               void
  8569 ;; Registers used:
  8570 ;;		None
  8571 ;; Tracked objects:
  8572 ;;		On entry : 0/0
  8573 ;;		On exit  : 0/0
  8574 ;;		Unchanged: 0/0
  8575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8576 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8577 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8578 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8579 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8580 ;;Total ram usage:        1 bytes
  8581 ;; Hardware stack levels used:    1
  8582 ;; Hardware stack levels required when called:    2
  8583 ;; This function calls:
  8584 ;;		Nothing
  8585 ;; This function is called by:
  8586 ;;		_putsUSART
  8587 ;; This function uses a non-reentrant model
  8588 ;;
  8589                           
  8590                           	psect	text42
  8591  002F32                     __ptext42:
  8592                           	opt stack 0
  8593  002F32                     _WriteUSART:
  8594                           	opt stack 22
  8595                           
  8596                           ;incstack = 0
  8597                           ;incstack = 0
  8598  002F32  ACAC               	btfss	4012,6,c	;volatile
  8599  002F34  D003               	goto	l748
  8600  002F36  90AC               	bcf	4012,0,c	;volatile
  8601  002F38  B23C               	btfsc	_USART_Status,1,c
  8602  002F3A  80AC               	bsf	4012,0,c	;volatile
  8603  002F3C                     l748:
  8604  002F3C  C020  FFAD         	movff	WriteUSART@data,4013	;volatile
  8605  002F40  0012               	return	
  8606  002F42                     __end_of_WriteUSART:
  8607                           	opt stack 0
  8608                           tblptru	equ	0xFF8
  8609                           tblptrh	equ	0xFF7
  8610                           tblptrl	equ	0xFF6
  8611                           tablat	equ	0xFF5
  8612                           prodh	equ	0xFF4
  8613                           prodl	equ	0xFF3
  8614                           intcon	equ	0xFF2
  8615                           indf0	equ	0xFEF
  8616                           postinc0	equ	0xFEE
  8617                           fsr0h	equ	0xFEA
  8618                           fsr0l	equ	0xFE9
  8619                           wreg	equ	0xFE8
  8620                           indf1	equ	0xFE7
  8621                           postdec1	equ	0xFE5
  8622                           fsr1h	equ	0xFE2
  8623                           fsr1l	equ	0xFE1
  8624                           indf2	equ	0xFDF
  8625                           postinc2	equ	0xFDE
  8626                           postdec2	equ	0xFDD
  8627                           plusw2	equ	0xFDB
  8628                           fsr2h	equ	0xFDA
  8629                           fsr2l	equ	0xFD9
  8630                           status	equ	0xFD8
  8631                           
  8632 ;; *************** function _ECANInitialize *****************
  8633 ;; Defined at:
  8634 ;;		line 168 in file "source/ECAN.c"
  8635 ;; Parameters:    Size  Location     Type
  8636 ;;		None
  8637 ;; Auto vars:     Size  Location     Type
  8638 ;;		None
  8639 ;; Return value:  Size  Location     Type
  8640 ;;		None               void
  8641 ;; Registers used:
  8642 ;;		wreg, status,2, status,0, cstack
  8643 ;; Tracked objects:
  8644 ;;		On entry : 0/0
  8645 ;;		On exit  : 0/0
  8646 ;;		Unchanged: 0/0
  8647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8648 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8649 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8650 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8651 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8652 ;;Total ram usage:        1 bytes
  8653 ;; Hardware stack levels used:    1
  8654 ;; Hardware stack levels required when called:    3
  8655 ;; This function calls:
  8656 ;;		_ECANSetOperationMode
  8657 ;; This function is called by:
  8658 ;;		_CanCommsTask
  8659 ;; This function uses a non-reentrant model
  8660 ;;
  8661                           
  8662                           	psect	text43
  8663  002396                     __ptext43:
  8664                           	opt stack 0
  8665  002396                     _ECANInitialize:
  8666                           	opt stack 24
  8667                           
  8668                           ;ECAN.c: 171: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
  8669                           
  8670                           ;incstack = 0
  8671                           ;incstack = 0
  8672  002396  6E21               	movwf	??_ECANInitialize& (0+255),c
  8673  002398  0E80               	movlw	128
  8674  00239A  6E20               	movwf	?_ECANSetOperationMode,c
  8675  00239C  5021               	movf	??_ECANInitialize& (0+255),w,c
  8676  00239E  EC74  F017         	call	_ECANSetOperationMode	;wreg free
  8677                           
  8678                           ;ECAN.c: 175: BRGCON1 = ((2-1) << 6) | (4-1);
  8679  0023A2  0E43               	movlw	67
  8680  0023A4  6E70               	movwf	3952,c	;volatile
  8681                           
  8682                           ;ECAN.c: 176: BRGCON2 = (1 << 7) | (1 << 6) | ((8-1) << 3) | (8-1);
  8683  0023A6  6871               	setf	3953,c	;volatile
  8684                           
  8685                           ;ECAN.c: 180: BRGCON3 = (0 << 7) |
  8686                           ;ECAN.c: 181: (0 << 6) |
  8687                           ;ECAN.c: 182: (8-1);
  8688  0023A8  0E07               	movlw	7
  8689  0023AA  6E72               	movwf	3954,c	;volatile
  8690                           
  8691                           ;ECAN.c: 185: CIOCON = 0 << 7 | 0 << 6 | 1 << 5 | 0;
  8692  0023AC  0E20               	movlw	32
  8693  0023AE  6E73               	movwf	3955,c	;volatile
  8694                           
  8695                           ;ECAN.c: 192: ECANCONbits.MDSEL1 = 0x00 >> 7;
  8696  0023B0  9E77               	bcf	3959,7,c	;volatile
  8697                           
  8698                           ;ECAN.c: 193: ECANCONbits.MDSEL0 = 0x00 >> 6;
  8699  0023B2  9C77               	bcf	3959,6,c	;volatile
  8700                           
  8701                           ;ECAN.c: 198: RXB0CON = (0 << 5) | (0 << 2);
  8702  0023B4  0E00               	movlw	0
  8703  0023B6  6E60               	movwf	3936,c	;volatile
  8704                           
  8705                           ;ECAN.c: 199: RXB1CON = 0 << 5;
  8706  0023B8  0E00               	movlw	0
  8707  0023BA  010F               	movlb	15	; () banked
  8708  0023BC  010F               	movlb	15	; () banked
  8709  0023BE  6F50               	movwf	80,b	;volatile
  8710                           
  8711                           ; BSR set to: 15
  8712                           ;ECAN.c: 293: RXF0SIDH = (long)0x0L >> 3L;RXF0SIDL = (long)0x0L >> 5L;
  8713  0023C0  0E00               	movlw	0
  8714  0023C2  010F               	movlb	15	; () banked
  8715  0023C4  010F               	movlb	15	; () banked
  8716  0023C6  6F00               	movwf	0,b	;volatile
  8717                           
  8718                           ; BSR set to: 15
  8719  0023C8  0E00               	movlw	0
  8720  0023CA  010F               	movlb	15	; () banked
  8721  0023CC  010F               	movlb	15	; () banked
  8722  0023CE  6F01               	movwf	1,b	;volatile
  8723                           
  8724                           ; BSR set to: 15
  8725                           ;ECAN.c: 301: RXF1SIDH = (long)0x0L >> 3L;RXF1SIDL = (long)0x0L >> 5L;
  8726  0023D0  0E00               	movlw	0
  8727  0023D2  010F               	movlb	15	; () banked
  8728  0023D4  010F               	movlb	15	; () banked
  8729  0023D6  6F04               	movwf	4,b	;volatile
  8730                           
  8731                           ; BSR set to: 15
  8732  0023D8  0E00               	movlw	0
  8733  0023DA  010F               	movlb	15	; () banked
  8734  0023DC  010F               	movlb	15	; () banked
  8735  0023DE  6F05               	movwf	5,b	;volatile
  8736                           
  8737                           ; BSR set to: 15
  8738                           ;ECAN.c: 310: RXF2SIDH = (long)0x0L >> 3L;RXF2SIDL = (long)0x0L >> 5L;
  8739  0023E0  0E00               	movlw	0
  8740  0023E2  010F               	movlb	15	; () banked
  8741  0023E4  010F               	movlb	15	; () banked
  8742  0023E6  6F08               	movwf	8,b	;volatile
  8743                           
  8744                           ; BSR set to: 15
  8745  0023E8  0E00               	movlw	0
  8746  0023EA  010F               	movlb	15	; () banked
  8747  0023EC  010F               	movlb	15	; () banked
  8748  0023EE  6F09               	movwf	9,b	;volatile
  8749                           
  8750                           ; BSR set to: 15
  8751                           ;ECAN.c: 319: RXF3SIDH = (long)0x0L >> 3L;RXF3SIDL = (long)0x0L >> 5L;
  8752  0023F0  0E00               	movlw	0
  8753  0023F2  010F               	movlb	15	; () banked
  8754  0023F4  010F               	movlb	15	; () banked
  8755  0023F6  6F0C               	movwf	12,b	;volatile
  8756                           
  8757                           ; BSR set to: 15
  8758  0023F8  0E00               	movlw	0
  8759  0023FA  010F               	movlb	15	; () banked
  8760  0023FC  010F               	movlb	15	; () banked
  8761  0023FE  6F0D               	movwf	13,b	;volatile
  8762                           
  8763                           ; BSR set to: 15
  8764                           ;ECAN.c: 328: RXF4SIDH = (long)0x0L >> 3L;RXF4SIDL = (long)0x0L >> 5L;
  8765  002400  0E00               	movlw	0
  8766  002402  010F               	movlb	15	; () banked
  8767  002404  010F               	movlb	15	; () banked
  8768  002406  6F10               	movwf	16,b	;volatile
  8769                           
  8770                           ; BSR set to: 15
  8771  002408  0E00               	movlw	0
  8772  00240A  010F               	movlb	15	; () banked
  8773  00240C  010F               	movlb	15	; () banked
  8774  00240E  6F11               	movwf	17,b	;volatile
  8775                           
  8776                           ; BSR set to: 15
  8777                           ;ECAN.c: 336: RXF5SIDH = (long)0x0L >> 3L;RXF5SIDL = (long)0x0L >> 5L;
  8778  002410  0E00               	movlw	0
  8779  002412  010F               	movlb	15	; () banked
  8780  002414  010F               	movlb	15	; () banked
  8781  002416  6F14               	movwf	20,b	;volatile
  8782                           
  8783                           ; BSR set to: 15
  8784  002418  0E00               	movlw	0
  8785  00241A  010F               	movlb	15	; () banked
  8786  00241C  010F               	movlb	15	; () banked
  8787  00241E  6F15               	movwf	21,b	;volatile
  8788                           
  8789                           ; BSR set to: 15
  8790                           ;ECAN.c: 478: RXM0SIDH = (long)0x0L >> 3L; RXM0SIDL = (long)0x0L >> 5L;
  8791  002420  0E00               	movlw	0
  8792  002422  010F               	movlb	15	; () banked
  8793  002424  010F               	movlb	15	; () banked
  8794  002426  6F18               	movwf	24,b	;volatile
  8795                           
  8796                           ; BSR set to: 15
  8797  002428  0E00               	movlw	0
  8798  00242A  010F               	movlb	15	; () banked
  8799  00242C  010F               	movlb	15	; () banked
  8800  00242E  6F19               	movwf	25,b	;volatile
  8801                           
  8802                           ; BSR set to: 15
  8803                           ;ECAN.c: 479: RXM0SIDLbits.EXIDEN = 0;
  8804  002430  010F               	movlb	15	; () banked
  8805  002432  010F               	movlb	15	; () banked
  8806  002434  9719               	bcf	25,3,b	;volatile
  8807                           
  8808                           ; BSR set to: 15
  8809                           ;ECAN.c: 486: RXM1SIDH = (long)0x0L >> 3L; RXM1SIDL = (long)0x0L >> 5L;
  8810  002436  0E00               	movlw	0
  8811  002438  010F               	movlb	15	; () banked
  8812  00243A  010F               	movlb	15	; () banked
  8813  00243C  6F1C               	movwf	28,b	;volatile
  8814                           
  8815                           ; BSR set to: 15
  8816  00243E  0E00               	movlw	0
  8817  002440  010F               	movlb	15	; () banked
  8818  002442  010F               	movlb	15	; () banked
  8819  002444  6F1D               	movwf	29,b	;volatile
  8820                           
  8821                           ; BSR set to: 15
  8822                           ;ECAN.c: 487: RXM1SIDLbits.EXIDEN = 0;
  8823  002446  010F               	movlb	15	; () banked
  8824  002448  010F               	movlb	15	; () banked
  8825  00244A  971D               	bcf	29,3,b	;volatile
  8826                           
  8827                           ; BSR set to: 15
  8828                           ;ECAN.c: 498: ECANSetOperationMode(0x00);
  8829  00244C  6E21               	movwf	??_ECANInitialize& (0+255),c
  8830  00244E  0E00               	movlw	0
  8831  002450  6E20               	movwf	?_ECANSetOperationMode,c
  8832  002452  5021               	movf	??_ECANInitialize& (0+255),w,c
  8833  002454  EC74  F017         	call	_ECANSetOperationMode	;wreg free
  8834  002458  0012               	return	
  8835  00245A                     __end_of_ECANInitialize:
  8836                           	opt stack 0
  8837                           tblptru	equ	0xFF8
  8838                           tblptrh	equ	0xFF7
  8839                           tblptrl	equ	0xFF6
  8840                           tablat	equ	0xFF5
  8841                           prodh	equ	0xFF4
  8842                           prodl	equ	0xFF3
  8843                           intcon	equ	0xFF2
  8844                           indf0	equ	0xFEF
  8845                           postinc0	equ	0xFEE
  8846                           fsr0h	equ	0xFEA
  8847                           fsr0l	equ	0xFE9
  8848                           wreg	equ	0xFE8
  8849                           indf1	equ	0xFE7
  8850                           postdec1	equ	0xFE5
  8851                           fsr1h	equ	0xFE2
  8852                           fsr1l	equ	0xFE1
  8853                           indf2	equ	0xFDF
  8854                           postinc2	equ	0xFDE
  8855                           postdec2	equ	0xFDD
  8856                           plusw2	equ	0xFDB
  8857                           fsr2h	equ	0xFDA
  8858                           fsr2l	equ	0xFD9
  8859                           status	equ	0xFD8
  8860                           
  8861 ;; *************** function _ECANSetOperationMode *****************
  8862 ;; Defined at:
  8863 ;;		line 1071 in file "source/ECAN.c"
  8864 ;; Parameters:    Size  Location     Type
  8865 ;;  mode            1   31[COMRAM] enum E16245
  8866 ;; Auto vars:     Size  Location     Type
  8867 ;;		None
  8868 ;; Return value:  Size  Location     Type
  8869 ;;		None               void
  8870 ;; Registers used:
  8871 ;;		wreg, status,2, status,0
  8872 ;; Tracked objects:
  8873 ;;		On entry : 0/0
  8874 ;;		On exit  : 0/0
  8875 ;;		Unchanged: 0/0
  8876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8877 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8878 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8879 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8880 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8881 ;;Total ram usage:        1 bytes
  8882 ;; Hardware stack levels used:    1
  8883 ;; Hardware stack levels required when called:    2
  8884 ;; This function calls:
  8885 ;;		Nothing
  8886 ;; This function is called by:
  8887 ;;		_ECANInitialize
  8888 ;; This function uses a non-reentrant model
  8889 ;;
  8890                           
  8891                           	psect	text44
  8892  002EE8                     __ptext44:
  8893                           	opt stack 0
  8894  002EE8                     _ECANSetOperationMode:
  8895                           	opt stack 24
  8896                           
  8897                           ;ECAN.c: 1072: CANCON &= 0x1F;
  8898                           
  8899                           ;incstack = 0
  8900                           ;incstack = 0
  8901  002EE8  0E1F               	movlw	31
  8902  002EEA  166F               	andwf	3951,f,c	;volatile
  8903                           
  8904                           ;ECAN.c: 1073: CANCON |= mode;
  8905  002EEC  5020               	movf	ECANSetOperationMode@mode,w,c
  8906  002EEE  126F               	iorwf	3951,f,c	;volatile
  8907  002EF0                     l3432:
  8908  002EF0  506F               	movf	3951,w,c	;volatile
  8909  002EF2  0BE0               	andlw	224
  8910  002EF4  1820               	xorwf	ECANSetOperationMode@mode,w,c
  8911  002EF6  B4D8               	btfsc	status,2,c
  8912  002EF8  0012               	return	
  8913  002EFA  D7FA               	goto	l3432
  8914  002EFC                     __end_of_ECANSetOperationMode:
  8915                           	opt stack 0
  8916                           tblptru	equ	0xFF8
  8917                           tblptrh	equ	0xFF7
  8918                           tblptrl	equ	0xFF6
  8919                           tablat	equ	0xFF5
  8920                           prodh	equ	0xFF4
  8921                           prodl	equ	0xFF3
  8922                           intcon	equ	0xFF2
  8923                           indf0	equ	0xFEF
  8924                           postinc0	equ	0xFEE
  8925                           fsr0h	equ	0xFEA
  8926                           fsr0l	equ	0xFE9
  8927                           wreg	equ	0xFE8
  8928                           indf1	equ	0xFE7
  8929                           postdec1	equ	0xFE5
  8930                           fsr1h	equ	0xFE2
  8931                           fsr1l	equ	0xFE1
  8932                           indf2	equ	0xFDF
  8933                           postinc2	equ	0xFDE
  8934                           postdec2	equ	0xFDD
  8935                           plusw2	equ	0xFDB
  8936                           fsr2h	equ	0xFDA
  8937                           fsr2l	equ	0xFD9
  8938                           status	equ	0xFD8
  8939                           
  8940 ;; *************** function _Increment_Timer *****************
  8941 ;; Defined at:
  8942 ;;		line 52 in file "source/TimerTask.c"
  8943 ;; Parameters:    Size  Location     Type
  8944 ;;		None
  8945 ;; Auto vars:     Size  Location     Type
  8946 ;;		None
  8947 ;; Return value:  Size  Location     Type
  8948 ;;		None               void
  8949 ;; Registers used:
  8950 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  8951 ;; Tracked objects:
  8952 ;;		On entry : 0/0
  8953 ;;		On exit  : 0/0
  8954 ;;		Unchanged: 0/0
  8955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8956 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8957 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8958 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8959 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8960 ;;Total ram usage:        0 bytes
  8961 ;; Hardware stack levels used:    1
  8962 ;; Hardware stack levels required when called:    3
  8963 ;; This function calls:
  8964 ;;		_WriteTimer0
  8965 ;; This function is called by:
  8966 ;;		_TaskManager
  8967 ;; This function uses a non-reentrant model
  8968 ;;
  8969                           
  8970                           	psect	text45
  8971  002906                     __ptext45:
  8972                           	opt stack 0
  8973  002906                     _Increment_Timer:
  8974                           	opt stack 26
  8975                           
  8976                           ;TimerTask.c: 53: if( T0IF == 1 )
  8977                           
  8978                           ;incstack = 0
  8979                           ;incstack = 0
  8980  002906  A4F2               	btfss	intcon,2,c	;volatile
  8981  002908  D03A               	goto	l186
  8982                           
  8983                           ;TimerTask.c: 54: {
  8984                           ;TimerTask.c: 55: m_CurrentTime.Millisecond++;
  8985  00290A  2A32               	incf	_m_CurrentTime,f,c	;volatile
  8986                           
  8987                           ;TimerTask.c: 57: if( m_CurrentTime.Millisecond >= c_NoMsecInSec )
  8988  00290C  0E11               	movlw	low _c_NoMsecInSec
  8989  00290E  6EF6               	movwf	tblptrl,c
  8990  002910  0E0D               	movlw	high _c_NoMsecInSec
  8991  002912  6EF7               	movwf	tblptrh,c
  8992  002914  0008               	tblrd		*
  8993  002916  50F5               	movf	tablat,w,c
  8994  002918  5C32               	subwf	_m_CurrentTime,w,c	;volatile
  8995  00291A  A0D8               	btfss	status,0,c
  8996  00291C  D029               	goto	l1502
  8997                           
  8998                           ;TimerTask.c: 58: {
  8999                           ;TimerTask.c: 59: m_CurrentTime.Second++;
  9000  00291E  2A33               	incf	_m_CurrentTime+1,f,c	;volatile
  9001                           
  9002                           ;TimerTask.c: 60: m_CurrentTime.Millisecond = 0;
  9003  002920  0E00               	movlw	0
  9004  002922  6E32               	movwf	_m_CurrentTime,c	;volatile
  9005                           
  9006                           ;TimerTask.c: 61: if( m_CurrentTime.Second >= c_NoSecInMinOrMinInHr )
  9007  002924  0E12               	movlw	low _c_NoSecInMinOrMinInHr
  9008  002926  6EF6               	movwf	tblptrl,c
  9009  002928  0E0D               	movlw	high _c_NoSecInMinOrMinInHr
  9010  00292A  6EF7               	movwf	tblptrh,c
  9011  00292C  0008               	tblrd		*
  9012  00292E  50F5               	movf	tablat,w,c
  9013  002930  5C33               	subwf	_m_CurrentTime+1,w,c	;volatile
  9014  002932  A0D8               	btfss	status,0,c
  9015  002934  D01D               	goto	l1502
  9016                           
  9017                           ;TimerTask.c: 62: {
  9018                           ;TimerTask.c: 63: m_CurrentTime.Minute++;
  9019  002936  2A34               	incf	_m_CurrentTime+2,f,c	;volatile
  9020                           
  9021                           ;TimerTask.c: 64: m_CurrentTime.Second = 0;
  9022  002938  0E00               	movlw	0
  9023  00293A  6E33               	movwf	_m_CurrentTime+1,c	;volatile
  9024                           
  9025                           ;TimerTask.c: 65: if( m_CurrentTime.Minute >= c_NoSecInMinOrMinInHr )
  9026  00293C  0E12               	movlw	low _c_NoSecInMinOrMinInHr
  9027  00293E  6EF6               	movwf	tblptrl,c
  9028  002940  0E0D               	movlw	high _c_NoSecInMinOrMinInHr
  9029  002942  6EF7               	movwf	tblptrh,c
  9030  002944  0008               	tblrd		*
  9031  002946  50F5               	movf	tablat,w,c
  9032  002948  5C34               	subwf	_m_CurrentTime+2,w,c	;volatile
  9033  00294A  A0D8               	btfss	status,0,c
  9034  00294C  D011               	goto	l1502
  9035                           
  9036                           ;TimerTask.c: 66: {
  9037                           ;TimerTask.c: 67: m_CurrentTime.Hour++;
  9038  00294E  2A35               	incf	_m_CurrentTime+3,f,c	;volatile
  9039                           
  9040                           ;TimerTask.c: 68: m_CurrentTime.Minute = 0;
  9041  002950  0E00               	movlw	0
  9042  002952  6E34               	movwf	_m_CurrentTime+2,c	;volatile
  9043                           
  9044                           ;TimerTask.c: 69: if( m_CurrentTime.Hour >= c_NoHrInDay )
  9045  002954  0E10               	movlw	low _c_NoHrInDay
  9046  002956  6EF6               	movwf	tblptrl,c
  9047  002958  0E0D               	movlw	high _c_NoHrInDay
  9048  00295A  6EF7               	movwf	tblptrh,c
  9049  00295C  0008               	tblrd		*
  9050  00295E  50F5               	movf	tablat,w,c
  9051  002960  5C35               	subwf	_m_CurrentTime+3,w,c	;volatile
  9052  002962  A0D8               	btfss	status,0,c
  9053  002964  D005               	goto	l1502
  9054                           
  9055                           ;TimerTask.c: 70: {
  9056                           ;TimerTask.c: 71: m_CurrentTime.Hour = 0;
  9057  002966  0E00               	movlw	0
  9058  002968  6E35               	movwf	_m_CurrentTime+3,c	;volatile
  9059                           
  9060                           ;TimerTask.c: 72: if( m_CurrentTime.Day < (255) )
  9061  00296A  2836               	incf	_m_CurrentTime+4,w,c	;volatile
  9062  00296C  A4D8               	btfss	status,2,c
  9063                           
  9064                           ;TimerTask.c: 73: {
  9065                           ;TimerTask.c: 74: m_CurrentTime.Day++;
  9066  00296E  2A36               	incf	_m_CurrentTime+4,f,c	;volatile
  9067  002970                     l1502:
  9068                           
  9069                           ;TimerTask.c: 75: }
  9070                           ;TimerTask.c: 76: }
  9071                           ;TimerTask.c: 77: }
  9072                           ;TimerTask.c: 78: }
  9073                           ;TimerTask.c: 79: }
  9074                           ;TimerTask.c: 80: WriteTimer0( 0 );
  9075  002970  0E00               	movlw	0
  9076  002972  6E21               	movwf	?_WriteTimer0+1,c
  9077  002974  0E00               	movlw	0
  9078  002976  6E20               	movwf	?_WriteTimer0,c
  9079  002978  EC90  F017         	call	_WriteTimer0	;wreg free
  9080                           
  9081                           ;TimerTask.c: 81: T0IF = 0;
  9082  00297C  94F2               	bcf	intcon,2,c	;volatile
  9083  00297E                     l186:
  9084  00297E  0012               	return	
  9085  002980                     __end_of_Increment_Timer:
  9086                           	opt stack 0
  9087                           tblptru	equ	0xFF8
  9088                           tblptrh	equ	0xFF7
  9089                           tblptrl	equ	0xFF6
  9090                           tablat	equ	0xFF5
  9091                           prodh	equ	0xFF4
  9092                           prodl	equ	0xFF3
  9093                           intcon	equ	0xFF2
  9094                           indf0	equ	0xFEF
  9095                           postinc0	equ	0xFEE
  9096                           fsr0h	equ	0xFEA
  9097                           fsr0l	equ	0xFE9
  9098                           wreg	equ	0xFE8
  9099                           indf1	equ	0xFE7
  9100                           postdec1	equ	0xFE5
  9101                           fsr1h	equ	0xFE2
  9102                           fsr1l	equ	0xFE1
  9103                           indf2	equ	0xFDF
  9104                           postinc2	equ	0xFDE
  9105                           postdec2	equ	0xFDD
  9106                           plusw2	equ	0xFDB
  9107                           fsr2h	equ	0xFDA
  9108                           fsr2l	equ	0xFD9
  9109                           status	equ	0xFD8
  9110                           
  9111 ;; *************** function _WriteTimer0 *****************
  9112 ;; Defined at:
  9113 ;;		line 17 in file "C:\Program Files\Microchip\xc8\v1.20\sources\pic18\plib\Timers\t0write.c"
  9114 ;; Parameters:    Size  Location     Type
  9115 ;;  timer0          2   31[COMRAM] unsigned int 
  9116 ;; Auto vars:     Size  Location     Type
  9117 ;;  timer           2   33[COMRAM] struct Timers
  9118 ;; Return value:  Size  Location     Type
  9119 ;;		None               void
  9120 ;; Registers used:
  9121 ;;		None
  9122 ;; Tracked objects:
  9123 ;;		On entry : 0/0
  9124 ;;		On exit  : 0/0
  9125 ;;		Unchanged: 0/0
  9126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9127 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9128 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9129 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9130 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9131 ;;Total ram usage:        4 bytes
  9132 ;; Hardware stack levels used:    1
  9133 ;; Hardware stack levels required when called:    2
  9134 ;; This function calls:
  9135 ;;		Nothing
  9136 ;; This function is called by:
  9137 ;;		_Increment_Timer
  9138 ;; This function uses a non-reentrant model
  9139 ;;
  9140                           
  9141                           	psect	text46
  9142  002F20                     __ptext46:
  9143                           	opt stack 0
  9144  002F20                     _WriteTimer0:
  9145                           	opt stack 26
  9146                           
  9147                           ;incstack = 0
  9148                           ;incstack = 0
  9149  002F20  C020  F022         	movff	WriteTimer0@timer0,WriteTimer0@timer
  9150  002F24  C021  F023         	movff	WriteTimer0@timer0+1,WriteTimer0@timer+1
  9151  002F28  C023  FFD7         	movff	WriteTimer0@timer+1,4055	;volatile
  9152  002F2C  C022  FFD6         	movff	WriteTimer0@timer,4054	;volatile
  9153  002F30  0012               	return	
  9154  002F32                     __end_of_WriteTimer0:
  9155                           	opt stack 0
  9156                           tblptru	equ	0xFF8
  9157                           tblptrh	equ	0xFF7
  9158                           tblptrl	equ	0xFF6
  9159                           tablat	equ	0xFF5
  9160                           prodh	equ	0xFF4
  9161                           prodl	equ	0xFF3
  9162                           intcon	equ	0xFF2
  9163                           indf0	equ	0xFEF
  9164                           postinc0	equ	0xFEE
  9165                           fsr0h	equ	0xFEA
  9166                           fsr0l	equ	0xFE9
  9167                           wreg	equ	0xFE8
  9168                           indf1	equ	0xFE7
  9169                           postdec1	equ	0xFE5
  9170                           fsr1h	equ	0xFE2
  9171                           fsr1l	equ	0xFE1
  9172                           indf2	equ	0xFDF
  9173                           postinc2	equ	0xFDE
  9174                           postdec2	equ	0xFDD
  9175                           plusw2	equ	0xFDB
  9176                           fsr2h	equ	0xFDA
  9177                           fsr2l	equ	0xFD9
  9178                           status	equ	0xFD8
  9179                           
  9180 ;; *************** function _InitKeys *****************
  9181 ;; Defined at:
  9182 ;;		line 107 in file "source/Model.c"
  9183 ;; Parameters:    Size  Location     Type
  9184 ;;		None
  9185 ;; Auto vars:     Size  Location     Type
  9186 ;;  KeyTimer        5   31[COMRAM] volatile struct ATimeStr
  9187 ;; Return value:  Size  Location     Type
  9188 ;;		None               void
  9189 ;; Registers used:
  9190 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  9191 ;; Tracked objects:
  9192 ;;		On entry : 0/0
  9193 ;;		On exit  : 0/0
  9194 ;;		Unchanged: 0/0
  9195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9196 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9197 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9198 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9199 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9200 ;;Total ram usage:        5 bytes
  9201 ;; Hardware stack levels used:    1
  9202 ;; Hardware stack levels required when called:    2
  9203 ;; This function calls:
  9204 ;;		Nothing
  9205 ;; This function is called by:
  9206 ;;		_TaskManager
  9207 ;; This function uses a non-reentrant model
  9208 ;;
  9209                           
  9210                           	psect	text47
  9211  0016C8                     __ptext47:
  9212                           	opt stack 0
  9213  0016C8                     _InitKeys:
  9214                           	opt stack 27
  9215                           
  9216                           ;Model.c: 108: m_HeadOfQueue = KeyCount;
  9217                           
  9218                           ;incstack = 0
  9219                           ;incstack = 0
  9220  0016C8  0E0B               	movlw	low _KeyCount
  9221  0016CA  6EF6               	movwf	tblptrl,c
  9222  0016CC  0E0D               	movlw	high _KeyCount
  9223  0016CE  6EF7               	movwf	tblptrh,c
  9224  0016D0  0008               	tblrd		*
  9225  0016D2  CFF5 F03D          	movff	tablat,_m_HeadOfQueue	;volatile
  9226                           
  9227                           ;Model.c: 110: t_ATime KeyTimer;
  9228                           ;Model.c: 111: KeyTimer.Millisecond = 0;
  9229  0016D6  0E00               	movlw	0
  9230  0016D8  6E20               	movwf	InitKeys@KeyTimer,c	;volatile
  9231                           
  9232                           ;Model.c: 112: KeyTimer.Second = 0;
  9233  0016DA  0E00               	movlw	0
  9234  0016DC  6E21               	movwf	InitKeys@KeyTimer+1,c	;volatile
  9235                           
  9236                           ;Model.c: 113: KeyTimer.Minute = 0;
  9237  0016DE  0E00               	movlw	0
  9238  0016E0  6E22               	movwf	InitKeys@KeyTimer+2,c	;volatile
  9239                           
  9240                           ;Model.c: 114: KeyTimer.Hour = 0;
  9241  0016E2  0E00               	movlw	0
  9242  0016E4  6E23               	movwf	InitKeys@KeyTimer+3,c	;volatile
  9243                           
  9244                           ;Model.c: 115: KeyTimer.Day = 0;
  9245  0016E6  0E00               	movlw	0
  9246  0016E8  6E24               	movwf	InitKeys@KeyTimer+4,c	;volatile
  9247                           
  9248                           ;Model.c: 117: m_Keys[ 0 ].ButtonState = e_PressedNo;
  9249  0016EA  0E01               	movlw	1
  9250  0016EC  0100               	movlb	0	; () banked
  9251  0016EE  0100               	movlb	0	; () banked
  9252  0016F0  6F63               	movwf	_m_Keys& (0+255),b	;volatile
  9253                           
  9254                           ; BSR set to: 0
  9255                           ;Model.c: 118: m_Keys[ 0 ].SequenceIdPressedNo = e_AllOff;
  9256  0016F2  0E01               	movlw	1
  9257  0016F4  0100               	movlb	0	; () banked
  9258  0016F6  0100               	movlb	0	; () banked
  9259  0016F8  6F6E               	movwf	(_m_Keys+11)& (0+255),b	;volatile
  9260                           
  9261                           ; BSR set to: 0
  9262                           ;Model.c: 119: m_Keys[ 0 ].SequenceIdPressedYes = e_RapidFlashColourB;
  9263  0016FA  0E06               	movlw	6
  9264  0016FC  0100               	movlb	0	; () banked
  9265  0016FE  0100               	movlb	0	; () banked
  9266  001700  6F6F               	movwf	(_m_Keys+12)& (0+255),b	;volatile
  9267                           
  9268                           ; BSR set to: 0
  9269                           ;Model.c: 120: m_Keys[ 0 ].SequenceIdBeingServedNo = e_SteadyColourB;
  9270  001702  0E03               	movlw	3
  9271  001704  0100               	movlb	0	; () banked
  9272  001706  0100               	movlb	0	; () banked
  9273  001708  6F70               	movwf	(_m_Keys+13)& (0+255),b	;volatile
  9274                           
  9275                           ; BSR set to: 0
  9276                           ;Model.c: 121: m_Keys[ 0 ].SequenceIdBeingServedYes = e_RedGreenFlash;
  9277  00170A  0E04               	movlw	4
  9278  00170C  0100               	movlb	0	; () banked
  9279  00170E  0100               	movlb	0	; () banked
  9280  001710  6F71               	movwf	(_m_Keys+14)& (0+255),b	;volatile
  9281                           
  9282                           ; BSR set to: 0
  9283                           ;Model.c: 122: m_Keys[ 0 ].SequenceState = 0;
  9284  001712  0E00               	movlw	0
  9285  001714  0100               	movlb	0	; () banked
  9286  001716  0100               	movlb	0	; () banked
  9287  001718  6F72               	movwf	(_m_Keys+15)& (0+255),b	;volatile
  9288                           
  9289                           ; BSR set to: 0
  9290                           ;Model.c: 123: m_Keys[ 0 ].NextActionTimer = KeyTimer;
  9291  00171A  EE20  F020         	lfsr	2,InitKeys@KeyTimer	;volatile
  9292  00171E  EE10  F069         	lfsr	1,_m_Keys+6	;volatile
  9293  001722  0E05               	movlw	5
  9294  001724                     u1271:
  9295  001724  CFDE FFE6          	movff	postinc2,postinc1
  9296  001728  2EE8               	decfsz	wreg,f,c
  9297  00172A  D7FC               	goto	u1271
  9298                           
  9299                           ; BSR set to: 0
  9300                           ;Model.c: 124: m_Keys[ 0 ].InputTimer = KeyTimer;
  9301  00172C  EE20  F020         	lfsr	2,InitKeys@KeyTimer	;volatile
  9302  001730  EE10  F064         	lfsr	1,_m_Keys+1	;volatile
  9303  001734  0E05               	movlw	5
  9304  001736                     u1281:
  9305  001736  CFDE FFE6          	movff	postinc2,postinc1
  9306  00173A  2EE8               	decfsz	wreg,f,c
  9307  00173C  D7FC               	goto	u1281
  9308                           
  9309                           ; BSR set to: 0
  9310                           ;Model.c: 125: m_Keys[ 0 ].NextInQueue = KeyCount;
  9311  00173E  0E0B               	movlw	low _KeyCount
  9312  001740  6EF6               	movwf	tblptrl,c
  9313  001742  0E0D               	movlw	high _KeyCount
  9314  001744  6EF7               	movwf	tblptrh,c
  9315  001746  0008               	tblrd		*
  9316  001748  0100               	movlb	0	; () banked
  9317  00174A  CFF5 F073          	movff	tablat,_m_Keys+16	;volatile
  9318                           
  9319                           ;Model.c: 127: m_Keys[ 1 ].ButtonState = e_PressedNo;
  9320  00174E  0E01               	movlw	1
  9321  001750  0100               	movlb	0	; () banked
  9322  001752  0100               	movlb	0	; () banked
  9323  001754  6F74               	movwf	(_m_Keys+17)& (0+255),b	;volatile
  9324                           
  9325                           ;Model.c: 128: m_Keys[ 1 ].SequenceIdPressedNo = e_AllOff;
  9326  001756  0E01               	movlw	1
  9327  001758  0100               	movlb	0	; () banked
  9328  00175A  0100               	movlb	0	; () banked
  9329  00175C  6F7F               	movwf	(_m_Keys+28)& (0+255),b	;volatile
  9330                           
  9331                           ;Model.c: 129: m_Keys[ 1 ].SequenceIdPressedYes = e_RapidFlashColourB;
  9332  00175E  0E06               	movlw	6
  9333  001760  0100               	movlb	0	; () banked
  9334  001762  0100               	movlb	0	; () banked
  9335  001764  6F80               	movwf	(_m_Keys+29)& (0+255),b	;volatile
  9336                           
  9337                           ;Model.c: 130: m_Keys[ 1 ].SequenceIdBeingServedNo = e_SteadyColourB;
  9338  001766  0E03               	movlw	3
  9339  001768  0100               	movlb	0	; () banked
  9340  00176A  0100               	movlb	0	; () banked
  9341  00176C  6F81               	movwf	(_m_Keys+30)& (0+255),b	;volatile
  9342                           
  9343                           ;Model.c: 131: m_Keys[ 1 ].SequenceIdBeingServedYes = e_RedGreenFlash;
  9344  00176E  0E04               	movlw	4
  9345  001770  0100               	movlb	0	; () banked
  9346  001772  0100               	movlb	0	; () banked
  9347  001774  6F82               	movwf	(_m_Keys+31)& (0+255),b	;volatile
  9348                           
  9349                           ;Model.c: 132: m_Keys[ 1 ].SequenceState = 0;
  9350  001776  0E00               	movlw	0
  9351  001778  0100               	movlb	0	; () banked
  9352  00177A  0100               	movlb	0	; () banked
  9353  00177C  6F83               	movwf	(_m_Keys+32)& (0+255),b	;volatile
  9354                           
  9355                           ; BSR set to: 0
  9356                           ;Model.c: 133: m_Keys[ 1 ].NextActionTimer = KeyTimer;
  9357  00177E  EE20  F020         	lfsr	2,InitKeys@KeyTimer	;volatile
  9358  001782  EE10  F07A         	lfsr	1,_m_Keys+23	;volatile
  9359  001786  0E05               	movlw	5
  9360  001788                     u1291:
  9361  001788  CFDE FFE6          	movff	postinc2,postinc1
  9362  00178C  2EE8               	decfsz	wreg,f,c
  9363  00178E  D7FC               	goto	u1291
  9364                           
  9365                           ; BSR set to: 0
  9366                           ;Model.c: 134: m_Keys[ 1 ].InputTimer = KeyTimer;
  9367  001790  EE20  F020         	lfsr	2,InitKeys@KeyTimer	;volatile
  9368  001794  EE10  F075         	lfsr	1,_m_Keys+18	;volatile
  9369  001798  0E05               	movlw	5
  9370  00179A                     u1301:
  9371  00179A  CFDE FFE6          	movff	postinc2,postinc1
  9372  00179E  2EE8               	decfsz	wreg,f,c
  9373  0017A0  D7FC               	goto	u1301
  9374                           
  9375                           ; BSR set to: 0
  9376                           ;Model.c: 135: m_Keys[ 1 ].NextInQueue = KeyCount;
  9377  0017A2  0E0B               	movlw	low _KeyCount
  9378  0017A4  6EF6               	movwf	tblptrl,c
  9379  0017A6  0E0D               	movlw	high _KeyCount
  9380  0017A8  6EF7               	movwf	tblptrh,c
  9381  0017AA  0008               	tblrd		*
  9382  0017AC  0100               	movlb	0	; () banked
  9383  0017AE  CFF5 F084          	movff	tablat,_m_Keys+33	;volatile
  9384                           
  9385                           ; BSR set to: 0
  9386                           ;Model.c: 137: m_Keys[ 2 ].ButtonState = e_PressedNo;
  9387  0017B2  0E01               	movlw	1
  9388  0017B4  0100               	movlb	0	; () banked
  9389  0017B6  0100               	movlb	0	; () banked
  9390  0017B8  6F85               	movwf	(_m_Keys+34)& (0+255),b	;volatile
  9391                           
  9392                           ; BSR set to: 0
  9393                           ;Model.c: 138: m_Keys[ 2 ].SequenceIdPressedNo = e_AllOff;
  9394  0017BA  0E01               	movlw	1
  9395  0017BC  0100               	movlb	0	; () banked
  9396  0017BE  0100               	movlb	0	; () banked
  9397  0017C0  6F90               	movwf	(_m_Keys+45)& (0+255),b	;volatile
  9398                           
  9399                           ; BSR set to: 0
  9400                           ;Model.c: 139: m_Keys[ 2 ].SequenceIdPressedYes = e_RapidFlashColourB;
  9401  0017C2  0E06               	movlw	6
  9402  0017C4  0100               	movlb	0	; () banked
  9403  0017C6  0100               	movlb	0	; () banked
  9404  0017C8  6F91               	movwf	(_m_Keys+46)& (0+255),b	;volatile
  9405                           
  9406                           ; BSR set to: 0
  9407                           ;Model.c: 140: m_Keys[ 2 ].SequenceIdBeingServedNo = e_SteadyColourB;
  9408  0017CA  0E03               	movlw	3
  9409  0017CC  0100               	movlb	0	; () banked
  9410  0017CE  0100               	movlb	0	; () banked
  9411  0017D0  6F92               	movwf	(_m_Keys+47)& (0+255),b	;volatile
  9412                           
  9413                           ; BSR set to: 0
  9414                           ;Model.c: 141: m_Keys[ 2 ].SequenceIdBeingServedYes = e_RedGreenFlash;
  9415  0017D2  0E04               	movlw	4
  9416  0017D4  0100               	movlb	0	; () banked
  9417  0017D6  0100               	movlb	0	; () banked
  9418  0017D8  6F93               	movwf	(_m_Keys+48)& (0+255),b	;volatile
  9419                           
  9420                           ; BSR set to: 0
  9421                           ;Model.c: 142: m_Keys[ 2 ].SequenceState = 0;
  9422  0017DA  0E00               	movlw	0
  9423  0017DC  0100               	movlb	0	; () banked
  9424  0017DE  0100               	movlb	0	; () banked
  9425  0017E0  6F94               	movwf	(_m_Keys+49)& (0+255),b	;volatile
  9426                           
  9427                           ; BSR set to: 0
  9428                           ;Model.c: 143: m_Keys[ 2 ].NextActionTimer = KeyTimer;
  9429  0017E2  EE20  F020         	lfsr	2,InitKeys@KeyTimer	;volatile
  9430  0017E6  EE10  F08B         	lfsr	1,_m_Keys+40	;volatile
  9431  0017EA  0E05               	movlw	5
  9432  0017EC                     u1311:
  9433  0017EC  CFDE FFE6          	movff	postinc2,postinc1
  9434  0017F0  2EE8               	decfsz	wreg,f,c
  9435  0017F2  D7FC               	goto	u1311
  9436                           
  9437                           ; BSR set to: 0
  9438                           ;Model.c: 144: m_Keys[ 2 ].InputTimer = KeyTimer;
  9439  0017F4  EE20  F020         	lfsr	2,InitKeys@KeyTimer	;volatile
  9440  0017F8  EE10  F086         	lfsr	1,_m_Keys+35	;volatile
  9441  0017FC  0E05               	movlw	5
  9442  0017FE                     u1321:
  9443  0017FE  CFDE FFE6          	movff	postinc2,postinc1
  9444  001802  2EE8               	decfsz	wreg,f,c
  9445  001804  D7FC               	goto	u1321
  9446                           
  9447                           ; BSR set to: 0
  9448                           ;Model.c: 145: m_Keys[ 2 ].NextInQueue = KeyCount;
  9449  001806  0E0B               	movlw	low _KeyCount
  9450  001808  6EF6               	movwf	tblptrl,c
  9451  00180A  0E0D               	movlw	high _KeyCount
  9452  00180C  6EF7               	movwf	tblptrh,c
  9453  00180E  0008               	tblrd		*
  9454  001810  0100               	movlb	0	; () banked
  9455  001812  CFF5 F095          	movff	tablat,_m_Keys+50	;volatile
  9456                           
  9457                           ;Model.c: 147: m_Keys[ 3 ].ButtonState = e_PressedNo;
  9458  001816  0E01               	movlw	1
  9459  001818  0100               	movlb	0	; () banked
  9460  00181A  0100               	movlb	0	; () banked
  9461  00181C  6F96               	movwf	(_m_Keys+51)& (0+255),b	;volatile
  9462                           
  9463                           ;Model.c: 148: m_Keys[ 3 ].SequenceIdPressedNo = e_AllOff;
  9464  00181E  0E01               	movlw	1
  9465  001820  0100               	movlb	0	; () banked
  9466  001822  0100               	movlb	0	; () banked
  9467  001824  6FA1               	movwf	(_m_Keys+62)& (0+255),b	;volatile
  9468                           
  9469                           ;Model.c: 149: m_Keys[ 3 ].SequenceIdPressedYes = e_RapidFlashColourB;
  9470  001826  0E06               	movlw	6
  9471  001828  0100               	movlb	0	; () banked
  9472  00182A  0100               	movlb	0	; () banked
  9473  00182C  6FA2               	movwf	(_m_Keys+63)& (0+255),b	;volatile
  9474                           
  9475                           ;Model.c: 150: m_Keys[ 3 ].SequenceIdBeingServedNo = e_SteadyColourB;
  9476  00182E  0E03               	movlw	3
  9477  001830  0100               	movlb	0	; () banked
  9478  001832  0100               	movlb	0	; () banked
  9479  001834  6FA3               	movwf	(_m_Keys+64)& (0+255),b	;volatile
  9480                           
  9481                           ;Model.c: 151: m_Keys[ 3 ].SequenceIdBeingServedYes = e_RedGreenFlash;
  9482  001836  0E04               	movlw	4
  9483  001838  0100               	movlb	0	; () banked
  9484  00183A  0100               	movlb	0	; () banked
  9485  00183C  6FA4               	movwf	(_m_Keys+65)& (0+255),b	;volatile
  9486                           
  9487                           ;Model.c: 152: m_Keys[ 3 ].SequenceState = 0;
  9488  00183E  0E00               	movlw	0
  9489  001840  0100               	movlb	0	; () banked
  9490  001842  0100               	movlb	0	; () banked
  9491  001844  6FA5               	movwf	(_m_Keys+66)& (0+255),b	;volatile
  9492                           
  9493                           ; BSR set to: 0
  9494                           ;Model.c: 153: m_Keys[ 3 ].NextActionTimer = KeyTimer;
  9495  001846  EE20  F020         	lfsr	2,InitKeys@KeyTimer	;volatile
  9496  00184A  EE10  F09C         	lfsr	1,_m_Keys+57	;volatile
  9497  00184E  0E05               	movlw	5
  9498  001850                     u1331:
  9499  001850  CFDE FFE6          	movff	postinc2,postinc1
  9500  001854  2EE8               	decfsz	wreg,f,c
  9501  001856  D7FC               	goto	u1331
  9502                           
  9503                           ; BSR set to: 0
  9504                           ;Model.c: 154: m_Keys[ 3 ].InputTimer = KeyTimer;
  9505  001858  EE20  F020         	lfsr	2,InitKeys@KeyTimer	;volatile
  9506  00185C  EE10  F097         	lfsr	1,_m_Keys+52	;volatile
  9507  001860  0E05               	movlw	5
  9508  001862                     u1341:
  9509  001862  CFDE FFE6          	movff	postinc2,postinc1
  9510  001866  2EE8               	decfsz	wreg,f,c
  9511  001868  D7FC               	goto	u1341
  9512                           
  9513                           ; BSR set to: 0
  9514                           ;Model.c: 155: m_Keys[ 3 ].NextInQueue = KeyCount;
  9515  00186A  0E0B               	movlw	low _KeyCount
  9516  00186C  6EF6               	movwf	tblptrl,c
  9517  00186E  0E0D               	movlw	high _KeyCount
  9518  001870  6EF7               	movwf	tblptrh,c
  9519  001872  0008               	tblrd		*
  9520  001874  0100               	movlb	0	; () banked
  9521  001876  CFF5 F0A6          	movff	tablat,_m_Keys+67	;volatile
  9522                           
  9523                           ; BSR set to: 0
  9524                           ;Model.c: 157: m_Keys[ 4 ].ButtonState = e_PressedNo;
  9525  00187A  0E01               	movlw	1
  9526  00187C  0100               	movlb	0	; () banked
  9527  00187E  0100               	movlb	0	; () banked
  9528  001880  6FA7               	movwf	(_m_Keys+68)& (0+255),b	;volatile
  9529                           
  9530                           ; BSR set to: 0
  9531                           ;Model.c: 158: m_Keys[ 4 ].SequenceIdPressedNo = e_AllOff;
  9532  001882  0E01               	movlw	1
  9533  001884  0100               	movlb	0	; () banked
  9534  001886  0100               	movlb	0	; () banked
  9535  001888  6FB2               	movwf	(_m_Keys+79)& (0+255),b	;volatile
  9536                           
  9537                           ; BSR set to: 0
  9538                           ;Model.c: 159: m_Keys[ 4 ].SequenceIdPressedYes = e_RapidFlashColourB;
  9539  00188A  0E06               	movlw	6
  9540  00188C  0100               	movlb	0	; () banked
  9541  00188E  0100               	movlb	0	; () banked
  9542  001890  6FB3               	movwf	(_m_Keys+80)& (0+255),b	;volatile
  9543                           
  9544                           ; BSR set to: 0
  9545                           ;Model.c: 160: m_Keys[ 4 ].SequenceIdBeingServedNo = e_SteadyColourB;
  9546  001892  0E03               	movlw	3
  9547  001894  0100               	movlb	0	; () banked
  9548  001896  0100               	movlb	0	; () banked
  9549  001898  6FB4               	movwf	(_m_Keys+81)& (0+255),b	;volatile
  9550                           
  9551                           ; BSR set to: 0
  9552                           ;Model.c: 161: m_Keys[ 4 ].SequenceIdBeingServedYes = e_RedGreenFlash;
  9553  00189A  0E04               	movlw	4
  9554  00189C  0100               	movlb	0	; () banked
  9555  00189E  0100               	movlb	0	; () banked
  9556  0018A0  6FB5               	movwf	(_m_Keys+82)& (0+255),b	;volatile
  9557                           
  9558                           ; BSR set to: 0
  9559                           ;Model.c: 162: m_Keys[ 4 ].SequenceState = 0;
  9560  0018A2  0E00               	movlw	0
  9561  0018A4  0100               	movlb	0	; () banked
  9562  0018A6  0100               	movlb	0	; () banked
  9563  0018A8  6FB6               	movwf	(_m_Keys+83)& (0+255),b	;volatile
  9564                           
  9565                           ; BSR set to: 0
  9566                           ;Model.c: 163: m_Keys[ 4 ].NextActionTimer = KeyTimer;
  9567  0018AA  EE20  F020         	lfsr	2,InitKeys@KeyTimer	;volatile
  9568  0018AE  EE10  F0AD         	lfsr	1,_m_Keys+74	;volatile
  9569  0018B2  0E05               	movlw	5
  9570  0018B4                     u1351:
  9571  0018B4  CFDE FFE6          	movff	postinc2,postinc1
  9572  0018B8  2EE8               	decfsz	wreg,f,c
  9573  0018BA  D7FC               	goto	u1351
  9574                           
  9575                           ; BSR set to: 0
  9576                           ;Model.c: 164: m_Keys[ 4 ].InputTimer = KeyTimer;
  9577  0018BC  EE20  F020         	lfsr	2,InitKeys@KeyTimer	;volatile
  9578  0018C0  EE10  F0A8         	lfsr	1,_m_Keys+69	;volatile
  9579  0018C4  0E05               	movlw	5
  9580  0018C6                     u1361:
  9581  0018C6  CFDE FFE6          	movff	postinc2,postinc1
  9582  0018CA  2EE8               	decfsz	wreg,f,c
  9583  0018CC  D7FC               	goto	u1361
  9584                           
  9585                           ; BSR set to: 0
  9586                           ;Model.c: 165: m_Keys[ 4 ].NextInQueue = KeyCount;
  9587  0018CE  0E0B               	movlw	low _KeyCount
  9588  0018D0  6EF6               	movwf	tblptrl,c
  9589  0018D2  0E0D               	movlw	high _KeyCount
  9590  0018D4  6EF7               	movwf	tblptrh,c
  9591  0018D6  0008               	tblrd		*
  9592  0018D8  0100               	movlb	0	; () banked
  9593  0018DA  CFF5 F0B7          	movff	tablat,_m_Keys+84	;volatile
  9594                           
  9595                           ; BSR set to: 0
  9596  0018DE  0012               	return	
  9597  0018E0                     __end_of_InitKeys:
  9598                           	opt stack 0
  9599                           tblptru	equ	0xFF8
  9600                           tblptrh	equ	0xFF7
  9601                           tblptrl	equ	0xFF6
  9602                           tablat	equ	0xFF5
  9603                           prodh	equ	0xFF4
  9604                           prodl	equ	0xFF3
  9605                           intcon	equ	0xFF2
  9606                           indf0	equ	0xFEF
  9607                           postinc0	equ	0xFEE
  9608                           fsr0h	equ	0xFEA
  9609                           fsr0l	equ	0xFE9
  9610                           wreg	equ	0xFE8
  9611                           indf1	equ	0xFE7
  9612                           postinc1	equ	0xFE6
  9613                           postdec1	equ	0xFE5
  9614                           fsr1h	equ	0xFE2
  9615                           fsr1l	equ	0xFE1
  9616                           indf2	equ	0xFDF
  9617                           postinc2	equ	0xFDE
  9618                           postdec2	equ	0xFDD
  9619                           plusw2	equ	0xFDB
  9620                           fsr2h	equ	0xFDA
  9621                           fsr2l	equ	0xFD9
  9622                           status	equ	0xFD8
  9623                           
  9624 ;; *************** function _InitTime *****************
  9625 ;; Defined at:
  9626 ;;		line 43 in file "source/TimerTask.c"
  9627 ;; Parameters:    Size  Location     Type
  9628 ;;		None
  9629 ;; Auto vars:     Size  Location     Type
  9630 ;;		None
  9631 ;; Return value:  Size  Location     Type
  9632 ;;		None               void
  9633 ;; Registers used:
  9634 ;;		wreg, status,2
  9635 ;; Tracked objects:
  9636 ;;		On entry : 0/0
  9637 ;;		On exit  : 0/0
  9638 ;;		Unchanged: 0/0
  9639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9640 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9641 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9642 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9643 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9644 ;;Total ram usage:        0 bytes
  9645 ;; Hardware stack levels used:    1
  9646 ;; Hardware stack levels required when called:    2
  9647 ;; This function calls:
  9648 ;;		Nothing
  9649 ;; This function is called by:
  9650 ;;		_TaskManager
  9651 ;; This function uses a non-reentrant model
  9652 ;;
  9653                           
  9654                           	psect	text48
  9655  002ED2                     __ptext48:
  9656                           	opt stack 0
  9657  002ED2                     _InitTime:
  9658                           	opt stack 27
  9659                           
  9660                           ;TimerTask.c: 44: m_CurrentTime.Day = 0;
  9661                           
  9662                           ; BSR set to: 0
  9663                           ;incstack = 0
  9664                           ;incstack = 0
  9665  002ED2  0E00               	movlw	0
  9666  002ED4  6E36               	movwf	_m_CurrentTime+4,c	;volatile
  9667                           
  9668                           ;TimerTask.c: 45: m_CurrentTime.Hour = 0;
  9669  002ED6  0E00               	movlw	0
  9670  002ED8  6E35               	movwf	_m_CurrentTime+3,c	;volatile
  9671                           
  9672                           ;TimerTask.c: 46: m_CurrentTime.Millisecond = 0;
  9673  002EDA  0E00               	movlw	0
  9674  002EDC  6E32               	movwf	_m_CurrentTime,c	;volatile
  9675                           
  9676                           ;TimerTask.c: 47: m_CurrentTime.Minute = 0;
  9677  002EDE  0E00               	movlw	0
  9678  002EE0  6E34               	movwf	_m_CurrentTime+2,c	;volatile
  9679                           
  9680                           ;TimerTask.c: 48: m_CurrentTime.Second = 0;
  9681  002EE2  0E00               	movlw	0
  9682  002EE4  6E33               	movwf	_m_CurrentTime+1,c	;volatile
  9683  002EE6  0012               	return	
  9684  002EE8                     __end_of_InitTime:
  9685                           	opt stack 0
  9686                           tblptru	equ	0xFF8
  9687                           tblptrh	equ	0xFF7
  9688                           tblptrl	equ	0xFF6
  9689                           tablat	equ	0xFF5
  9690                           prodh	equ	0xFF4
  9691                           prodl	equ	0xFF3
  9692                           intcon	equ	0xFF2
  9693                           indf0	equ	0xFEF
  9694                           postinc0	equ	0xFEE
  9695                           fsr0h	equ	0xFEA
  9696                           fsr0l	equ	0xFE9
  9697                           wreg	equ	0xFE8
  9698                           indf1	equ	0xFE7
  9699                           postinc1	equ	0xFE6
  9700                           postdec1	equ	0xFE5
  9701                           fsr1h	equ	0xFE2
  9702                           fsr1l	equ	0xFE1
  9703                           indf2	equ	0xFDF
  9704                           postinc2	equ	0xFDE
  9705                           postdec2	equ	0xFDD
  9706                           plusw2	equ	0xFDB
  9707                           fsr2h	equ	0xFDA
  9708                           fsr2l	equ	0xFD9
  9709                           status	equ	0xFD8
  9710                           
  9711 ;; *************** function _LowPriorityISR *****************
  9712 ;; Defined at:
  9713 ;;		line 196 in file "source/TimerTask.c"
  9714 ;; Parameters:    Size  Location     Type
  9715 ;;		None
  9716 ;; Auto vars:     Size  Location     Type
  9717 ;;		None
  9718 ;; Return value:  Size  Location     Type
  9719 ;;		None               void
  9720 ;; Registers used:
  9721 ;;		None
  9722 ;; Tracked objects:
  9723 ;;		On entry : 0/0
  9724 ;;		On exit  : 0/0
  9725 ;;		Unchanged: 0/0
  9726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9727 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9728 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9729 ;;      Temps:         17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9730 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9731 ;;Total ram usage:       17 bytes
  9732 ;; Hardware stack levels used:    1
  9733 ;; Hardware stack levels required when called:    1
  9734 ;; This function calls:
  9735 ;;		Nothing
  9736 ;; This function is called by:
  9737 ;;		Interrupt level 1
  9738 ;; This function uses a non-reentrant model
  9739 ;;
  9740                           
  9741                           	psect	intcodelo
  9742  000018                     __pintcodelo:
  9743                           	opt stack 0
  9744  000018                     _LowPriorityISR:
  9745                           	opt stack 22
  9746                           
  9747                           ;incstack = 0
  9748  000018  CFD8 F00F          	movff	status,??_LowPriorityISR
  9749  00001C  CFE8 F010          	movff	wreg,??_LowPriorityISR+1
  9750  000020  CFE0 F011          	movff	bsr,??_LowPriorityISR+2
  9751  000024  CFFA F012          	movff	pclath,??_LowPriorityISR+3
  9752  000028  CFFB F013          	movff	pclatu,??_LowPriorityISR+4
  9753  00002C  CFE9 F014          	movff	fsr0l,??_LowPriorityISR+5
  9754  000030  CFEA F015          	movff	fsr0h,??_LowPriorityISR+6
  9755  000034  CFE1 F016          	movff	fsr1l,??_LowPriorityISR+7
  9756  000038  CFE2 F017          	movff	fsr1h,??_LowPriorityISR+8
  9757  00003C  CFD9 F018          	movff	fsr2l,??_LowPriorityISR+9
  9758  000040  CFDA F019          	movff	fsr2h,??_LowPriorityISR+10
  9759  000044  CFF3 F01A          	movff	prodl,??_LowPriorityISR+11
  9760  000048  CFF4 F01B          	movff	prodh,??_LowPriorityISR+12
  9761  00004C  CFF6 F01C          	movff	tblptrl,??_LowPriorityISR+13
  9762  000050  CFF7 F01D          	movff	tblptrh,??_LowPriorityISR+14
  9763  000054  CFF8 F01E          	movff	tblptru,??_LowPriorityISR+15
  9764  000058  CFF5 F01F          	movff	tablat,??_LowPriorityISR+16
  9765  00005C  C01F  FFF5         	movff	??_LowPriorityISR+16,tablat
  9766  000060  C01E  FFF8         	movff	??_LowPriorityISR+15,tblptru
  9767  000064  C01D  FFF7         	movff	??_LowPriorityISR+14,tblptrh
  9768  000068  C01C  FFF6         	movff	??_LowPriorityISR+13,tblptrl
  9769  00006C  C01B  FFF4         	movff	??_LowPriorityISR+12,prodh
  9770  000070  C01A  FFF3         	movff	??_LowPriorityISR+11,prodl
  9771  000074  C019  FFDA         	movff	??_LowPriorityISR+10,fsr2h
  9772  000078  C018  FFD9         	movff	??_LowPriorityISR+9,fsr2l
  9773  00007C  C017  FFE2         	movff	??_LowPriorityISR+8,fsr1h
  9774  000080  C016  FFE1         	movff	??_LowPriorityISR+7,fsr1l
  9775  000084  C015  FFEA         	movff	??_LowPriorityISR+6,fsr0h
  9776  000088  C014  FFE9         	movff	??_LowPriorityISR+5,fsr0l
  9777  00008C  C013  FFFB         	movff	??_LowPriorityISR+4,pclatu
  9778  000090  C012  FFFA         	movff	??_LowPriorityISR+3,pclath
  9779  000094  C011  FFE0         	movff	??_LowPriorityISR+2,bsr
  9780  000098  C010  FFE8         	movff	??_LowPriorityISR+1,wreg
  9781  00009C  C00F  FFD8         	movff	??_LowPriorityISR,status
  9782  0000A0  0010               	retfie	
  9783  0000A2                     __end_of_LowPriorityISR:
  9784                           	opt stack 0
  9785                           pclatu	equ	0xFFB
  9786                           pclath	equ	0xFFA
  9787                           tblptru	equ	0xFF8
  9788                           tblptrh	equ	0xFF7
  9789                           tblptrl	equ	0xFF6
  9790                           tablat	equ	0xFF5
  9791                           prodh	equ	0xFF4
  9792                           prodl	equ	0xFF3
  9793                           intcon	equ	0xFF2
  9794                           indf0	equ	0xFEF
  9795                           postinc0	equ	0xFEE
  9796                           fsr0h	equ	0xFEA
  9797                           fsr0l	equ	0xFE9
  9798                           wreg	equ	0xFE8
  9799                           indf1	equ	0xFE7
  9800                           postinc1	equ	0xFE6
  9801                           postdec1	equ	0xFE5
  9802                           fsr1h	equ	0xFE2
  9803                           fsr1l	equ	0xFE1
  9804                           bsr	equ	0xFE0
  9805                           indf2	equ	0xFDF
  9806                           postinc2	equ	0xFDE
  9807                           postdec2	equ	0xFDD
  9808                           plusw2	equ	0xFDB
  9809                           fsr2h	equ	0xFDA
  9810                           fsr2l	equ	0xFD9
  9811                           status	equ	0xFD8
  9812                           
  9813 ;; *************** function _ISR *****************
  9814 ;; Defined at:
  9815 ;;		line 214 in file "source/TimerTask.c"
  9816 ;; Parameters:    Size  Location     Type
  9817 ;;		None
  9818 ;; Auto vars:     Size  Location     Type
  9819 ;;		None
  9820 ;; Return value:  Size  Location     Type
  9821 ;;		None               void
  9822 ;; Registers used:
  9823 ;;		None
  9824 ;; Tracked objects:
  9825 ;;		On entry : 0/0
  9826 ;;		On exit  : 0/0
  9827 ;;		Unchanged: 0/0
  9828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9829 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9830 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9831 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9832 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9833 ;;Total ram usage:       14 bytes
  9834 ;; Hardware stack levels used:    1
  9835 ;; This function calls:
  9836 ;;		Nothing
  9837 ;; This function is called by:
  9838 ;;		Interrupt level 2
  9839 ;; This function uses a non-reentrant model
  9840 ;;
  9841                           
  9842                           	psect	intcode
  9843  000008                     __pintcode:
  9844                           	opt stack 0
  9845  000008                     _ISR:
  9846                           	opt stack 22
  9847                           
  9848                           ;incstack = 0
  9849  000008  CFFA F001          	movff	pclath,??_ISR
  9850  00000C  CFFB F002          	movff	pclatu,??_ISR+1
  9851  000010  CFE9 F003          	movff	fsr0l,??_ISR+2
  9852  000014  EDF9  F014         	call	int_func,f	;refresh shadow registers
  9853                           pclatu	equ	0xFFB
  9854                           pclath	equ	0xFFA
  9855                           tblptru	equ	0xFF8
  9856                           tblptrh	equ	0xFF7
  9857                           tblptrl	equ	0xFF6
  9858                           tablat	equ	0xFF5
  9859                           prodh	equ	0xFF4
  9860                           prodl	equ	0xFF3
  9861                           intcon	equ	0xFF2
  9862                           indf0	equ	0xFEF
  9863                           postinc0	equ	0xFEE
  9864                           fsr0h	equ	0xFEA
  9865                           fsr0l	equ	0xFE9
  9866                           wreg	equ	0xFE8
  9867                           indf1	equ	0xFE7
  9868                           postinc1	equ	0xFE6
  9869                           postdec1	equ	0xFE5
  9870                           fsr1h	equ	0xFE2
  9871                           fsr1l	equ	0xFE1
  9872                           bsr	equ	0xFE0
  9873                           indf2	equ	0xFDF
  9874                           postinc2	equ	0xFDE
  9875                           postdec2	equ	0xFDD
  9876                           plusw2	equ	0xFDB
  9877                           fsr2h	equ	0xFDA
  9878                           fsr2l	equ	0xFD9
  9879                           status	equ	0xFD8
  9880                           
  9881                           	psect	intcode_body
  9882  0029F2                     __pintcode_body:
  9883                           	opt stack 22
  9884  0029F2                     int_func:
  9885                           	opt stack 22
  9886  0029F2  0006               	pop		; remove dummy address from shadow register refresh
  9887  0029F4  CFEA F004          	movff	fsr0h,??_ISR+3
  9888  0029F8  CFE1 F005          	movff	fsr1l,??_ISR+4
  9889  0029FC  CFE2 F006          	movff	fsr1h,??_ISR+5
  9890  002A00  CFD9 F007          	movff	fsr2l,??_ISR+6
  9891  002A04  CFDA F008          	movff	fsr2h,??_ISR+7
  9892  002A08  CFF3 F009          	movff	prodl,??_ISR+8
  9893  002A0C  CFF4 F00A          	movff	prodh,??_ISR+9
  9894  002A10  CFF6 F00B          	movff	tblptrl,??_ISR+10
  9895  002A14  CFF7 F00C          	movff	tblptrh,??_ISR+11
  9896  002A18  CFF8 F00D          	movff	tblptru,??_ISR+12
  9897  002A1C  CFF5 F00E          	movff	tablat,??_ISR+13
  9898  002A20  C00E  FFF5         	movff	??_ISR+13,tablat
  9899  002A24  C00D  FFF8         	movff	??_ISR+12,tblptru
  9900  002A28  C00C  FFF7         	movff	??_ISR+11,tblptrh
  9901  002A2C  C00B  FFF6         	movff	??_ISR+10,tblptrl
  9902  002A30  C00A  FFF4         	movff	??_ISR+9,prodh
  9903  002A34  C009  FFF3         	movff	??_ISR+8,prodl
  9904  002A38  C008  FFDA         	movff	??_ISR+7,fsr2h
  9905  002A3C  C007  FFD9         	movff	??_ISR+6,fsr2l
  9906  002A40  C006  FFE2         	movff	??_ISR+5,fsr1h
  9907  002A44  C005  FFE1         	movff	??_ISR+4,fsr1l
  9908  002A48  C004  FFEA         	movff	??_ISR+3,fsr0h
  9909  002A4C  C003  FFE9         	movff	??_ISR+2,fsr0l
  9910  002A50  C002  FFFB         	movff	??_ISR+1,pclatu
  9911  002A54  C001  FFFA         	movff	??_ISR,pclath
  9912  002A58  0011               	retfie		f
  9913  002A5A                     __end_of_ISR:
  9914                           	opt stack 0
  9915                           pclatu	equ	0xFFB
  9916                           pclath	equ	0xFFA
  9917                           tblptru	equ	0xFF8
  9918                           tblptrh	equ	0xFF7
  9919                           tblptrl	equ	0xFF6
  9920                           tablat	equ	0xFF5
  9921                           prodh	equ	0xFF4
  9922                           prodl	equ	0xFF3
  9923                           intcon	equ	0xFF2
  9924                           indf0	equ	0xFEF
  9925                           postinc0	equ	0xFEE
  9926                           fsr0h	equ	0xFEA
  9927                           fsr0l	equ	0xFE9
  9928                           wreg	equ	0xFE8
  9929                           indf1	equ	0xFE7
  9930                           postinc1	equ	0xFE6
  9931                           postdec1	equ	0xFE5
  9932                           fsr1h	equ	0xFE2
  9933                           fsr1l	equ	0xFE1
  9934                           bsr	equ	0xFE0
  9935                           indf2	equ	0xFDF
  9936                           postinc2	equ	0xFDE
  9937                           postdec2	equ	0xFDD
  9938                           plusw2	equ	0xFDB
  9939                           fsr2h	equ	0xFDA
  9940                           fsr2l	equ	0xFD9
  9941                           status	equ	0xFD8
  9942                           pclatu	equ	0xFFB
  9943                           pclath	equ	0xFFA
  9944                           tblptru	equ	0xFF8
  9945                           tblptrh	equ	0xFF7
  9946                           tblptrl	equ	0xFF6
  9947                           tablat	equ	0xFF5
  9948                           prodh	equ	0xFF4
  9949                           prodl	equ	0xFF3
  9950                           intcon	equ	0xFF2
  9951                           indf0	equ	0xFEF
  9952                           postinc0	equ	0xFEE
  9953                           fsr0h	equ	0xFEA
  9954                           fsr0l	equ	0xFE9
  9955                           wreg	equ	0xFE8
  9956                           indf1	equ	0xFE7
  9957                           postinc1	equ	0xFE6
  9958                           postdec1	equ	0xFE5
  9959                           fsr1h	equ	0xFE2
  9960                           fsr1l	equ	0xFE1
  9961                           bsr	equ	0xFE0
  9962                           indf2	equ	0xFDF
  9963                           postinc2	equ	0xFDE
  9964                           postdec2	equ	0xFDD
  9965                           plusw2	equ	0xFDB
  9966                           fsr2h	equ	0xFDA
  9967                           fsr2l	equ	0xFD9
  9968                           status	equ	0xFD8
  9969                           
  9970                           	psect	rparam
  9971  0000                     pclatu	equ	0xFFB
  9972                           pclath	equ	0xFFA
  9973                           tblptru	equ	0xFF8
  9974                           tblptrh	equ	0xFF7
  9975                           tblptrl	equ	0xFF6
  9976                           tablat	equ	0xFF5
  9977                           prodh	equ	0xFF4
  9978                           prodl	equ	0xFF3
  9979                           intcon	equ	0xFF2
  9980                           indf0	equ	0xFEF
  9981                           postinc0	equ	0xFEE
  9982                           fsr0h	equ	0xFEA
  9983                           fsr0l	equ	0xFE9
  9984                           wreg	equ	0xFE8
  9985                           indf1	equ	0xFE7
  9986                           postinc1	equ	0xFE6
  9987                           postdec1	equ	0xFE5
  9988                           fsr1h	equ	0xFE2
  9989                           fsr1l	equ	0xFE1
  9990                           bsr	equ	0xFE0
  9991                           indf2	equ	0xFDF
  9992                           postinc2	equ	0xFDE
  9993                           postdec2	equ	0xFDD
  9994                           plusw2	equ	0xFDB
  9995                           fsr2h	equ	0xFDA
  9996                           fsr2l	equ	0xFD9
  9997                           status	equ	0xFD8


Data Sizes:
    Strings     58
    Constant    19
    Data        175
    BSS         116
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     49      64
    BANK0           160     54     157
    BANK1           256      0     173
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0

Pointer List with Targets:

    ?___lwmod	unsigned int  size(2) Largest target is 0

    ?___lwdiv	unsigned int  size(2) Largest target is 0

    ?_GetSequenceState	PTR volatile unsigned char  size(2) Largest target is 85
		 -> m_Keys(BANK0[85]), 

    ?_GetKeyTimer	PTR volatile struct ATimeStruct size(2) Largest target is 85
		 -> m_Keys(BANK0[85]), 

    ?_GetKeyInputTimer	PTR volatile struct ATimeStruct size(2) Largest target is 85
		 -> m_Keys(BANK0[85]), 

    putsUSART@data	PTR unsigned char  size(2) Largest target is 3327
		 -> STR_49(CODE[3]), STR_48(CODE[14]), STR_47(CODE[8]), ECANReceiveMessage@str_1913(BANK0[5]), 
		 -> STR_45(CODE[7]), STR_44(CODE[3]), STR_43(CODE[14]), STR_42(CODE[8]), 
		 -> STR_41(CODE[7]), STR_40(CODE[3]), STR_39(CODE[14]), STR_38(CODE[8]), 
		 -> ECANReceiveMessage@str(BANK0[5]), STR_36(CODE[7]), STR_35(CODE[3]), STR_34(CODE[14]), 
		 -> STR_33(CODE[8]), STR_32(CODE[7]), STR_31(CODE[3]), STR_30(CODE[14]), 
		 -> STR_29(CODE[8]), STR_28(CODE[7]), STR_27(CODE[3]), STR_26(CODE[14]), 
		 -> STR_25(CODE[8]), STR_24(CODE[7]), c_CustomerBeingServed(BANK1[26]), c_CustomerWating(BANK1[20]), 
		 -> InitText(BANK1[39]), STR_23(CODE[3]), STR_22(CODE[23]), STR_21(CODE[8]), 
		 -> STR_19(CODE[7]), STR_18(CODE[3]), STR_17(CODE[23]), STR_16(CODE[8]), 
		 -> CanCommsTask@str_333(BANK0[5]), STR_14(CODE[7]), STR_13(CODE[3]), STR_12(CODE[23]), 
		 -> STR_11(CODE[8]), CanCommsTask@str(BANK0[5]), STR_9(CODE[7]), STR_8(CODE[3]), 
		 -> STR_7(CODE[23]), STR_6(CODE[8]), STR_5(CODE[7]), STR_4(CODE[3]), 
		 -> STR_3(CODE[23]), STR_2(CODE[8]), RAM(DATA[3327]), STR_1(CODE[7]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_46(CODE[3]), STR_37(CODE[3]), STR_20(CODE[3]), STR_15(CODE[3]), 
		 -> STR_10(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 5
		 -> ECANReceiveMessage@str_1913(BANK0[5]), ECANReceiveMessage@str(BANK0[5]), CanCommsTask@str_333(BANK0[5]), CanCommsTask@str(BANK0[5]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S1955$_cp	PTR const unsigned char  size(2) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(2) Largest target is 0

    _RegsToCANID@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> RXB1CON(DATA[1]), RXB0CON(DATA[1]), 

    _RegsToCANID@val	PTR unsigned long  size(2) Largest target is 4
		 -> id(BANK0[4]), 

    _RegsToCANID@Value	PTR struct _CAN_MESSAGE_ID size(2) Largest target is 4
		 -> id(BANK0[4]), 

    _CANIDToRegs@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(DATA[1]), TXB1CON(DATA[1]), TXB0CON(DATA[1]), 

    _CANIDToRegs@Value	PTR struct _CAN_MESSAGE_ID size(2) Largest target is 4
		 -> _CANIDToRegs@val(COMRAM[4]), 

    ECANReceiveMessage@data	PTR unsigned char  size(2) Largest target is 4
		 -> data(BANK0[4]), 

    ECANReceiveMessage@id	PTR unsigned long  size(2) Largest target is 4
		 -> id(BANK0[4]), 

    ECANReceiveMessage@dataLen	PTR unsigned char  size(2) Largest target is 1
		 -> dataLen(BANK0[1]), 

    ECANReceiveMessage@savedPtr	PTR unsigned char  size(2) Largest target is 1
		 -> RXB1CON(DATA[1]), RXB0CON(DATA[1]), 

    ECANReceiveMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> RXB1CON(DATA[1]), RXB0CON(DATA[1]), 

    ECANReceiveMessage@msgFlags	PTR enum E16232 size(2) Largest target is 1
		 -> flags(BANK0[1]), 

    ECANSendMessage@data	PTR unsigned char  size(2) Largest target is 4
		 -> data(BANK0[4]), 

    ECANSendMessage@tempPtr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(DATA[1]), TXB1CON(DATA[1]), TXB0CON(DATA[1]), 

    ECANSendMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(DATA[1]), TXB1CON(DATA[1]), TXB0CON(DATA[1]), 

    ECANSendMessage@pb	PTR unsigned char [9] size(2) Largest target is 1
		 -> TXB2CON(DATA[1]), TXB1CON(DATA[1]), TXB0CON(DATA[1]), 

    ColourMix@theState	PTR volatile unsigned char  size(2) Largest target is 85
		 -> m_Keys(BANK0[85]), 

    ColourMix@theTimer	PTR volatile struct ATimeStruct size(2) Largest target is 85
		 -> m_Keys(BANK0[85]), 

    RapidFlashColourB@theState	PTR volatile unsigned char  size(2) Largest target is 85
		 -> m_Keys(BANK0[85]), 

    RapidFlashColourB@theTimer	PTR volatile struct ATimeStruct size(2) Largest target is 85
		 -> m_Keys(BANK0[85]), 

    DimmedColourA@theState	PTR volatile unsigned char  size(2) Largest target is 85
		 -> m_Keys(BANK0[85]), 

    DimmedColourA@theTimer	PTR volatile struct ATimeStruct size(2) Largest target is 85
		 -> m_Keys(BANK0[85]), 

    RedGreenFlash@theState	PTR volatile unsigned char  size(2) Largest target is 85
		 -> m_Keys(BANK0[85]), 

    RedGreenFlash@theTimer	PTR volatile struct ATimeStruct size(2) Largest target is 85
		 -> m_Keys(BANK0[85]), 

    GetColour@theState	PTR volatile unsigned char  size(2) Largest target is 85
		 -> m_Keys(BANK0[85]), 

    GetColour@theTimer	PTR volatile struct ATimeStruct size(2) Largest target is 85
		 -> m_Keys(BANK0[85]), 

    sp__GetSequenceState	PTR volatile unsigned char  size(2) Largest target is 85
		 -> m_Keys(BANK0[85]), 

    IlluminateButton@SequenceState	PTR volatile unsigned char  size(2) Largest target is 85
		 -> m_Keys(BANK0[85]), 

    sp__GetKeyTimer	PTR volatile struct ATimeStruct size(2) Largest target is 85
		 -> m_Keys(BANK0[85]), 

    IlluminateButton@KeyTimer	PTR volatile struct ATimeStruct size(2) Largest target is 85
		 -> m_Keys(BANK0[85]), 

    sp__GetKeyInputTimer	PTR volatile struct ATimeStruct size(2) Largest target is 85
		 -> m_Keys(BANK0[85]), 

    MonitorButton@KeyTimer	PTR volatile struct ATimeStruct size(2) Largest target is 85
		 -> m_Keys(BANK0[85]), 

    MaturedTimer@theTimer	PTR volatile struct ATimeStruct size(2) Largest target is 85
		 -> m_Keys(BANK0[85]), m_DataWriteTimer(BANK0[5]), 

    CalculateFutureTime@theTimer	PTR volatile struct ATimeStruct size(2) Largest target is 85
		 -> m_Keys(BANK0[85]), m_DataWriteTimer(BANK0[5]), 


Critical Paths under _main in COMRAM

    _ConfigureHardware->_OpenUSART
    _TaskManager->_InputTask
    _GetColour->_RedGreenFlash
    _GetColour->_DimmedColourA
    _GetColour->_RapidFlashColourB
    _GetColour->_ColourMix
    _ColourMix->_CalculateFutureTime
    _RapidFlashColourB->_CalculateFutureTime
    _DimmedColourA->_CalculateFutureTime
    _RedGreenFlash->_CalculateFutureTime
    _InputTask->_MonitorButton
    _MonitorButton->_CalculateFutureTime
    _UartCommsTask->_SetKeyState
    _SetKeyState->_CustomerWating
    _SetKeyState->_CustomerBeingServed
    _CustomerBeingServed->_putsUSART
    _CustomerWating->_putsUSART
    _GetSerialChar->_ReadUSART
    _CanCommsTask->_ECANReceiveMessage
    _ECANSendMessage->__CANIDToRegs
    _ECANReceiveMessage->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _putsUSART->_WriteUSART
    _ECANInitialize->_ECANSetOperationMode
    _Increment_Timer->_WriteTimer0

Critical Paths under _LowPriorityISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_TaskManager
    _OutputTask->_IlluminateButton
    _IlluminateButton->_GetColour
    _GetColour->_RedGreenFlash
    _GetColour->_DimmedColourA
    _GetColour->_RapidFlashColourB
    _GetColour->_ColourMix
    _DataCommsTask->_CanCommsTask
    _CanCommsTask->_ECANReceiveMessage
    _ECANReceiveMessage->_sprintf

Critical Paths under _LowPriorityISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LowPriorityISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _LowPriorityISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _LowPriorityISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _LowPriorityISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _LowPriorityISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _LowPriorityISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _LowPriorityISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _LowPriorityISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _LowPriorityISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _LowPriorityISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _LowPriorityISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _LowPriorityISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   17579
                        _TaskManager
                  _ConfigureHardware
 ---------------------------------------------------------------------------------
 (1) _ConfigureHardware                                    1     1      0     180
                                             34 COMRAM     1     1      0
                         _OpenTimer0
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            3     0      3     150
                                             31 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) _OpenTimer0                                           1     0      1      30
                                             31 COMRAM     1     0      1
 ---------------------------------------------------------------------------------
 (1) _TaskManager                                          1     1      0   17399
                                             53 BANK0      1     1      0
                           _InitTime
                           _InitKeys
                    _Increment_Timer
                      _DataCommsTask
                          _InputTask
                         _OutputTask
 ---------------------------------------------------------------------------------
 (2) _OutputTask                                           2     2      0    6842
                                             16 BANK0      2     2      0
                   _IlluminateButton
 ---------------------------------------------------------------------------------
 (3) _IlluminateButton                                     6     5      1    6743
                                             10 BANK0      6     5      1
                       _MaturedTimer
                        _GetKeyTimer
                   _GetSequenceState
                        _GetSequence
                         _ColourNone
                            _ColourA
                            _ColourB
                          _GetColour
 ---------------------------------------------------------------------------------
 (4) _GetColour                                            9     4      5    5709
                                              1 BANK0      9     4      5
                _CalculateFutureTime
                      _RedGreenFlash
                      _DimmedColourA
                  _RapidFlashColourB
                          _ColourMix
 ---------------------------------------------------------------------------------
 (5) _ColourMix                                            8     4      4    1096
                                             42 COMRAM     7     3      4
                                              0 BANK0      1     1      0
                _CalculateFutureTime
 ---------------------------------------------------------------------------------
 (5) _RapidFlashColourB                                    8     4      4    1096
                                             42 COMRAM     7     3      4
                                              0 BANK0      1     1      0
                _CalculateFutureTime
 ---------------------------------------------------------------------------------
 (5) _DimmedColourA                                        8     4      4    1096
                                             42 COMRAM     7     3      4
                                              0 BANK0      1     1      0
                _CalculateFutureTime
 ---------------------------------------------------------------------------------
 (5) _RedGreenFlash                                        8     4      4    1096
                                             42 COMRAM     7     3      4
                                              0 BANK0      1     1      0
                _CalculateFutureTime
 ---------------------------------------------------------------------------------
 (4) _ColourB                                              1     0      1      31
                                             31 COMRAM     1     0      1
 ---------------------------------------------------------------------------------
 (4) _ColourA                                              1     0      1      31
                                             31 COMRAM     1     0      1
 ---------------------------------------------------------------------------------
 (4) _ColourNone                                           1     0      1      31
                                             31 COMRAM     1     0      1
 ---------------------------------------------------------------------------------
 (4) _GetSequence                                          2     1      1     201
                                             31 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (4) _GetSequenceState                                     2     0      2      31
                                             31 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (4) _GetKeyTimer                                          2     0      2      31
                                             31 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _InputTask                                            2     2      0    2381
                                             48 COMRAM     1     1      0
                                              0 BANK0      1     1      0
                      _MonitorButton
 ---------------------------------------------------------------------------------
 (3) _MonitorButton                                        6     5      1    2282
                                             42 COMRAM     6     5      1
                       _MaturedTimer
                _CalculateFutureTime
                        _GetKeyState
                        _SetKeyState
                   _GetKeyInputTimer
                 _ButtonBeingPressed
 ---------------------------------------------------------------------------------
 (4) _ButtonBeingPressed                                   3     2      1      49
                                             31 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (4) _GetKeyInputTimer                                     2     0      2      31
                                             31 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _DataCommsTask                                        0     0      0    7814
                       _CanCommsTask
                      _UartCommsTask
 ---------------------------------------------------------------------------------
 (3) _UartCommsTask                                        2     2      0     992
                                             41 COMRAM     2     2      0
                      _GetSerialChar
                          _putsUSART
                     _GetHeadOfQueue
                        _GetKeyState
                        _SetKeyState
 ---------------------------------------------------------------------------------
 (4) _SetKeyState                                          4     2      2     660
                                             37 COMRAM     4     2      2
                     _CustomerWating
                _CustomerBeingServed
 ---------------------------------------------------------------------------------
 (5) _CustomerBeingServed                                  1     0      1      93
                                             36 COMRAM     1     0      1
                          _putsUSART
 ---------------------------------------------------------------------------------
 (5) _CustomerWating                                       1     0      1      93
                                             36 COMRAM     1     0      1
                          _putsUSART
 ---------------------------------------------------------------------------------
 (4) _GetKeyState                                          1     0      1      31
                                             31 COMRAM     1     0      1
 ---------------------------------------------------------------------------------
 (4) _GetHeadOfQueue                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _GetSerialChar                                        1     1      0      47
                                             32 COMRAM     1     1      0
                          _ReadUSART
 ---------------------------------------------------------------------------------
 (5) _ReadUSART                                            1     1      0      23
                                             31 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _CanCommsTask                                        13    13      0    6822
                                             40 BANK0     13    13      0
                          _putsUSART
                     _ECANInitialize
                 _ECANReceiveMessage
                            _sprintf
                       _MaturedTimer
                    _ECANSendMessage
                _CalculateFutureTime
 ---------------------------------------------------------------------------------
 (6) _CalculateFutureTime                                 11     6      5     901
                                             31 COMRAM    11     6      5
 ---------------------------------------------------------------------------------
 (4) _ECANSendMessage                                     34    26      8    1339
                                             42 COMRAM     1     1      0
                                              0 BANK0     33    25      8
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (5) __CANIDToRegs                                        11     4      7     476
                                             31 COMRAM    11     4      7
 ---------------------------------------------------------------------------------
 (4) _MaturedTimer                                         4     2      2     328
                                             31 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (4) _ECANReceiveMessage                                  25    17      8    2693
                                             47 COMRAM     1     1      0
                                             16 BANK0     24    16      8
                          _putsUSART
                            _sprintf
                       __RegsToCANID
 ---------------------------------------------------------------------------------
 (5) __RegsToCANID                                         9     4      5     489
                                             31 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (4) _sprintf                                             18    12      6    1169
                                             45 COMRAM     2     2      0
                                              0 BANK0     16    10      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              6     2      4     232
                                             39 COMRAM     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              8     4      4     241
                                             31 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (6) _putsUSART                                            4     2      2      93
                                             32 COMRAM     4     2      2
                         _WriteUSART
 ---------------------------------------------------------------------------------
 (7) _WriteUSART                                           1     0      1      31
                                             31 COMRAM     1     0      1
 ---------------------------------------------------------------------------------
 (4) _ECANInitialize                                       1     1      0      44
                                             32 COMRAM     1     1      0
               _ECANSetOperationMode
 ---------------------------------------------------------------------------------
 (5) _ECANSetOperationMode                                 1     0      1      44
                                             31 COMRAM     1     0      1
 ---------------------------------------------------------------------------------
 (2) _Increment_Timer                                      0     0      0      45
                        _WriteTimer0
 ---------------------------------------------------------------------------------
 (3) _WriteTimer0                                          4     2      2      45
                                             31 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _InitKeys                                             5     5      0     317
                                             31 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (2) _InitTime                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _LowPriorityISR                                      17    17      0       0
                                             14 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 (9) _ISR                                                 14    14      0       0
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _TaskManager
     _InitTime
     _InitKeys
     _Increment_Timer
       _WriteTimer0
     _DataCommsTask
       _CanCommsTask
         _putsUSART
           _WriteUSART
         _ECANInitialize
           _ECANSetOperationMode
         _ECANReceiveMessage
           _putsUSART
             _WriteUSART
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
           __RegsToCANID
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
         _MaturedTimer
         _ECANSendMessage
           __CANIDToRegs
         _CalculateFutureTime
       _UartCommsTask
         _GetSerialChar
           _ReadUSART
         _putsUSART
           _WriteUSART
         _GetHeadOfQueue
         _GetKeyState
         _SetKeyState
           _CustomerWating
             _putsUSART
               _WriteUSART
           _CustomerBeingServed
             _putsUSART
               _WriteUSART
     _InputTask
       _MonitorButton
         _MaturedTimer
         _CalculateFutureTime
         _GetKeyState
         _SetKeyState
           _CustomerWating
             _putsUSART
               _WriteUSART
           _CustomerBeingServed
             _putsUSART
               _WriteUSART
         _GetKeyInputTimer
         _ButtonBeingPressed
     _OutputTask
       _IlluminateButton
         _MaturedTimer
         _GetKeyTimer
         _GetSequenceState
         _GetSequence
         _ColourNone
         _ColourA
         _ColourB
         _GetColour
           _CalculateFutureTime
           _RedGreenFlash
             _CalculateFutureTime
           _DimmedColourA
             _CalculateFutureTime
           _RapidFlashColourB
             _CalculateFutureTime
           _ColourMix
             _CalculateFutureTime
   _ConfigureHardware
     _OpenTimer0
     _OpenUSART

 _LowPriorityISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             CFF      0       0      31        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      AD       7       67.6%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     36      9D       5       98.1%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     31      40       1       67.4%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       7       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     18A      20        0.0%
DATA                 0      0     191       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.20 build 52243 
Symbol Table                                                                                   Sat Aug 10 15:19:14 2013

          __end_of_CalculateFutureTime 16C8                    _CustomerBeingServed 2EFC  
                                   l32 2F46                                     l25 2D98  
                                   _id 00C1                                     bsr 000FE0  
                          __CFG_BORV$3 000000                      GetColour@theTimer 00CB  
                    GetColour@theState 00C9                           __CFG_CP0$OFF 000000  
                         __CFG_CP1$OFF 000000                           __CFG_CP2$OFF 000000  
                         _CanCommsTask 1110                                    l120 1488  
                                  l201 16C6                                    l205 2392  
                                  l150 22C0                                    l310 2BC6  
                                  l313 2BCC                                    l306 250E  
                                  l315 2BD2                                    l190 14D6  
                                  l414 209A                                    l318 2BD8  
                                  l191 14FA                                    l351 2DD0  
                                  l600 0DCC                                    l186 297E  
                                  l362 2904                                    l372 2CDA  
                                  l374 2CE0                                    l382 2C98  
                                  l710 2A90                                    l631 1DBE  
                                  l607 110E                                    l279 2E04  
                                  l375 2CE6                                    l711 2A9A  
                                  l703 2A6E                                    l392 2D1C  
                                  l376 2CEC                                    l384 2C9E  
                                  l712 2A9C                                    l609 0FA8  
                                  l377 2CF2                                    l385 2CA4  
                                  l705 2A7A                                    l722 2B66  
                                  l626 207A                                    l394 2D22  
                                  l378 2D18                                    l386 2CAA  
                                  l714 2AB4                                    l706 2A7C  
                                  l395 2D28                                    l387 2CB0  
                                  l396 2D2E                                    l388 2CD6  
                                  l397 2D34                                    l709 2A8E  
                                  l398 2D5A                                    l735 2EAA  
                                  l672 2E1E                                    l673 2E20  
                                  l748 2F3C                                    l589 1B64  
                                  l597 1C4A                      ?_IlluminateButton 00D1  
                         __CFG_CPB$OFF 000000                           __CFG_CPD$OFF 000000  
                                  _ISR 0008              RedGreenFlash@ReturnColour 00C7  
                 __size_of_WriteTimer0 0012                    __end_of_GetKeyTimer 2E60  
                  __end_of_GetKeyState 2ED2                    GetKeyState@theKeyId 0020  
                                  prod 000FF3                                    wreg 000FE8  
                   ??_IlluminateButton 0032                    SetKeyState@theKeyId 0026  
                  SetKeyState@theState 0027                          _RedGreenFlash 27C2  
                         __CFG_LVP$OFF 000000                                   ?_ISR 0001  
                 ?_CustomerBeingServed 0025                           __CFG_WDT$OFF 000000  
                                 l1502 2970                                   l1256 2B5C  
                                 l1266 2C8C                                   l4002 1540  
                                 l4012 15B2                                   l4022 162A  
                                 l4006 1560                                   l4032 169A  
                                 l4202 2CB6                                   l4210 1E04  
                                 l4052 210C                                   l4300 270E  
                                 l4220 1E9E                                   l4046 20A0  
                                 l4054 2114                                   l4222 1EB4  
                                 l4214 1E46                                   l4230 1F16  
                                 l4206 1DC2                                   l4150 28BC  
                                 l3432 2EF0                                   l4048 20C0  
                                 l4136 2BE6                                   l4240 27D0  
                                 l4312 2608                                   l4320 2646  
                                 l4224 1ECA                                   l4152 28C6  
                                 l3610 11C0                                   l4058 2124  
                                 l4138 2C06                                   l4090 24E2  
                                 l4170 2986                                   l4322 2662  
                                 l4306 25CC                                   l4218 1E88  
                                 l4154 28D0                                   l4340 2B32  
                                 l3444 1F9E                                   l4068 2192  
                                 l4084 24B0                                   l4172 298E  
                                 l4180 29C0                                   l4228 1EE6  
                                 l4148 28AC                                   l4350 2B52  
                                 l4342 2B36                                   l4078 246C  
                                 l4094 24F4                                   l4174 2996  
                                 l4182 29EE                                   l4190 2D3A  
                                 l4246 280C                                   l4254 284A  
                                 l4262 2724                                   l4158 28DA  
                                 l4360 2C6A                                   l3632 12B0  
                                 l3704 225E                                   l3712 228C  
                                 l4176 299E                                   l4256 2866  
                                 l3544 2D74                                   l4338 2B2A  
                                 l4362 2C6E                                   l3474 1CEC  
                                 l2762 2E98                                   l3714 2296  
                                 l4290 26B4                                   l3538 2D5E  
                                 l3628 1298                                   l4196 2CF8  
                                 l4268 2760                                   l4276 279E  
                                 l4284 2678                                   l3548 2D8A  
                                 l4366 2C82                                   l4358 2C62  
                                 l3822 1084                                   l3582 1112  
                                 l3718 22A0                                   l4278 27BA  
                                 l3808 1038                                   l3816 1062  
                                 l3760 0E84                                   l3752 0E24  
                                 l3672 1470                                   l3680 21E0  
                                 l3842 18F4                                   l3762 0E98  
                                 l3738 0DAE                                   l3690 220E  
                                 l4298 26F2                                   l3668 145E  
                                 l3684 21FA                                   l3676 21CE  
                                 l3694 221E                                   l3686 2202  
                                 l3864 1994                                   l3848 1918  
                                 l3952 1B68                                   l3696 2224  
                                 l3688 2208                                   l3778 0F18  
                                 l3938 1AF0                                   l3892 1A6E  
                                 l3884 1A08                                   l3886 1A0E  
                                 l3878 19E8                                   l3894 1A7C  
                                 l3798 0FDC                                   l3966 1BE2  
                                 l3974 1C0C                                   l3958 1B8E  
                                 l3982 1C3A                                   l3896 1A9E  
                                 l3992 14B2                                   STR_1 0D40  
                                 STR_2 0D38                                   STR_3 0D13  
                                 STR_4 0D47                                   STR_5 0D40  
                                 STR_6 0D38                                   STR_7 0D13  
                                 STR_8 0D47                                   STR_9 0D40  
                                 _T0IF 007F92                                   u1301 179A  
                                 u1311 17EC                                   u1321 17FE  
                                 u1331 1850                                   u1341 1862  
                                 u1351 18B4                                   u1271 1724  
                                 u2215 1C96                                   u1361 18C6  
                                 u1281 1736                                   u2225 1CB6  
                                 u3050 2BDC                                   u1291 1788  
                                 u2235 1D08                                   u2430 2B86  
                                 u2175 1F60                                   u2440 2BB4  
                                 u2185 1F88                                   u2195 1FB2  
                                 u2437 2B80                                   u2447 2BAE  
                                 u2720 238E                                   u2485 0DBA  
                                 u2487 0DC0                    __end_of_GetSequence 29F2  
                     ??_ECANInitialize 0021                      ?_GetKeyInputTimer 0020  
                                 _data 00BD                                   _main 2F42  
               __end_of_GetHeadOfQueue 2F5A                                   fsr0h 000FEA  
                                 fsr1h 000FE2                                   indf0 000FEF  
                                 fsr0l 000FE9                                   fsr2h 000FDA  
                                 indf1 000FE7                                   fsr1l 000FE1  
                                 indf2 000FDF                                   fsr2l 000FD9  
            __size_of_GetSequenceState 001E                     ??_GetKeyInputTimer 0022  
                                 pclat 000FFA                                   prodh 000FF4  
                                 prodl 000FF3                  __end_of_MonitorButton 2510  
                                 start 00A2                          __CFG_IESO$OFF 000000  
                      __end_of_EndChar 0D0B                        __end_of_ColourA 2D1A  
                      __end_of_ColourB 2CD8              ECANReceiveMessage@dataLen 00DB  
            RapidFlashColourB@theTimer 002D              RapidFlashColourB@theState 002B  
                                ??_ISR 0001                       __RegsToCANID@val 0022  
                     __RegsToCANID@ptr 0020                                  ?_main 0001  
                                STR_10 0D4A                                  STR_11 0D38  
                                STR_12 0D13                                  STR_20 0D4A  
                                STR_13 0D47                                  STR_21 0D38  
                                STR_14 0D40                                  STR_30 0D2A  
                                STR_22 0D13                                  STR_31 0D47  
                                STR_23 0D47                                  STR_15 0D4A  
                                STR_40 0D47                                  STR_16 0D38  
                                STR_32 0D40                                  STR_24 0D40  
                                STR_33 0D38                                  STR_25 0D38  
                                STR_41 0D40                                  STR_17 0D13  
                                STR_18 0D47                                  STR_42 0D38  
                                STR_34 0D2A                                  STR_26 0D2A  
                                STR_35 0D47                                  STR_27 0D47  
                                STR_19 0D40                                  STR_43 0D2A  
                                STR_44 0D47                                  STR_36 0D40  
                                STR_28 0D40                                  STR_29 0D38  
                                STR_45 0D40                                  STR_37 0D4A  
                                STR_38 0D38                                  STR_46 0D4A  
                                STR_47 0D38                                  STR_39 0D2A  
                                STR_48 0D2A                                  STR_49 0D47  
                                _T0CON 000FD5                        __end_of___lwdiv 2B66  
                                i1l220 005C                        __end_of___lwmod 2C96  
                                i2l223 2A20                                  _RCREG 000FAE  
                __end_of_UartCommsTask 22C2                                  _RCSTA 000FAB  
                                _TMR0H 000FD7                                  _TMR0L 000FD6  
                                _SPBRG 000FAF                                  _PORTA 000F80  
                                _PORTB 000F81                                  _PORTC 000F82  
                                _TRISA 000F92                                  _TRISB 000F93  
                                _TRISC 000F94                                  _TXREG 000FAD  
                                _TXSTA 000FAC                          __CFG_PWRT$OFF 000000  
                        __CFG_WRT0$OFF 000000                          __CFG_WRT1$OFF 000000  
                        __CFG_WRT2$OFF 000000                         __CFG_EBTR0$OFF 000000  
                       __CFG_FCMEN$OFF 000000                         __CFG_EBTR1$OFF 000000  
                       __CFG_EBTR2$OFF 000000                         ?_RedGreenFlash 002B  
                        __CFG_WRTB$OFF 000000                          __CFG_WRTC$OFF 000000  
                        __CFG_WRTD$OFF 000000                         __CFG_EBTRB$OFF 000000  
                                _flags 00C6                        __end_of_dpowers 0D0A  
                ??_CustomerBeingServed 0026                             _ColourNone 2D1A  
                           InputTask@i 00C7                                  tablat 000FF5  
                                plusw2 000FDB                                  status 000FD8  
                      __end_of_sprintf 1AAC                        ?_GetHeadOfQueue 0001  
            DimmedColourA@ReturnColour 00C7                         WriteUSART@data 0020  
                 _ECANSetOperationMode 2EE8                         __CFG_MCLRE$OFF 000000  
                      __initialization 2AB6                           __end_of_main 2F4C  
                     __end_of_KeyCount 0D0C                          ?_MaturedTimer 0020  
         CalculateFutureTime@CarryOver 002A                       __end_of_InitKeys 18E0  
                          _GetKeyTimer 2E42                            _GetKeyState 2EBA  
                     __end_of_InitTime 2EE8                          ??_SetKeyState 0028  
                __end_of_DimmedColourA 27C2                      ??_ECANSendMessage 002B  
                MonitorButton@KeyTimer 002F                                 ??_main 0032  
                     UartCommsTask@Msg 003B                     __size_of_GetColour 015E  
                       _c_CanCommandOn 0145                          __activetblptr 000002  
                    __RegsToCANID@type 0024                          ??_TaskManager 00FC  
                          _GetSequence 2980             ECANReceiveMessage@msgFlags 00DD  
                __end_of_GetSerialChar 2E9C                                 _ADCON1 000FC1  
                   __size_of_ColourMix 00AC             ECANReceiveMessage@savedPtr 00E9  
                               _CANCON 000F6F                                 _CIOCON 000F73  
                     ??_LowPriorityISR 000F                        __CFG_BBSIZ$1024 000000  
           ECANReceiveMessage@str_1913 00E4                             _OpenTimer0 2E06  
                   __size_of_ReadUSART 001E                                 _OSCCON 000FD3  
                               _SPBRGH 000FB0                 ECANReceiveMessage@data 00D9  
               __size_of_DataCommsTask 000A                 ECANReceiveMessage@temp 00EE  
                            ??_ColourA 0021                              ??_ColourB 0021  
                               _NoRead 0D0C                  ?_ECANSetOperationMode 0020  
                   __CANIDToRegs@Value 0029                         __CFG_XINST$OFF 000000  
                   __size_of_InputTask 0034                     __size_of_OpenUSART 005C  
                       ??_MaturedTimer 0022                  __end_of_SequenceReset 0D0E  
                      _Increment_Timer 2906                                 _m_Keys 0063  
                     OpenTimer0@config 0020                              ??___lwdiv 0024  
                            ??___lwmod 002C                  _c_NoSecInMinOrMinInHr 0D12  
                               clear_0 2ABC                                 clear_1 2AC8  
          GetSequence@ReturnedSequence 0021                __size_of_CustomerWating 0012  
                      __CFG_BOREN$BOHW 000000                           __pdataCOMRAM 003F  
                      ??_RedGreenFlash 002F                    __end_of_SetKeyState 21CC  
                         __mediumconst 0000                                 tblptrh 000FF7  
                               tblptrl 000FF6                                 tblptru 000FF8  
            GetSerialChar@ReceivedChar 0021                              ??_sprintf 002E  
                          ?_ColourNone 0020                    __end_of_TaskManager 2D9A  
        CalculateFutureTime@theMinutes 0022          CalculateFutureTime@theSeconds 0023  
                           __accesstop 0060                __end_of__initialization 2B06  
                      __CFG_PBADEN$OFF 000000                             _OutputTask 2D9A  
                     _GetSequenceState 2E24                      __end_of_GetColour 1F1E  
                GetColour@theSequences 00C8                             _WriteUSART 2F32  
                       __pcstackCOMRAM 0001            __size_of_ButtonBeingPressed 004E  
                  GetSequence@theKeyId 0020                 CustomerWating@theKeyId 0025  
                         __pidataBANK1 2510                      __end_of_ColourMix 266A  
                        _DataCommsTask 2F4C                      __end_of_ReadUSART 2EBA  
                        ?__RegsToCANID 0020            __size_of_ECANReceiveMessage 03C2  
              ButtonBeingPressed@theId 0020                  IlluminateButton@theId 00D1  
                    __end_of_InputTask 2E06                          ReadUSART@data 0020  
                   __RegsToCANID@Value 0027                      __end_of_OpenUSART 2AB6  
                      _c_CanCommandOff 0131               IlluminateButton@KeyTimer 00D2  
                           __pbssBANK0 0060                    __end_of_TimersCount 0D10  
                          ?_OpenTimer0 0020               GetSequenceState@theKeyId 0020  
                            ?_InitKeys 0001                              ?_InitTime 0001  
            __size_of_IlluminateButton 0098                __end_of_Increment_Timer 2980  
               ??_ECANSetOperationMode 0021                    __end_of_c_NoHrInDay 0D11  
             IlluminateButton@Sequence 00D6                      __end_of_StartChar 0D0F  
                GetColour@ReturnColour 00D0               ECANSetOperationMode@mode 0020  
                 __ECANRxFilterHitInfo 0061                  DimmedColourA@theTimer 002D  
                DimmedColourA@theState 002B              __size_of_GetKeyInputTimer 001E  
                  __size_of_ColourNone 0042                          _m_HeadOfQueue 003D  
                     WriteTimer0@timer 0022                          putsUSART@data 0021  
                        ??_WriteTimer0 0022                         ?_DataCommsTask 0001  
                          _SetKeyState 207C                  __end_of_c_NoMsecInSec 0D12  
                       ??__RegsToCANID 0025                                _BRGCON1 000F70  
                              _BRGCON2 000F71                                _BRGCON3 000F72  
         __size_of_CalculateFutureTime 023E                            _TaskManager 2D5C  
                              _RXB0CON 000F60                                _RXB1CON 000F50  
    CalculateFutureTime@theHalfSeconds 0024                                _TXB0CON 000F40  
                              _TXB1CON 000F30                                _TXB2CON 000F20  
                        _m_HalfSeconds 0037                     __size_of_putsUSART 0056  
                     ??_GetHeadOfQueue 0020                   __end_of_MaturedTimer 2396  
                              _EndChar 0D0A                             ??_InitKeys 0020  
                           ??_InitTime 0020                            ?_OutputTask 0001  
                              _ColourA 2CD8                                _ColourB 2C96  
                      _ECANSendMessage 1AAC  MonitorBartenderButton@BartenderButton 003F  
                              __Hparam 0000                  RedGreenFlash@theTimer 002D  
                              __Lparam 0000                  RedGreenFlash@theState 002B  
                 MaturedTimer@ToReturn 0023                            ?_WriteUSART 0020  
                      CanCommsTask@str 00F2                           ?_GetKeyTimer 0020  
                              ___lwdiv 2B10                           ?_GetKeyState 0020  
                              ___lwmod 2C50                           __psmallconst 0D00  
                      __CFG_STVREN$OFF 000000                                _dataLen 00C5  
                              __pcinit 2AB6                                _m_Ticks 003E  
                              __ramtop 0D00                    __size_of_OpenTimer0 001E  
                       _CustomerWating 2F0E                                __ptext0 2F42  
                              __ptext1 2C0A                                __ptext2 2A5A  
                              __ptext3 2E06                                __ptext4 2D5C  
                              __ptext5 2D9A                                __ptext6 286E  
                              __ptext7 1DC0                                __ptext8 25BE  
                              __ptext9 266A                              _T0CONbits 000FD5  
                         __size_of_ISR 2A52            __end_of_CustomerBeingServed 2F0E  
                              _dpowers 0D00                           ?_GetSequence 0020  
                          _TimersCount 0D0F                 __size_of_MonitorButton 00B6  
                  CanCommsTask@str_333 00F7                    __end_of_WriteTimer0 2F32  
                              _sprintf 18E0                         __pintcode_body 29F2  
                          _c_NoHrInDay 0D10                   end_of_initialization 2B06  
                        __Lmediumconst 0000                                int_func 29F2  
                    _RapidFlashColourB 266A                       ?_Increment_Timer 0001  
                 MaturedTimer@theTimer 0020                 __size_of_UartCommsTask 00F6  
                   ?_RapidFlashColourB 002B                      ECANSendMessage@id 00C7  
                    ECANSendMessage@pb 00CF                              _RCSTAbits 000FAB  
                 TaskManager@Operation 0040                                postdec1 000FE5  
                              postdec2 000FDD                __size_of_ECANInitialize 00C4  
                              postinc0 000FEE                                postinc1 000FE6  
                              postinc2 000FDE                      __end_of_putsUSART 2BBC  
                      ??_DataCommsTask 0031                 __end_of_CustomerWating 2F20  
                  ??_RapidFlashColourB 002F                              _PORTAbits 000F80  
                            _PORTBbits 000F81                              _PORTCbits 000F82  
             __end_of_GetSequenceState 2E42                  _c_CustomerBeingServed 017F  
                  __size_of_OutputTask 0038                      _ConfigureHardware 2C0A  
                            _TRISCbits 000F94                     ?_ConfigureHardware 0001  
                         ??_ColourNone 0021                    __size_of_WriteUSART 0010  
              __end_of_ECANSendMessage 1C4C              __end_of_RapidFlashColourB 2716  
                     _IlluminateButton 286E                 __size_of_DimmedColourA 00AC  
                        ?__CANIDToRegs 0020                   __end_of__RegsToCANID 1DC0  
                  ??_ConfigureHardware 0023                              _TXSTAbits 000FAC  
                   MonitorButton@theId 002B                          _MonitorButton 245A  
                        _m_CurrentTime 0032                              _GetColour 1DC0  
                       __end_of_NoRead 0D0D                 __size_of_GetSerialChar 001E  
                      ?_CustomerWating 0025                       _GetKeyInputTimer 2E60  
                        __pidataCOMRAM 2F5A                     __end_of_ColourNone 2D5C  
                          _WriteTimer0 2F20                          ?_CanCommsTask 0001  
                          _ECANCONbits 000F77                              _ColourMix 25BE  
            __end_of_ConfigureHardware 2C50                  __size_of_MaturedTimer 00D4  
                        _UartCommsTask 21CC                    start_initialization 2AB6  
                            _ReadUSART 2E9C                            __end_of_ISR 2A5A  
                __end_of_RedGreenFlash 286E                           ??_OpenTimer0 0021  
                          OutputTask@i 00D8                              _InputTask 2DD2  
                       ??__CANIDToRegs 0027                              _OpenUSART 2A5A  
                     __CFG_OSC$IRCIO67 000000                    _CalculateFutureTime 148A  
                    __size_of_InitKeys 0218                         ?_MonitorButton 002B  
                    __size_of_InitTime 0016             __end_of_ButtonBeingPressed 2C0A  
                ECANReceiveMessage@ptr 00EC                  ECANReceiveMessage@str 00DF  
              __size_of_LowPriorityISR 008A                             ?_GetColour 00C8  
                    __CANIDToRegs@type 0026                           _MaturedTimer 22C2  
           __end_of_ECANReceiveMessage 1110                            __pdataBANK1 0100  
                     __CFG_LPT1OSC$OFF 000000                           ?_SetKeyState 0026  
                       ??_CanCommsTask 00EF                              _StartChar 0D0E  
                        _DimmedColourA 2716                   __size_of_GetKeyTimer 001E  
                 __size_of_GetKeyState 0018                             ?_ColourMix 002B  
                 ?_CalculateFutureTime 0020                     __end_of_OpenTimer0 2E24  
        IlluminateButton@SequenceState 00D4                         ?_UartCommsTask 0001  
                         ?_TaskManager 0001        UartCommsTask@DataCommsReadState 003A  
                          __pbssCOMRAM 0032                             ?_ReadUSART 0001  
                        __pcstackBANK0 00C7                    __end_of__stringdata 0D4D  
                 __size_of_GetSequence 0072                          _GetSerialChar 2E7E  
                     ?_ECANSendMessage 00C7             __size_of_RapidFlashColourB 00AC  
                           ?_InputTask 0001                             ?_OpenUSART 0020  
                         ??_OutputTask 00D7                            sprintf@_val 00D1  
                          sprintf@flag 00CF                            sprintf@prec 00D0  
                             ?_ColourA 0020                               ?_ColourB 0020  
                     ___lwdiv@dividend 0020          __size_of_ECANSetOperationMode 0014  
          CalculateFutureTime@theTimer 0020                           ??_WriteUSART 0021  
                       _ECANInitialize 2396                              __pintcode 0008  
                        _SequenceReset 0D0D                               ?___lwdiv 0020  
                             ?___lwmod 0028                         ?_DimmedColourA 002B  
                          __pintcodelo 0018                    GetKeyTimer@theKeyId 0020  
                    ColourMix@theTimer 002D                      ColourMix@theState 002B  
                ??_CalculateFutureTime 0025             __size_of_ConfigureHardware 0046  
                          __smallconst 0D00                      WriteTimer0@timer0 0020  
                          _COMSTATbits 000F74                     __end_of_OutputTask 2DD2  
                       ?_GetSerialChar 0001                       ___lwdiv@quotient 0026  
                __size_of__RegsToCANID 0174                       _m_DataWriteTimer 00B8  
                             ?_sprintf 00C7                     __end_of_WriteUSART 2F42  
                      ??_MonitorButton 002C            CustomerBeingServed@theKeyId 0025  
                             _PIE1bits 000F9D                 __end_of_ECANInitialize 245A  
                             _PIR1bits 000F9E                               _PIR3bits 000FA4  
                     ECANSendMessage@i 00E5                       ECANSendMessage@j 00E1  
                          ??_GetColour 00CD                       __CFG_WDTPS$32768 000000  
                             _RXF0SIDH 000F00                               _RXF0SIDL 000F01  
                             _RXF1SIDH 000F04                               _RXF1SIDL 000F05  
                             _RXF2SIDH 000F08                               _RXF2SIDL 000F09  
                             _RXF3SIDH 000F0C                               _RXF3SIDL 000F0D  
                             _RXF4SIDH 000F10                               _RXF4SIDL 000F11  
                             _RXF5SIDH 000F14                               _RXF5SIDL 000F15  
                             _RXM0SIDH 000F18                               _RXM0SIDL 000F19  
                             _RXM1SIDH 000F1C                               _RXM1SIDL 000F1D  
            SetKeyState@OldHeadOfQueue 0028                        ??_UartCommsTask 002A  
                 __end_of__CANIDToRegs 207C               __end_of_IlluminateButton 2906  
                            _putsUSART 2B66                            ??_ColourMix 002F  
                          __stringdata 0D13          RapidFlashColourB@ReturnColour 00C7  
                         __RegsToCANID 1C4C                      ?_GetSequenceState 0020  
                          ??_ReadUSART 0020                     ??_GetSequenceState 0022  
             GetKeyInputTimer@theKeyId 0020                              copy_data0 2AE2  
         __size_of_CustomerBeingServed 0012               __end_of_GetKeyInputTimer 2E7E  
                             _KeyCount 0D0B                            ??_InputTask 0031  
                          ??_OpenUSART 0023                               _InitKeys 16C8  
                             _InitTime 2ED2                               _InitText 0158  
                 __end_of_CanCommsTask 148A                        OpenUSART@config 0020  
                     __size_of_ColourA 0042                       __size_of_ColourB 0042  
                      ?_ECANInitialize 0001                               __Hrparam 0000  
                     ??_CustomerWating 0026                   ECANReceiveMessage@id 00D7  
              __size_of_GetHeadOfQueue 0004                         _LowPriorityISR 0018  
                             __Lrparam 0000                       __CANIDToRegs@val 0022  
                     __CANIDToRegs@ptr 0020                        ??_DimmedColourA 002F  
             __size_of_Increment_Timer 007A                  __end_of_DataCommsTask 2F56  
                     __size_of___lwdiv 0056                       __size_of___lwmod 0046  
                         ?_WriteTimer0 0020                          _c_NoMsecInSec 0D11  
                           ?_putsUSART 0021                   __size_of_SetKeyState 0150  
                      ??_GetSerialChar 0021                        ___lwdiv@divisor 0022  
                             _m_Toggle 0062                   __size_of_TaskManager 003E  
                      ___lwdiv@counter 0025                               __ptext10 2716  
                             __ptext11 27C2                               __ptext20 2BBC  
                             __ptext12 2C96                               __ptext21 2E60  
                             __ptext13 2CD8                               __ptext30 2E9C  
                             __ptext22 2F4C                               __ptext14 2D1A  
                             __ptext31 1110                               __ptext23 21CC  
                             __ptext15 2980                               __ptext40 2B10  
                             __ptext32 148A                               __ptext24 207C  
                             __ptext16 2E24                               __ptext41 2B66  
                             __ptext33 1AAC                               __ptext25 2EFC  
                             __ptext17 2E42                               __ptext42 2F32  
                             __ptext34 1F1E                               __ptext26 2F0E  
                             __ptext18 2DD2                               __ptext43 2396  
                             __ptext35 22C2                               __ptext27 2EBA  
                             __ptext19 245A                               __ptext44 2EE8  
                             __ptext36 0D4E                               __ptext28 2F56  
                             __ptext45 2906                               __ptext37 1C4C  
                             __ptext29 2E7E                               __ptext46 2F20  
                             __ptext38 18E0                               __ptext47 16C8  
                             __ptext39 2C50                               __ptext48 2ED2  
                     __size_of_sprintf 01CC         ButtonBeingPressed@BeingPressed 0022  
                        __size_of_main 000A                 __end_of_LowPriorityISR 00A2  
        __end_of_c_NoSecInMinOrMinInHr 0D13                    ECANSendMessage@data 00CB  
                  ECANSendMessage@temp 00E4                     _ButtonBeingPressed 2BBC  
                         _RXM0SIDLbits 000F19                            _RXB0CONbits 000F60  
                          _RXB1CONbits 000F50                           _RXM1SIDLbits 000F1D  
                           _INTCONbits 000FF2                         OpenUSART@spbrg 0021  
                  ECANReceiveMessage@i 00EB                    ?_ButtonBeingPressed 0020  
                   _ECANReceiveMessage 0D4E                    _c_CanMessageSentOff 0100  
             UartCommsTask@HeadOfQueue 002B                               intlevel1 0000  
                             intlevel2 0000                              sprintf@ap 00CD  
                            sprintf@sp 00C7                       ___lwmod@dividend 0028  
                  ?_ECANReceiveMessage 00D7         CanCommsTask@DataCommsReadState 0060  
                      ?_LowPriorityISR 0001                ECANSendMessage@msgFlags 00CE  
                 SetKeyState@LoopKeyId 0029                   ??_ButtonBeingPressed 0021  
                   ECANSendMessage@ptr 00E6                  __size_of__CANIDToRegs 015E  
               __size_of_RedGreenFlash 00AC                          ??_GetKeyTimer 0022  
                        ??_GetKeyState 0021                        ColourNone@theId 0020  
               ECANSendMessage@dataLen 00CD                   ??_ECANReceiveMessage 0030  
                          ??_putsUSART 0023                     _c_CanMessageSentOn 0119  
                             sprintf@c 00D6                               sprintf@f 00C9  
                         ColourA@theId 0020                           ColourB@theId 0020  
                      ___lwmod@divisor 002A           __end_of_ECANSetOperationMode 2EFC  
                        ??_GetSequence 0021                      ??_Increment_Timer 0024  
                      ___lwmod@counter 002D                       _c_CustomerWating 0199  
               ECANSendMessage@tempPtr 00E2                  __size_of_CanCommsTask 037A  
                     InitKeys@KeyTimer 0020                           __CANIDToRegs 1F1E  
                ColourMix@ReturnColour 00C7                           _USART_Status 003C  
                       _GetHeadOfQueue 2F56               __size_of_ECANSendMessage 01A0  
